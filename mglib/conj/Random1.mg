(** $T hf **)
(** $I sig/PfgPreambleSep2020.mgs **)

Section Random1.

Theorem conj_Random1_TMQEe9FjmdtA77CJm8oxVjytEWYiCJos42z: forall X0 :e Empty, forall X1 c= V_ Empty, ((exists X2 :e X1, forall X3 :e X0, (exists X4 :e X3, ordinal X3) -> ((forall X4 c= X3, atleast4 X2) /\ (exists X4:set, ((SNo X1 -> (((exactly4 X4 -> (~ exactly3 X3)) -> atleast4 X4) /\ (((~ equip X1 X1) -> nat_p X3) -> (~ atleast5 Empty)))) /\ atleast2 X3))) -> (~ setsum_p X2)) /\ (exists X2:set, (TransSet X1 /\ (forall X3 :e X2, setsum_p X3 -> (forall X4 c= X2, (atleast6 X4 /\ ((((~ ordinal X3) -> atleast6 X3 -> (~ exactly3 X2)) /\ exactly3 X2) /\ (~ atleast4 X0)))))))).
admit.
Qed.

Theorem conj_Random1_TMdoKBqRnr4o7BYZoP6j6d4JPMkydEKKA3F: exists X0:set, ((forall X1:set, (exists X2:set, ((forall X3:set, (~ TransSet Empty)) /\ (forall X3:set, (~ exactly4 X0) -> (forall X4 c= X2, ordinal X3 -> atleast5 X3)))) -> (exists X2:set, exists X3:set, (~ TransSet X0) -> (exists X4:set, ((X4 c= X1) /\ (exactly3 X2 /\ (~ atleast4 (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))))))))) /\ (exists X1:set, ((X1 c= binrep (Power (Power (Power (Power Empty)))) Empty) /\ (forall X2:set, (forall X3 :e X1, exists X4:set, ((X4 c= X0) /\ atleast5 X1)) -> (exists X3:set, forall X4 :e X3, (~ totalorder_i (fun X5:set => fun X6:set => (exactly3 X6 /\ atleast3 X4))) -> (((~ nat_p X1) /\ ((~ TransSet X4) -> (~ atleast3 X3))) /\ ((~ nat_p X4) /\ atleast6 X3))))))).
admit.
Qed.

Theorem conj_Random1_TMH4ZacEkoR1PKiEftwQYVDcNKBwmTu9Msn: exists X0:set, ((X0 c= binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) /\ (exists X1:set, ((forall X2 c= X1, forall X3:set, (exists X4:set, ((X4 c= setsum Empty X0) /\ ((nat_p X2 -> (~ nat_p Empty)) /\ ((~ tuple_p X3 X4) /\ ((reflexive_i (fun X5:set => fun X6:set => (~ nat_p X6)) -> exactly3 X3) -> (~ exactly3 X3) -> ((SNoLt X3 X2 /\ nat_p X3) /\ ((atleast6 X3 /\ ((nat_p X3 /\ atleast3 X2) /\ (TransSet X3 /\ exactly2 X2))) /\ exactly5 X3))))))) -> (exists X4:set, ((X4 c= X3) /\ (~ nat_p X4))) -> (exists X4:set, (X2 c= X2) -> atleast4 X4 -> ((((~ tuple_p X3 X3) -> (~ atleast3 Empty)) -> (~ atleast4 X2)) /\ (~ exactly5 X0)))) /\ (exists X2:set, ((X2 c= X1) /\ ((forall X3:set, (~ nat_p X3)) -> (~ atleast3 (binrep (Power (Power (Power Empty))) Empty)))))))).
admit.
Qed.

Theorem conj_Random1_TMNEa7dj5GTMAMRKgDFwhDUijDxdCcgJHbt: forall X0:set, (forall X1:set, exactly5 X0 -> (exists X2:set, ((forall X3 :e SNoLev X2, (~ atleast5 X1) -> (forall X4:set, ((((strictpartialorder_i (fun X5:set => fun X6:set => SNoLe X4 X6) -> (~ exactly4 (Power X3))) /\ (((((~ atleast2 (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty)) /\ (atleast3 X3 /\ ordinal X4)) /\ (~ atleast4 (Power (binrep (Power (Power Empty)) Empty)))) -> ((((((~ exactly2 X2) -> (exactly5 (PSNo X2 (fun X5:set => (~ set_of_pairs Empty) -> (~ reflexive_i (fun X6:set => fun X7:set => (~ SNo_ X7 Empty))))) /\ (~ atleast4 X3))) /\ (~ atleast6 X3)) /\ (exactly5 X4 /\ (TransSet X2 /\ (~ exactly2 X0)))) /\ (((~ atleast4 (binintersect X3 X4)) -> PNo_upc (fun X5:set => fun X6:set -> prop => (atleast6 X3 /\ X6 X5)) X3 (fun X5:set => (~ exactly4 X3))) -> nat_p X4)) /\ (~ ordinal (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty)))) -> (exactly3 Empty /\ (~ setsum_p X4)))) -> ((~ set_of_pairs X4) /\ (~ atleast5 X4))) /\ set_of_pairs (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty)))) /\ (forall X3 :e binrep X2 X0, atleast4 X2 -> (~ exactly4 X2))))) -> (forall X1:set, exactly2 X1 -> (forall X2:set, (forall X3 c= X2, ((exists X4 :e Sing X3, (~ atleast2 X1)) /\ atleast6 X3) -> (forall X4 :e ordsucc X1, (~ atleast5 X4))) -> (exists X3:set, exactly2 X2 -> (~ SNoEq_ X1 X1 X2)))).
admit.
Qed.

Theorem conj_Random1_TMXTV4Fw4XHL9DUv41yYzCoLRAefmmx8ohs: exists X0:set, exists X1:set, ((X1 c= Power (Power (Power (Power Empty)))) /\ (exactly4 X0 -> (exists X2 :e X0, exactly3 X1 -> (exists X3:set, ((exists X4:set, (nat_p X3 /\ ((~ (X3 :e X4)) -> (~ atleast6 X4)))) /\ ((exists X4 :e X1, atleast5 X4) /\ ((((exists X4:set, (inj X2 X4 (fun X5:set => X4) /\ (~ set_of_pairs X4))) /\ (~ ordinal Empty)) -> (~ setsum_p Empty)) /\ (forall X4 :e Union X2, atleast2 X4)))))) -> ((forall X2:set, forall X3:set, (~ equip X2 X3) -> (forall X4:set, (~ TransSet X3))) /\ (exists X2:set, exists X3:set, forall X4 :e mul_nat X2 (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty), (~ atleast6 X3))))).
admit.
Qed.

Theorem conj_Random1_TMMj5ARG9BXR3XTjwFRDiUnbZ57NDYvUCGL: forall X0:set, forall X1 c= X0, forall X2 c= X1, forall X3 :e X0, (forall X4:set, atleast3 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty) -> (~ exactly5 X3)) -> (exists X4:set, (((((~ SNo (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))) /\ reflexive_i (fun X5:set => fun X6:set => (~ set_of_pairs (V_ X0)))) /\ ((((((~ atleast5 X3) -> (~ exactly5 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty)) -> atleast6 X4 -> (~ TransSet (binrep (Power (Power (Power Empty))) (Power Empty)))) /\ ((((((~ reflexive_i (fun X5:set => fun X6:set => ((~ TransSet X0) -> ((((((atleast4 Empty /\ (((((((~ exactly3 X6) /\ (((~ exactly5 X5) -> ((~ nat_p X5) /\ nat_p X3) -> (~ atleast6 X5)) -> ((((~ nat_p X2) /\ (((exactly3 X6 /\ (atleast6 X5 -> (ordinal X0 -> TransSet (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)) -> (exactly5 (binrep (Power (Power (Power (Power Empty)))) Empty) /\ (~ exactly4 (setsum X6 X0))))) -> atleast6 X6) /\ atleast2 X6)) /\ TransSet X5) /\ (atleast4 X0 -> (Inj0 X5 :e setexp X5 X0))))) /\ (TransSet (binrep (Power (Power (Power Empty))) Empty) /\ (((~ exactly2 X6) -> (((X0 = X2) -> (~ (X0 c= X5)) -> ((atleast4 X6 -> (~ exactly3 X0)) /\ (((X0 :e binrep (Power (binrep (Power (Power Empty)) Empty)) Empty) /\ (((~ atleast4 (SNoLev X6)) -> (~ reflexive_i (fun X7:set => fun X8:set => ((SNo X4 /\ (~ atleast3 X7)) /\ (~ TransSet X2)) -> atleast4 X7)) -> (SNoLt X3 X3 /\ (atleast2 X0 /\ exactly4 X1))) /\ (~ atleast6 X6))) -> ((((~ TransSet X0) /\ ((exactly2 (Inj1 (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty)) /\ (atleastp X5 X0 /\ (PNoEq_ X5 (fun X7:set => atleast6 X6) (fun X7:set => (((~ TransSet Empty) /\ (~ atleast3 X0)) /\ exactly2 (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty)) -> (~ atleast3 X6)) -> (~ exactly5 X5) -> exactly5 X6 -> ((~ exactly5 X6) /\ (~ exactly2 X0))))) -> (~ exactly2 X0) -> atleast5 X0)) -> (nat_p (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty) /\ nat_p X6) -> (~ atleast3 X4)) /\ (~ SNo_ X5 X6))))) -> exactly4 X5) -> (setsum_p X6 /\ (((~ exactly2 X5) -> ((((~ atleast2 X6) /\ (X5 = X0)) -> (~ atleast6 X3)) /\ (atleast5 Empty /\ (SNoLe (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty) (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty) -> ((~ atleast4 Empty) /\ (exactly3 X1 -> (~ nat_p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty))))) -> (~ atleast2 (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)))) -> (~ ordinal X5))))) -> exactly2 X4))) /\ (PNo_upc (fun X7:set => fun X8:set -> prop => (~ X8 X0) -> ((~ atleast4 X6) -> X8 X7) -> ((((~ X8 (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty)) /\ ((~ X8 X6) /\ atleast4 X2)) /\ X8 X6) /\ atleast5 X6) -> (~ X8 (Power (Power (Power (Power Empty)))))) X2 (fun X7:set => (~ tuple_p X6 (Power (binrep (Power (Power Empty)) Empty))) -> (X3 :e X7)) /\ (~ (X6 :e X6)))))) -> (((exactly5 X6 /\ exactly3 (SNoElts_ X5)) /\ exactly3 X5) /\ (~ exactly2 (nat_primrec X6 (fun X7:set => fun X8:set => binrep (Power (Power (Power (Power Empty)))) (Power Empty)) X6)))) /\ (((~ ordinal X5) -> atleast6 Empty) -> atleast5 X1)) -> atleast3 X6) /\ ordinal X5)) -> (~ SNo_ (binrep (Power (Power (Power Empty))) Empty) X0)) /\ exactly5 X1) /\ (~ atleast2 X5)) /\ (~ exactly2 X6)) /\ (~ atleast3 (binrep (Power (Power (Power (Power Empty)))) (Power Empty))))) -> (~ ordinal X1) -> (((~ exactly3 X5) -> (((~ ordinal X0) /\ exactly5 (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty)) /\ (~ atleast6 X4))) /\ ((~ ordinal X5) -> ((((atleast4 Empty /\ (((~ atleast6 (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty)) -> exactly3 X5 -> (SNo X5 /\ (((((~ nat_p (Power X6)) -> (~ exactly2 X6)) -> (~ atleast6 X0)) /\ (set_of_pairs X0 -> (~ exactly3 X5))) -> (~ TransSet X5)))) /\ (~ setsum_p X2))) /\ ((~ atleast2 X6) -> (~ SNo (ap X6 X6)))) /\ (~ atleast6 X2)) /\ (~ atleast2 X6)))))) -> ((((((~ exactly5 X4) -> ((ordinal X4 -> set_of_pairs X3) /\ atleast4 (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty))) -> ((~ setsum_p X1) -> (~ exactly2 (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)))) -> (((((((~ nat_p X3) /\ (~ exactly3 X4)) -> (~ SNo X4)) /\ ((~ atleast5 X4) -> (~ exactly5 (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)))) -> exactly5 X1) -> (~ inj Empty Empty (fun X5:set => X0))) /\ atleast5 X3)) -> TransSet X0) -> (Empty :e X4)) /\ (~ atleast5 (Power (Power (Power (Power Empty)))))) -> (~ (X3 :e X4))) -> ((equip Empty X4 /\ (~ exactly2 X3)) -> ((((atleast4 Empty /\ (((((((~ exactly1of2 (TransSet X2) ((~ atleast5 X1) -> (~ SNo X0) -> (~ exactly3 X1) -> ((~ exactly4 X4) /\ set_of_pairs X2))) /\ exactly5 X2) -> (TransSet (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) /\ (~ set_of_pairs X4))) /\ (~ atleast6 X0)) /\ (~ setsum_p X3)) -> atleast4 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))) /\ ((atleast3 X4 /\ (~ atleast3 X2)) -> ordinal X0))) /\ nat_p X0) /\ (~ atleast2 (binrep (Power (Power (Power Empty))) (Power Empty)))) /\ (~ atleast3 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty))) -> exactly4 Empty) -> ((~ atleast4 X3) /\ (~ exactly3 X3))) -> (~ ordinal (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)) -> exactly4 (famunion X4 (fun X5:set => X4))) -> (~ reflexive_i (fun X5:set => fun X6:set => ((((exactly2 X5 -> (~ (X6 :e X6))) /\ ((~ (X5 = X5)) /\ (~ tuple_p X2 X5))) -> (~ atleast6 X5)) /\ (atleast4 X4 -> SNo (binrep (Power (Power (Power (Power Empty)))) Empty)))))) /\ atleast6 (V_ X1)) -> nat_p X3)) -> atleast5 X3) -> (ordinal X2 -> (((atleast3 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty) -> (~ nat_p (V_ X3))) -> atleast2 X4 -> (TransSet Empty -> ordinal (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty)) -> (~ atleast3 X1)) /\ (((X3 :e X3) -> (~ exactly3 (V_ X4)) -> ((~ atleast6 X4) /\ (nat_p X2 /\ (~ atleast6 (binrep (Power (Power (Power (Power Empty)))) Empty))))) /\ ((exactly4 X4 /\ ((((ordinal X3 -> (X4 :e X1)) -> exactly4 X0) -> (TransSet X4 /\ (~ SNo X2))) -> bij X4 (binrep (Power (Power (Power (Power Empty)))) Empty) (fun X5:set => binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty))) -> (((~ atleast3 X4) -> (~ atleast2 X2)) /\ (exactly2 X2 -> nat_p X1)))))) -> atleast3 X4 -> (exactly3 Empty /\ SNo_ X1 X1) -> ((~ atleast6 X3) /\ atleast5 X2)) -> (~ atleast2 Empty) -> (atleast2 (Inj0 X1) -> (~ ordinal X3)) -> (~ ordinal X2))) -> exactly3 X1) /\ (((setsum_p (Power Empty) /\ (~ TransSet X3)) -> ((~ (X2 :e binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)) /\ (exactly2 X0 /\ (~ exactly2 X3)))) -> ((exactly4 X4 -> exactly2 (Power (Power (Power (Power Empty))))) /\ ((~ exactly3 X4) -> SNo X3))))).
admit.
Qed.

Theorem conj_Random1_TMZjzw8x5Z73f1PcAbVmsQLBdguh5331NWw: forall X0:set, (exists X1:set, ((X1 c= X0) /\ (((~ atleast5 X0) -> ((forall X2 c= X1, exists X3:set, (forall X4:set, atleast2 X2 -> (~ PNoLt X0 (fun X5:set => ((atleast2 X3 /\ atleast2 X2) /\ (atleast6 X0 -> SNoEq_ X4 X1 X1))) X1 (fun X5:set => ordinal X0 -> (~ atleast3 X5)))) -> (exists X4 :e X2, SNo_ (setminus X4 X4) (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty))) /\ (forall X2:set, forall X3 c= Empty, forall X4 :e X0, atleast4 (binrep (Power (Power (Power Empty))) Empty)))) /\ (forall X2 :e X1, forall X3:set, (~ bij X3 (Union X1) (fun X4:set => X3)) -> ((forall X4 :e binunion X3 X3, (~ exactly3 Empty) -> (~ symmetric_i (fun X5:set => fun X6:set => (~ atleast5 X6)))) -> (exists X4:set, (~ exactly2 X4))) -> (atleast4 X1 /\ atleast3 Empty) -> (~ ordinal X0))))) -> (forall X1 :e X0, (atleast5 X1 -> (forall X2:set, (forall X3:set, exists X4:set, ((X4 c= X3) /\ (~ setsum_p (Power X3)))) -> ordinal (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty))) -> (exists X2 :e Power (binrep (Power (Power Empty)) Empty), exists X3:set, ((X3 c= Empty) /\ ((exactly3 X2 -> (forall X4:set, (~ set_of_pairs X4) -> TransSet (binrep (Power (Power (Power Empty))) (Power Empty)))) -> (exists X4:set, exactly2 X3))))).
admit.
Qed.

Theorem conj_Random1_TMFFathu6TBSjmpNX4gtNvq7gUX6UzeGuwJ: exists X0 :e binrep (Power (Power (Power (Power Empty)))) Empty, forall X1:set, (~ bij Empty X1 (fun X2:set => X0)) -> (exists X2 :e X1, ((forall X3:set, ((forall X4:set, (~ TransSet X4)) -> (exists X4:set, ((ordinal X4 -> (~ exactly3 X2)) /\ atleast2 X4))) -> (exists X4:set, (~ atleast4 X3)) -> (exists X4:set, ((~ exactly3 X4) /\ ((~ TransSet X2) /\ ((((((~ exactly2 Empty) -> ((atleastp X4 (binrep (Power (Power (Power Empty))) Empty) -> SNo_ (binrep (Power (Power (Power Empty))) Empty) X1) /\ (((((TransSet (SetAdjoin (binrep (Power (Power (Power Empty))) Empty) X2) /\ ((~ atleast5 X4) -> (~ atleast6 X3))) /\ SNoLe (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty) X1) -> (~ atleast6 Empty)) /\ ((ordinal X0 /\ ((~ atleast4 X4) -> (((~ nat_p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty)) -> (~ nat_p Empty)) -> (~ ordinal X3)) -> (((((((atleast2 X3 /\ (~ ordinal X4)) /\ ((((~ ordinal (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)))) /\ (~ TransSet X2)) /\ TransSet X2) /\ ((~ setsum_p X0) -> (~ exactly5 X0)))) -> SNo_ X4 X4) -> (~ PNoEq_ X2 (fun X5:set => exactly2 X4) (fun X5:set => atleast2 Empty))) /\ atleast5 (Power (Power (Power (Power Empty))))) -> (((~ atleast2 X3) /\ (~ exactly2 X3)) /\ (((~ exactly4 X4) -> (~ exactly3 X4)) /\ exactly3 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty)))) /\ TransSet (binrep (Power (Power (Power Empty))) (Power Empty))))) /\ ((~ transitive_i (fun X5:set => fun X6:set => set_of_pairs Empty)) /\ (~ SNo X3)))) -> ((~ atleast3 X0) /\ ((~ ordinal X3) -> atleast6 X4))))) /\ (X3 :e binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty)) /\ (~ atleast4 X3)) -> (~ exactly2 X3)) -> TransSet X4))))) /\ (((forall X3:set, ((forall X4:set, exactly5 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))) /\ (forall X4 :e binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)), exactly3 (proj0 (ordsucc X4))))) /\ (((forall X3:set, (exists X4:set, ((X4 c= X2) /\ partialorder_i (fun X5:set => fun X6:set => ordinal X0))) -> (exists X4:set, ((X4 c= X2) /\ exactly2 (binrep (Power (Power (Power Empty))) Empty)))) /\ (~ ordinal (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty))) /\ (((forall X3:set, (exists X4 :e Power (Power (Power (Power Empty))), (((~ atleast2 X4) /\ ((atleast5 X0 /\ (~ setsum_p X3)) -> (~ set_of_pairs X3))) /\ (per_i (fun X5:set => fun X6:set => exactly5 X3) -> (~ atleast3 X3)))) -> (forall X4:set, ((((~ atleast6 (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty)) -> atleast4 X3 -> (~ exactly2 Empty) -> nat_p X4) -> (~ (X3 c= X2))) /\ exactly5 X3))) /\ (exists X3 :e binrep (Power (binrep (Power (Power Empty)) Empty)) Empty, exists X4:set, ((~ atleast3 (ordsucc X4)) /\ ((~ atleast6 X3) /\ (atleast4 X3 -> (~ nat_p X4)))) -> ((~ SNo X3) -> (((~ set_of_pairs X2) /\ ((ordinal X1 /\ atleast6 X2) /\ ((~ SNoLe X4 X1) -> (~ exactly3 X3)))) /\ (X2 :e Empty))) -> exactly2 X4)) /\ ((exists X3:set, ((X3 c= X2) /\ atleast5 X3)) /\ ((forall X3:set, exactly5 (setexp X3 X0) -> (forall X4 c= X1, atleast3 Empty)) /\ atleast4 (binunion (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty) (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))))))))) /\ (forall X3:set, (exists X4 :e X3, (~ atleast6 X2)) -> ((TransSet (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) -> atleast6 X3 -> (~ (X1 = X2))) /\ (~ exactly3 Empty)))))).
admit.
Qed.

Theorem conj_Random1_TMQMg2kXf9ajAA64RMWejZiByGaq16JZjec: exists X0:set, ((X0 c= binrep (Power (binrep (Power (Power Empty)) Empty)) Empty) /\ (exists X1:set, forall X2:set, (exists X3:set, ((X3 c= X0) /\ (~ setsum_p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty))))) -> (forall X3 c= X1, exists X4 :e X1, ((~ TransSet X3) -> (~ ordinal Empty)) -> eqreln_i (fun X5:set => fun X6:set => exactly5 X5)))).
admit.
Qed.

Theorem conj_Random1_TMT6GyM8a3pd6cjcxix5N31bct2iVwg6AGo: forall X0:set, exists X1 :e X0, forall X2:set, (~ atleast5 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty)) -> (exists X3 :e X2, forall X4 :e binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty, (~ atleast2 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))) -> ((symmetric_i (fun X5:set => fun X6:set => (~ exactly5 (Power (Power (Power (Power Empty)))))) -> (~ SNo_ X4 X4)) /\ ((~ atleast6 (Union X4)) -> (~ symmetric_i (fun X5:set => fun X6:set => (~ atleast2 X4) -> nat_p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty) -> nat_p X0))))).
admit.
Qed.

Theorem conj_Random1_TMc9p14P2JPeE9w1Ut7EY4nunuv6QvgYyiq: forall X0:set, forall X1:set, (((exists X2 :e X1, forall X3:set, (forall X4:set, atleast4 X1) -> (forall X4:set, exactly4 X3)) -> (exists X2:set, (((((exists X3 :e X2, exists X4:set, atleast3 Empty) -> (~ nat_p X2)) -> (X1 :e Empty)) -> (forall X3 :e X2, PNoEq_ X2 (fun X4:set => (~ atleast2 X0) -> (~ atleast4 X4)) (fun X4:set => (~ atleast6 X1)))) /\ set_of_pairs X2))) /\ ordinal X1).
admit.
Qed.

Theorem conj_Random1_TMMzQ9L9zvDmcxKHCRUNmc5E4fikdNpQabt: exists X0:set, ((X0 c= setsum (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))) Empty) /\ (forall X1 c= X0, forall X2 :e X1, forall X3:set, (exists X4:set, ((~ ordinal X0) /\ (atleast3 X0 -> (((~ atleast6 (binrep (Power (Power (Power Empty))) (Power Empty))) -> nat_p X3) /\ (~ setsum_p (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty)))))) -> (exists X4 :e X2, (~ exactly5 X4)))).
admit.
Qed.

Theorem conj_Random1_TMMQ6BwNPr6YbEkiJYpkGnYcrbBM8ZiqS2b: exists X0:set, ((X0 c= binrep (Power (Power (Power Empty))) (Power Empty)) /\ (exists X1 :e Power (binrep (Power (Power Empty)) Empty), ((atleast6 (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty) -> (forall X2 c= binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty, forall X3:set, (exists X4:set, (exactly2 (binunion (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty) X1) /\ (~ atleast5 (Pi X2 (fun X5:set => X5))))) -> (forall X4:set, (~ ordinal X2)))) /\ ((exists X2 :e X1, exists X3:set, ((exists X4:set, ((((~ exactly3 X3) -> (((~ setsum_p X4) /\ set_of_pairs X3) -> (X3 :e X3)) -> (exactly3 Empty /\ exactly5 X2)) -> atleast2 X2) /\ atleast5 X4)) /\ (~ exactly5 X3))) -> (~ setsum_p X0))))).
admit.
Qed.

Theorem conj_Random1_TMSMwB2rQK8zU3VYWzTHVTwfVkQDB6KRUPH: forall X0:set, forall X1 :e Power (Power (Power (Power Empty))), forall X2:set, exactly1of3 ((~ exactly2 X0) -> (~ TransSet (Power (Power (Power (Power Empty)))))) ((forall X3:set, (Empty :e X3) -> (exists X4 :e X0, atleastp X1 (ordsucc X3))) /\ (forall X3:set, ((exists X4 :e X0, ((~ ordinal (Union X4)) /\ equip Empty X3) -> (atleast3 X3 /\ atleast5 X0) -> (exactly5 X4 /\ ((~ atleast4 X3) /\ ((((TransSet (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty) -> (~ SNo X4)) /\ (atleast2 X2 -> ((((reflexive_i (fun X5:set => fun X6:set => (~ (Power (binrep (Power (Power Empty)) Empty) = X0))) -> SNo X3) /\ (~ exactly2 X3)) -> exactly2 X1) /\ ((((~ atleast3 X4) -> atleast3 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty)) /\ (exactly2 X4 /\ (atleast3 X2 -> TransSet (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty)))) /\ ((~ exactly2 X3) /\ exactly4 X4))))) /\ ((~ ordinal X2) /\ (~ atleast3 X3))) /\ (~ atleast4 X2))))) -> setsum_p X2) -> (((forall X4 c= X0, (((~ exactly3 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty)) -> atleast4 X4) /\ exactly2 (Power X2))) /\ (exists X4 :e X3, exactly4 X3)) /\ (forall X4 c= X0, (~ atleast2 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty))))))) (exists X3:set, ((~ (X0 :e X2)) /\ ((((X3 :e Empty) /\ set_of_pairs X2) -> (exists X4 :e proj1 X3, (~ atleast2 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty))) -> (~ atleast6 Empty)) -> (forall X4 :e Empty, (~ TransSet (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty)))))).
admit.
Qed.

Theorem conj_Random1_TMWLU34YkyCYKsjFr2a6ViPZr1Fnb7vyNid: forall X0 c= Union (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty), exists X1:set, ((X1 c= Power (Power (Power (Power Empty)))) /\ (atleast5 X1 -> (~ reflexive_i (fun X2:set => fun X3:set => (forall X4:set, ((SNoElts_ X3 = Empty) /\ (~ exactly2 X4))) -> (exists X4 :e X0, (~ nat_p (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty))))))).
admit.
Qed.

Theorem conj_Random1_TMTw4ZySVFz6L3ptJFjfApKNczeWZVVnPX6: forall X0 :e binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)), forall X1:set, ((forall X2 :e X1, (~ atleast5 X1)) -> atleast4 X1) -> (forall X2 :e X0, exists X3:set, ((X3 c= binrep (Power (binrep (Power (Power Empty)) Empty)) Empty) /\ (exists X4:set, ((X4 c= X2) /\ (atleast6 X3 /\ equip X3 X1))))).
admit.
Qed.

Theorem conj_Random1_TMRt5v89TYM3NEb9rg2LAUDmKB47XoRMovU: forall X0:set, (exists X1:set, ((X1 c= Empty) /\ (exists X2:set, ((X2 c= Empty) /\ reflexive_i (fun X3:set => fun X4:set => (~ atleast5 Empty)))))) -> (forall X1:set, (exists X2:set, ((X2 c= X1) /\ (forall X3:set, (exists X4 :e X1, exactly5 X2 -> exactly5 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty))) -> (exists X4:set, ((Empty :e X4) /\ ((((~ SNoEq_ X4 X4 (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)) /\ ((~ set_of_pairs X3) -> (ordinal (binrep (Power (Power (Power (Power Empty)))) Empty) /\ (~ atleast5 X1)) -> nat_p X4)) /\ ((~ SNo (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty))) /\ (TransSet (Repl X3 (fun X5:set => X5)) -> binop_on X2 (fun X5:set => fun X6:set => binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty) -> exactly3 X4))) /\ (~ stricttotalorder_i (fun X5:set => fun X6:set => atleast3 Empty)))))))) -> (exists X2:set, ((((~ setsum_p (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty)) /\ ((forall X3 c= X2, (exists X4:set, ((~ TransSet X3) /\ (~ set_of_pairs X4))) -> (forall X4 c= X2, ((~ atleast2 X4) /\ exactly5 X4))) -> (exists X3:set, (forall X4:set, SNoLt X3 X4 -> (X1 c= X2)) -> (forall X4 :e X2, exactly5 X4 -> atleast5 X2) -> exactly2 X3 -> (exists X4 :e X3, ((atleast5 (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))) /\ (nat_p X4 -> exactly3 X0)) /\ ((~ set_of_pairs X3) /\ (~ atleast3 (lam2 (Sing X4) (fun X5:set => X4) (fun X5:set => fun X6:set => X5))))))))) /\ ((forall X3 :e proj1 X1, ((exists X4 :e X3, (~ exactly5 X4)) /\ (forall X4:set, set_of_pairs X4))) /\ ((forall X3 c= X1, exists X4:set, ((X4 c= binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty) /\ atleast3 (ordsucc X1))) -> (exists X3 :e X0, exists X4:set, (exactly4 X1 /\ (((~ ordinal X4) -> (X3 :e X3) -> (~ exactly5 X3)) /\ setsum_p (Union Empty))))))) /\ ((exists X3 :e Empty, (exists X4:set, ((~ exactly2 X4) /\ (~ TransSet X3))) -> (exists X4 :e X3, (~ atleast5 X3))) -> (exists X3 :e Power (Inj1 X1), exists X4 :e X2, (~ atleast4 (setsum X2 X4))))))).
admit.
Qed.

Theorem conj_Random1_TMQQ31YUpcVhV3rkqnbTiPz9W1VZYee6M3F: exists X0:set, exists X1:set, ((X1 c= binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) /\ (exists X2:set, ((exists X3:set, ((X3 c= Inj0 X2) /\ (exists X4:set, ((X4 c= X1) /\ (~ atleast2 X4))))) /\ (exists X3:set, ((~ nat_p X2) /\ (exists X4:set, ((X3 c= X4) /\ (~ setsum_p X1)))))))).
admit.
Qed.

Theorem conj_Random1_TMP2f75JQo596LCr2DLo34nSJ3zCmYi8otw: forall X0 :e Empty, exists X1:set, (nat_p X1 /\ (exists X2:set, ((exists X3 :e X0, ((~ set_of_pairs X1) /\ ((exists X4:set, ((X4 c= X2) /\ ((SNoLe X3 X4 -> (~ SNoEq_ X2 X2 X3)) -> stricttotalorder_i (fun X5:set => fun X6:set => ((~ SNo (binrep (Power (Power (Power (Power Empty)))) Empty)) -> (~ atleast6 X5) -> (((~ atleast6 X5) -> ((((((~ exactly5 X6) -> (X5 :e If_i ((~ reflexive_i (fun X7:set => fun X8:set => (~ equip X1 (binrep (Power (Power (Power (Power Empty)))) Empty)) -> atleastp X7 X2 -> (((~ atleast3 X7) -> (~ ordinal X7) -> (((~ atleast3 X7) /\ (~ ordinal X7)) /\ ((~ exactly4 X3) /\ exactly3 X6))) /\ (X7 :e X7)))) -> ((~ atleast5 X6) /\ (~ atleast3 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty)))) X5 X6)) /\ (~ exactly5 X6)) /\ (~ TransSet X5)) /\ (~ atleast2 X5)) -> (((((~ exactly2 X0) /\ atleast6 X6) /\ ordinal X6) -> (~ exactly3 (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty))) /\ (~ atleast2 X0))) -> (~ atleast2 Empty)) -> atleast4 X6) -> (~ per_i (fun X7:set => fun X8:set => ((exactly2 X8 -> (~ exactly5 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))))) /\ ((atleast3 X1 /\ (((~ SNoLe X7 X8) -> (X7 :e X2)) -> exactly5 X8)) -> ((X8 c= binrep (Power (Power (Power Empty))) Empty) /\ (~ atleast3 (ordsucc X7)))))))) -> (~ TransSet (ordsucc X5)))))) -> (exists X4 :e X3, per_i (fun X5:set => fun X6:set => ((~ set_of_pairs X4) /\ (~ atleast2 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty))))))))) /\ ((((((exists X3:set, ((exists X4:set, ((~ atleast5 X4) /\ (~ exactly5 X3))) /\ ((forall X4 c= X3, (~ exactly3 X2)) -> (forall X4:set, atleast3 X4)))) /\ (forall X3 :e Empty, forall X4 c= X2, (~ atleast6 X4))) -> ordinal X0) /\ (forall X3 c= X1, forall X4 c= X1, (((~ exactly3 X3) /\ (exactly4 X2 -> ((~ SNo_ X1 X3) /\ (exactly2 X4 /\ (exactly3 X0 -> (~ exactly3 X0)))))) /\ ((((ordinal X3 /\ ((atleast5 X3 -> (~ exactly3 (binrep (Power (Power (Power Empty))) Empty))) /\ (((((~ exactly2 X1) -> (((~ atleast4 X0) /\ nat_p X0) /\ ((X2 :e binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty) /\ atleast6 X4))) /\ (((~ atleast6 X0) /\ (~ exactly5 Empty)) -> atleast4 X4 -> ((~ atleast4 X3) /\ (((exactly2 X3 -> (~ exactly2 (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty))) -> setsum_p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))) /\ (exactly5 Empty -> (~ TransSet X3)))))) -> atleast2 X4) /\ (~ exactly4 X3)))) -> (((((nat_p X2 -> ((((~ TransSet X4) /\ nat_p X3) /\ (~ SNo X0)) /\ atleast4 X3)) /\ (exactly5 (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty) /\ exactly2 X4)) /\ atleast2 X4) /\ (((ordinal X2 /\ (((~ ordinal X2) -> (~ nat_p X3)) -> ((~ exactly2 X3) /\ (~ atleast5 X4)))) /\ ((((exactly2 X2 /\ exactly2 X4) /\ (~ atleast5 X3)) -> (((~ exactly2 X4) -> ((~ partialorder_i (fun X5:set => fun X6:set => (~ atleast3 X6))) /\ ((~ atleast4 X4) /\ nat_p X4))) /\ (~ SNoLe Empty X3))) /\ (((~ SNo X2) -> ((~ exactly5 X0) /\ (atleast5 X4 /\ nat_p (binrep (binrep (Power (Power (Power (Power Empty)))) Empty) X2)))) /\ ((nat_p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty) -> (~ atleast5 (binrep (Power (Power (Power (Power Empty)))) Empty))) /\ ((nat_p X4 /\ ((((exactly2 X4 -> (~ exactly3 X2)) -> (~ atleast5 (Sing X3))) -> ((~ atleast5 X4) /\ atleast4 (setminus X3 X3)) -> (((~ ordinal X3) /\ (~ exactly4 X4)) /\ nat_p X4)) -> per_i (fun X5:set => fun X6:set => (~ TransSet X6)))) -> reflexive_i (fun X5:set => fun X6:set => (tuple_p X6 X5 -> exactly3 X0 -> ((((((~ SNo X5) -> (~ atleast6 X6)) /\ (~ irreflexive_i (fun X7:set => fun X8:set => (~ SNoEq_ X7 (Union X7) X7)))) /\ (~ ordinal (binunion X3 Empty))) -> reflexive_i (fun X7:set => fun X8:set => (~ atleast6 (Power (Power (Power (Power Empty))))) -> (~ exactly4 X7))) /\ (~ atleast6 X3)) -> (trichotomous_or_i (fun X7:set => fun X8:set => ((~ ordinal X2) /\ (~ atleast4 X1))) /\ (~ PNoEq_ X0 (fun X7:set => reflexive_i (fun X8:set => fun X9:set => (atleast5 (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty) /\ ((atleast6 X8 /\ (exactly2 X8 -> exactly3 X8)) /\ ordinal X2))) -> exactly3 X5 -> (~ atleast2 X1) -> (ordinal X0 /\ ((((~ equip X0 Empty) /\ (~ strictpartialorder_i (fun X8:set => fun X9:set => (SNo X9 /\ (exactly3 X4 -> atleast4 X8))))) /\ exactly5 X2) /\ (~ atleast5 X0)))) (fun X7:set => atleast2 X1 -> atleast2 X7)))) -> ((((exactly3 (proj0 X0) -> ordinal X6) /\ (atleast3 X0 -> ((TransSet (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty) /\ exactly2 X5) -> (~ nat_p X0)) -> (~ setsum_p X5))) -> (~ exactly3 (binrep (Power (Power (Power Empty))) (Power Empty)))) /\ (~ exactly4 X5)))))))) -> atleast4 X3)) /\ exactly2 X4)) -> (partialorder_i (fun X5:set => fun X6:set => (((setsum_p X0 /\ (~ nat_p X4)) -> (~ (X0 :e X5))) -> (~ SNo X6)) -> eqreln_i (fun X7:set => fun X8:set => ((binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)) :e X4) /\ (exactly5 X8 -> exactly4 X7)))) /\ (~ atleast5 X3))) -> ((~ exactly5 X4) /\ (equip (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) (Union X4) /\ (atleast5 X2 -> (~ exactly5 X4)))))) -> (~ atleast5 X4) -> (~ nat_p X4))) /\ (forall X3:set, (forall X4:set, ((((exactly2 X3 -> (exactly2 (V_ X1) /\ ((TransSet X1 -> atleast4 X1) /\ (((exactly2 X3 /\ ((ordinal X4 /\ ((~ atleast2 X2) -> (~ atleast2 X1))) /\ (~ atleast3 X3))) /\ (((exactly2 X4 -> (ordinal X4 /\ (((~ exactly4 X0) /\ (~ atleast3 X3)) /\ ((((~ exactly2 Empty) /\ (~ exactly2 X3)) -> exactly2 X4 -> (~ exactly4 X3) -> exactly4 Empty -> (~ atleast3 X4) -> (~ atleast3 X4) -> (~ ordinal Empty)) /\ ((~ atleast5 X2) -> TransSet X2))))) /\ atleast6 X4) -> (((~ nat_p Empty) -> (exactly3 X2 /\ ordinal X3)) /\ ((reflexive_i (fun X5:set => fun X6:set => (ordinal (Power (Power (Power (Power Empty)))) /\ ordinal X5)) /\ atleast3 X4) /\ atleast5 X3)))) /\ (atleast6 (binrep X3 X2) -> (((atleast2 (binrep (Power (Power (Power Empty))) (Power Empty)) /\ (~ exactly4 X1)) /\ atleast3 X3) /\ (~ exactly3 X3)))))) -> (~ atleast2 X2)) -> ((~ atleast2 X3) /\ (~ exactly4 X4))) -> atleast6 X4) /\ (((~ setsum_p X2) -> nat_p (binrep (Power (Power (Power (Power Empty)))) Empty)) /\ atleast4 X1)) -> (atleast2 X0 /\ (((((~ atleast6 X4) /\ exactly2 (binrep (Power (Power (Power (Power Empty)))) (Power Empty))) -> (~ TransSet X3)) /\ (~ atleast3 X4)) /\ (~ exactly2 Empty)))) -> (~ exactly3 X2))) -> (~ (X1 :e X0)) -> (~ atleast6 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty)))))).
admit.
Qed.

Theorem conj_Random1_TMSwwEs7ccX6EAeDmZfJEY3GouxRR4mvQnm: exists X0:set, ((X0 c= ordsucc (binunion Empty (Power (Power (Power (Power Empty)))))) /\ (exists X1:set, ((X1 c= X0) /\ (forall X2:set, ((exists X3 :e X0, (~ exactly2 X3)) -> atleast2 (binrep (Power (Power (Power Empty))) (Power Empty))) -> (forall X3:set, (~ nat_p (binintersect X2 X3)) -> (exists X4:set, ((atleast6 (Power X4) -> (atleast3 (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) /\ (((atleast5 X3 /\ ((~ nat_p X4) -> ((~ exactly5 (Inj1 X4)) /\ (~ TransSet X3)))) /\ SNoLe (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty) X3) -> exactly3 X4))) /\ (~ ordinal X3)))))))).
admit.
Qed.

Theorem conj_Random1_TMSbXQjWXSWfvzwkBbDuYj13vY1VfSfCwT2: forall X0:set, (forall X1 c= X0, (exactly2 X1 /\ atleast5 X1)) -> (exists X1:set, ((X1 c= binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty) /\ (exists X2:set, (((forall X3:set, (~ atleast5 X1)) /\ (forall X3 c= X1, forall X4 c= X3, (exactly3 X4 /\ (~ atleast3 X4)))) /\ ((forall X3 c= X2, (~ atleast6 Empty) -> ((forall X4:set, (ordinal X3 -> exactly4 (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty)) -> exactly3 X2) /\ (exists X4 :e X3, (~ atleast5 X1)))) -> (forall X3 c= Inj0 (SNoLev X1), exists X4:set, ((X4 c= X3) /\ ((~ atleast4 X0) -> (((((~ (X4 = X3)) -> exactly4 X2) /\ (~ exactly2 X3)) -> TransSet X4) /\ ((X2 :e X0) -> SNo_ X3 Empty)))))))))).
admit.
Qed.

Theorem conj_Random1_TMHW7SUTU3kEdFw1wAngcdJX2nhVN47oy3N: exists X0:set, exists X1:set, ((X1 c= Union X0) /\ (forall X2:set, forall X3 :e X1, ((exists X4 :e X0, (~ atleast5 X3)) /\ ((exists X4:set, (atleast6 X2 /\ (atleast3 (binrep (Power (Power (Power (Power Empty)))) Empty) /\ ((~ (Power (Power (Power (Power Empty))) :e V_ X4)) -> exactly2 (If_i (~ atleast5 (Power (binrep (Power (Power Empty)) Empty))) Empty X2))))) -> (exists X4 :e X0, (~ atleast6 X3)))))).
admit.
Qed.

Theorem conj_Random1_TMNv5cR4Xcoa372nHbRRzPszdMmozbei54M: forall X0:set, (forall X1:set, (exists X2:set, ((X2 c= X1) /\ ((exists X3:set, ((X3 c= X0) /\ (forall X4 :e X1, (~ exactly4 (binrep (Power (Power (Power Empty))) Empty)) -> (~ SNo X2)))) -> ((~ atleast5 X2) /\ (~ ordinal X0))))) -> (forall X2:set, ((forall X3 c= X2, atleast5 X1) /\ (((~ atleast5 X2) /\ (forall X3 c= X2, ((exists X4 :e X2, (atleast4 (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) /\ (~ atleast3 X4))) /\ (forall X4:set, ((((atleast5 X2 /\ ((~ atleast3 X2) /\ ((~ exactly4 X1) -> (~ PNoEq_ X2 (fun X5:set => (nat_p X5 /\ (~ exactly5 Empty))) (fun X5:set => (~ exactly5 X5))) -> ((~ atleast2 X2) -> (~ ordinal X2)) -> (((~ exactly5 X2) -> ((((TransSet X0 -> (~ exactly2 X0)) /\ ((~ (X3 :e mul_nat X4 Empty)) /\ ((atleast2 X2 -> ((nat_p X4 /\ (X4 c= X3)) -> nat_p X3) -> ((exactly2 X1 -> atleastp (Power (binrep (Power (Power Empty)) Empty)) X3) /\ (~ nat_p X3))) -> (exactly5 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty) -> (~ exactly4 X4) -> (~ exactly5 Empty)) -> (~ nat_p (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)) -> nat_p X3 -> ordinal X2))) /\ (~ exactly4 X4)) -> TransSet X4 -> PNoEq_ X4 (fun X5:set => ((atleast3 (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty) -> (~ atleastp (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) X2)) /\ (~ TransSet X5))) (fun X5:set => (~ atleast2 Empty))) -> setsum_p X4) /\ (~ (X1 c= X3)))))) /\ (~ exactly4 X4)) /\ (~ nat_p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)))) -> atleast4 X3) -> ((((~ atleast3 (ordsucc X3)) -> atleast6 X4) -> (~ atleast6 X4)) /\ (~ nat_p X3)))))) -> (forall X3 :e X2, exists X4 :e X0, (~ exactly2 X1)))) -> (~ TransSet (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty))))) -> (exists X1:set, forall X2 :e X1, SNo X1 -> (exists X3 :e binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty, (~ atleast6 X2)) -> exactly5 X1).
admit.
Qed.

Theorem conj_Random1_TMXbEUsHrqbPdoSthmj312T2Uh6f8U1M7Dy: exists X0 :e Power (Power (Power (Power Empty))), exists X1:set, ((X1 c= Power (Power (Power (Power Empty)))) /\ ((atleast3 X1 /\ ((forall X2 :e X1, (exists X3:set, ((X3 c= binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))) /\ (exists X4:set, exactly4 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty)))) -> (exists X3:set, (forall X4:set, (~ exactly2 X2) -> (~ atleast3 X2)) -> ((forall X4 c= X2, atleast6 X3) /\ (forall X4 :e X3, PNoEq_ X3 (fun X5:set => (~ exactly4 X3)) (fun X5:set => (((~ TransSet X2) -> nat_p (Union X5)) /\ ((~ exactly5 X4) -> ((X3 :e X3) /\ (exactly3 X5 /\ ((((atleast6 X5 -> exactly5 (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty) -> (setminus X2 X0 c= X5)) /\ (~ exactly5 X0)) -> (~ SNo (binrep (Power (Power (Power Empty))) Empty))) /\ SNoLe X4 X2))) -> (~ atleast5 X1)))))))) -> (forall X2:set, (~ ordinal (Union X1)) -> ((exists X3:set, ((X3 c= X0) /\ set_of_pairs X0)) /\ exactly3 X1) -> ((exists X3:set, ((X3 c= binrep (Power (Power (Power (Power Empty)))) (Power Empty)) /\ (forall X4 c= Power X3, PNoLt X4 (fun X5:set => nat_p X4) X1 (fun X5:set => exactly4 X4)))) /\ (forall X3:set, exactly5 X0 -> (X2 :e X2)))))) /\ (forall X2:set, forall X3:set, atleast5 X3 -> (~ atleast5 X3)))).
admit.
Qed.

Theorem conj_Random1_TMFaJhARRpLNaaPtQ4SMpcKYcBZwNaLzfdJ: forall X0:set, (exists X1:set, ((forall X2:set, exists X3:set, exists X4:set, ((X4 c= X3) /\ (~ atleast5 X1))) /\ (exists X2:set, ((X2 c= X1) /\ set_of_pairs X1)))) -> (forall X1 :e binrep Empty (Inj1 Empty), (~ reflexive_i (fun X2:set => fun X3:set => exactly4 X0 -> ((forall X4 c= X2, (~ atleast4 X2)) /\ (forall X4 c= X1, ordinal X2))))).
admit.
Qed.

Theorem conj_Random1_TMPbPpvu3p8PKv4e9Wfxn6APE8iFiSuYgqT: exists X0 :e Empty, exists X1:set, ((X1 c= Empty) /\ (TransSet (lam2 X0 (fun X2:set => X0) (fun X2:set => fun X3:set => X2)) /\ ((exists X2 :e binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty, (exists X3 :e X0, forall X4:set, (symmetric_i (fun X5:set => fun X6:set => exactly2 X5) /\ (exactly2 X0 /\ ((~ atleast5 X2) /\ nat_p X4))) -> ((~ exactly4 X4) /\ (~ atleast6 X2)) -> (~ atleast2 X2) -> (~ TransSet X4)) -> (forall X3:set, exactly5 X3) -> (exists X3:set, (((exists X4:set, SNo_ X4 X4) /\ (~ exactly2 (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty))) /\ (forall X4:set, atleast6 X2)))) /\ (exists X2:set, ((X2 c= X0) /\ (exists X3 :e X2, exists X4:set, (((atleast3 X0 -> TransSet X3) /\ (~ atleast4 X4)) /\ ((~ TransSet X3) -> (~ SNo X3))))))))).
admit.
Qed.

Theorem conj_Random1_TMH1ezGw54iKSSVrWBi1zf5fwURTBZ6KBoJ: forall X0 :e binrep (Power (Power (Power Empty))) Empty, forall X1:set, (forall X2 :e binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty, (X1 :e X2)) -> (forall X2 c= X1, forall X3 :e PSNo X1 (fun X4:set => forall X5:set, (~ atleast6 X5) -> (~ atleast6 X4)), exists X4:set, ((X4 c= X2) /\ ((exactly2 X3 /\ (X1 :e X2)) /\ ((~ atleast5 (binrep (Power (Power (Power Empty))) (Power Empty))) -> (~ reflexive_i (fun X5:set => fun X6:set => ((exactly2 X6 /\ (~ atleast6 X5)) /\ ((~ (X2 :e X6)) -> atleast6 X0)))) -> (((atleast4 (ordsucc X3) /\ (exactly2 (Union (binrep (Power (Power (Power (Power Empty)))) Empty)) /\ (atleast5 X4 -> (X4 :e X4)))) -> (~ ordinal X3)) /\ (~ exactly5 X3)) -> (ordinal X0 /\ (X1 :e X1)))))) -> (forall X2:set, (exists X3 :e proj1 X2, forall X4:set, (~ atleast6 (binrep (Power (Power (Power Empty))) Empty)) -> atleast2 X4) -> atleast5 X2).
admit.
Qed.

Theorem conj_Random1_TMVqikVszYaBDyCxvbbXjFeeQfVEwEYKqay: forall X0:set, (forall X1 c= setsum X0 X0, forall X2 c= X0, exists X3:set, exists X4:set, ((((ordinal X4 -> (~ setsum_p X4)) -> ((~ reflexive_i (fun X5:set => fun X6:set => ((~ atleast6 X6) /\ (exactly5 X6 -> (~ atleast6 X6))))) /\ (~ atleast4 X4))) /\ (~ ordinal X3)) /\ (~ ordinal X4))) -> (exists X1:set, ((X1 c= binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty) /\ (forall X2:set, (~ SNoLt Empty X1)))).
admit.
Qed.

Theorem conj_Random1_TMcrkeKGcN5jGcbstFaBW57AQ1Mu5MiF9CF: exists X0:set, ((exists X1:set, ((forall X2:set, (forall X3 c= X0, atleast4 X2) -> (exists X3 :e X2, exists X4:set, TransSet X2)) /\ (exists X2:set, forall X3:set, atleast3 X2 -> (forall X4 :e X2, exactly4 X4 -> (((~ exactly5 X2) /\ (~ atleast6 (Inj0 X0))) /\ (~ ordinal (binunion X4 X3))))))) /\ (forall X1 :e X0, exists X2:set, ((X2 c= X1) /\ (forall X3 :e X2, (~ atleast2 X2))))).
admit.
Qed.

Theorem conj_Random1_TMXayNheREmDBVA6uHfRp2fc6nQ3PpqVQzy: exists X0:set, forall X1:set, ((exists X2:set, ((~ atleast5 X1) /\ (exists X3:set, ((X3 c= X0) /\ (((forall X4:set, exactly5 X4) /\ (exists X4 :e binrep (Power (binrep (Power (Power Empty)) Empty)) Empty, ((exactly5 X2 /\ TransSet X4) /\ ((~ atleast6 X0) /\ (~ nat_p X3))))) /\ (forall X4 c= Empty, ((((((atleast4 Empty -> (((atleast2 X0 /\ ((((((exactly3 X1 /\ atleast2 (add_nat X2 X3)) /\ atleast5 X3) -> atleast3 X3) /\ (~ atleast2 (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty))) /\ (~ nat_p X3)) /\ exactly2 X4)) -> (~ TransSet Empty)) /\ (~ nat_p (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)))) /\ (nat_p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty) /\ (~ tuple_p X4 X2))) /\ ((atleast6 X3 -> atleast2 X4) -> (~ atleast4 (binrep (Power (Power (Power (Power Empty)))) (Power Empty))) -> atleast3 X4)) -> (~ exactly4 X4)) /\ ((X4 :e X3) -> (~ atleast5 (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty)))) /\ (~ atleastp (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) X2)))))))) -> (~ ordinal X0)) -> (~ exactly4 X0) -> (exists X2 :e X0, (~ exactly2 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))))).
admit.
Qed.

Theorem conj_Random1_TMSNrz5g75rW7opNZWF8pDb38nziKAZXs3T: exists X0:set, ((X0 c= binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty) /\ (forall X1:set, ((exists X2:set, (equip X2 X0 /\ (exists X3:set, exists X4:set, ((X0 = X2) /\ ((~ atleast6 X2) -> (atleast4 X1 /\ (~ exactly2 X2))))))) /\ (~ set_of_pairs X0)) -> ((~ symmetric_i (fun X2:set => fun X3:set => forall X4:set, (((atleast5 X2 -> (ordinal X0 /\ exactly2 X0)) -> (~ atleast2 X3)) /\ (~ atleast2 (Inj1 X0))) -> (~ setsum_p X4))) /\ (forall X2 :e X0, forall X3 c= X1, forall X4 c= X3, TransSet X3)))).
admit.
Qed.

Theorem conj_Random1_TMSoQEKHfLREbFdTJbTzLVSGdb85qE4D5n9: forall X0:set, (forall X1:set, (forall X2 :e X0, forall X3:set, exists X4:set, ((X4 c= binrep X3 X2) /\ (((atleast5 X0 /\ ((~ setsum_p X2) -> (~ exactly5 X0))) /\ exactly2 (binrep (Power (Power (Power Empty))) Empty)) /\ (~ exactly5 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)))))) -> (forall X2:set, (exists X3:set, ((X3 c= X0) /\ (exists X4:set, ((((~ reflexive_i (fun X5:set => fun X6:set => (SNoLe X6 X6 /\ (atleast6 X0 -> (atleast2 (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty) /\ (((((((atleast6 Empty /\ ((SNo_ (Inj1 X6) Empty /\ (~ exactly2 X1)) -> ((atleast2 X4 -> (~ atleast2 (ordsucc X0)) -> (~ nat_p (ap X5 X6))) -> ((((((~ atleast2 (Power (Power (Power (Power Empty))))) -> (~ exactly3 X5)) /\ (((((~ exactly2 (Power (binrep (Power (Power Empty)) Empty))) /\ ((~ nat_p X5) /\ ((((((~ SNoLt X0 X1) -> (ordinal X6 /\ ((~ ordinal X5) -> setsum_p X0)) -> ((((~ atleast2 X2) -> (~ atleast3 X0)) /\ (((((~ TransSet X6) /\ (((atleast2 X6 -> (~ atleast3 X1)) /\ ((~ setsum_p Empty) -> (~ (X5 :e X6)))) -> (~ reflexive_i (fun X7:set => fun X8:set => (~ (X2 c= X8)))))) -> (~ ordinal (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty))) -> (((((~ PNoLe X0 (fun X7:set => (~ exactly5 X3) -> exactly3 X0) X5 (fun X7:set => ((atleast3 X6 /\ (~ nat_p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty))) /\ atleast4 X6))) -> (TransSet (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) -> ((~ atleast4 X6) /\ (~ (binrep (Power (Power (Power Empty))) (Power Empty) :e X2)))) -> (tuple_p X6 X0 -> (~ atleast5 X2)) -> set_of_pairs (binrep (Power (Power (Power (Power Empty)))) Empty)) -> (~ atleast2 X0)) -> (exactly2 X2 /\ ((((stricttotalorder_i (fun X7:set => fun X8:set => (~ atleast4 X5)) -> (~ atleast4 X6)) /\ (TransSet (Inj0 X5) -> (X3 :e X2))) -> set_of_pairs X5) -> atleast5 X5))) /\ (((exactly4 X3 -> ((~ atleast2 (binrep (Power (Power (Power (Power Empty)))) (Power Empty))) /\ (~ (X3 :e X2))) -> TransSet (V_ X5)) -> atleast2 X5) -> ((~ atleast4 X6) /\ atleast6 X2)))) -> ((~ SNoLt X3 X6) /\ ((~ bij X6 X6 (fun X7:set => Empty)) /\ (~ (Sing X6 c= X5)))))) /\ ((~ (X5 c= X4)) /\ (~ atleast4 X0)))) /\ ((~ set_of_pairs X6) /\ ((atleast2 X0 /\ TransSet X0) /\ nat_p X5))) -> (SNo X6 /\ (((~ ordinal X6) /\ ordinal X2) -> (~ atleast3 X6) -> ((~ exactly2 X3) /\ (((~ TransSet X2) -> (~ exactly3 X5) -> (~ exactly5 X4)) /\ ((~ atleast5 X6) -> atleast2 X6))) -> (~ atleast3 X6)))) -> (((~ exactly5 X6) -> (~ atleast3 X5)) /\ (~ atleast5 X5))) -> (((((~ atleast6 X5) -> (((~ setsum_p X5) /\ ((~ atleast4 Empty) /\ (~ atleast5 X6))) /\ reflexive_i (fun X7:set => fun X8:set => ((exactly4 X1 /\ ((TransSet X8 /\ atleast4 (Sep (Inj1 X1) (fun X9:set => exactly2 X9))) /\ tuple_p Empty X8)) /\ (((~ exactly4 X3) /\ (~ atleast6 X7)) /\ ((~ atleast5 (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty)) -> atleast5 X0 -> set_of_pairs X8 -> (SNo (Sing X8) /\ ((atleast5 X2 -> atleast4 X7) /\ (~ (X6 :e X8))))))) -> (~ atleast4 X8)))) /\ TransSet (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)))) /\ (~ exactly4 (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty))) /\ (((exactly2 X5 /\ ((~ ordinal Empty) -> (set_of_pairs X0 /\ ((~ atleast4 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))) -> ((((~ PNoLe (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) (fun X7:set => setsum_p X6) X6 (fun X7:set => ((~ setsum_p X7) /\ SNo X5))) /\ (~ atleast4 X5)) /\ ((atleast2 X4 -> (exactly4 X6 /\ SNo X0)) -> (~ TransSet (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty)))) -> (((~ atleast3 X5) /\ atleast5 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))) /\ ((~ reflexive_i (fun X7:set => fun X8:set => atleast4 X3)) /\ nat_p X5))) -> (~ (X0 :e X5)))))) -> exactly5 (Union Empty)) -> (~ exactly4 X3)))))) /\ (~ atleast2 X5)) -> atleast3 X0) -> ((~ exactly4 X6) /\ SNo X6))) -> (~ exactly3 X5)) /\ (~ TransSet X6)) /\ (~ ordinal X0))) -> ((~ set_of_pairs Empty) /\ (exactly2 X4 -> exactly3 X5)))) /\ (~ SNo X6)) -> atleast5 X6 -> SNo (Power X6) -> ((~ setsum_p X5) /\ ((atleast5 X5 -> (exactly4 X5 /\ (((~ exactly2 X6) -> (((((((~ exactly3 X4) -> exactly3 X5) -> (((atleast3 X5 /\ ((~ nat_p X5) /\ (~ SNo X6))) /\ (~ ordinal X5)) /\ atleast5 X5)) -> exactly5 X1 -> (~ set_of_pairs X5)) /\ (((exactly2 X0 /\ (atleast2 X0 /\ ((exactly4 (Power X6) /\ (((((atleast6 X5 -> (TransSet X6 /\ ((~ exactly2 (Unj X5)) /\ (~ SNo_ (Power (Power (Power (Power Empty)))) Empty)))) -> (~ atleast4 (binrep (Power (Power (Power (Power Empty)))) (Power Empty)))) /\ (~ TransSet (UPair X3 (Power (binrep (Power (Power Empty)) Empty))))) -> equip X5 X6) /\ (((exactly3 X5 -> (~ atleast3 (ordsucc X6))) /\ (~ exactly2 (binrep (Power (Power (Power (Power Empty)))) Empty))) /\ (((atleast3 X6 -> (~ atleast6 X6)) -> atleast6 X5) -> (((~ atleast6 (ordsucc X5)) -> ordinal X5) /\ (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty :e X0)))))) /\ (~ exactly2 (binrep (Power (Power (Power Empty))) Empty))))) /\ (~ atleast4 X1)) /\ ordinal X5)) /\ (~ exactly5 X5)) -> set_of_pairs X6) -> (((atleast6 X0 /\ ((atleastp X0 X4 -> (atleast5 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty) /\ ((~ exactly4 X5) -> (((atleast4 X6 -> setsum_p X5) -> ((~ atleastp X5 X5) /\ (atleast3 (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) -> atleast4 X6))) /\ (~ ordinal (Inj0 X5)))))) -> (~ atleast5 X5))) /\ (~ exactly2 (V_ X1))) /\ ((~ ordinal X6) /\ (((((((~ atleast6 X6) -> (nat_p X3 /\ (reflexive_i (fun X7:set => fun X8:set => atleast5 X7) /\ (((~ nat_p X0) /\ exactly4 X5) -> ordinal (proj0 X6))))) /\ (((~ (X0 = X4)) -> nat_p X6) /\ atleast3 X5)) -> (SNo_ X6 X0 /\ (~ atleast6 X5)) -> (exactly4 X6 /\ ((~ atleast3 X0) -> (X6 c= Sing X0))) -> (~ exactly5 X5)) /\ (X1 = X6)) -> ((((~ ordinal X6) /\ ((exactly2 X0 /\ (irreflexive_i (fun X7:set => fun X8:set => (~ atleast4 X0)) /\ ((~ exactly2 X3) /\ ((~ atleast6 (mul_nat X6 X1)) /\ atleast5 X2)))) /\ ((exactly2 Empty /\ (((((exactly2 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) -> (~ equip X6 (Power X5))) /\ (((~ atleast4 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))) /\ SNo X5) /\ SNo (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty))) -> (exactly4 X6 /\ atleast4 (Power (binrep (Power (Power Empty)) Empty))) -> (~ exactly3 X5)) -> TransSet X6) -> (~ exactly4 X0))) /\ exactly2 X6))) /\ (~ exactly5 (lam X5 (fun X7:set => X6)))) /\ ((~ atleast5 X6) /\ (((~ ordinal X5) -> (ordinal X0 /\ (~ atleast6 X0))) -> (((atleast5 X0 -> (~ atleast2 Empty)) -> exactly1of2 ((exactly2 X1 /\ (~ exactly4 X6)) -> atleast3 X5) (~ TransSet X2)) /\ atleast6 X0))))) /\ nat_p X0)))) /\ ((~ atleast6 (binrep (Power (Power (Power Empty))) Empty)) -> ((((((~ SNoEq_ X6 X2 X2) /\ ((atleast4 X6 /\ (TransSet X5 -> (stricttotalorder_i (fun X7:set => fun X8:set => (((((~ atleastp X7 X8) /\ exactly3 X8) -> nat_p Empty) -> (~ ordinal (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)))) -> (ordinal (lam (SetAdjoin X8 X7) (fun X9:set => binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)))) -> ((((~ exactly2 X2) /\ ((SNo X6 -> atleast4 X8) -> TransSet X8)) /\ (atleast2 X7 /\ (~ exactly4 Empty))) /\ (~ (X7 :e X7)))) -> atleast4 (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)) /\ (atleast3 X2 /\ (~ atleast4 (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty))))) /\ (~ atleast5 X6)))) /\ (~ atleast2 Empty))) /\ (PNoEq_ X0 (fun X7:set => TransSet (binrep (Power (Power (Power Empty))) Empty) -> (~ atleast5 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty))) (fun X7:set => ((setsum_p X7 /\ exactly3 X6) /\ exactly4 X6)) -> (~ ordinal X6))) -> atleast4 X6) /\ PNo_downc (fun X7:set => fun X8:set -> prop => (X8 Empty /\ (~ TransSet X7)) -> TransSet (Sing X0)) X6 (fun X7:set => ((~ SNo (SNoElts_ X4)) -> (~ SNo X7)) -> (~ nat_p X2) -> (Power (Power (Power (Power Empty))) :e X6))) /\ (~ exactly4 X0)) -> ((((~ ordinal X5) -> (atleast5 X0 /\ ((~ SNo X5) -> (~ exactly3 X4)))) /\ exactly4 X5) /\ (equip X6 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty) -> atleast5 X6)) -> (((((~ ordinal X5) -> (~ (X5 :e X5))) -> ((~ atleast6 X0) /\ (((exactly3 X5 /\ (((~ TransSet X6) -> exactly2 Empty) -> reflexive_i (fun X7:set => fun X8:set => (X7 :e binrep (Power (Power (Power Empty))) Empty)))) -> (~ exactly3 X2)) -> (~ exactly5 X6)))) /\ (exactly5 (Inj0 X5) -> atleast3 X1)) /\ atleast5 X5))))) -> ((((~ exactly5 X5) -> (~ exactly5 X0)) -> (~ atleast6 X5)) /\ (PNoLe X2 (fun X7:set => ordinal X3) (binintersect X6 X6) (fun X7:set => (~ exactly2 X3)) -> ((((X0 c= X5) /\ exactly5 (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)))) /\ (~ atleast2 X0)) /\ ((~ SNo (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty)) -> eqreln_i (fun X7:set => fun X8:set => ((((exactly5 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty) -> ((~ exactly3 X6) /\ (~ exactly4 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty)))) -> exactly5 X8) -> ordinal X5) /\ ((~ TransSet X1) /\ (((~ trichotomous_or_i (fun X9:set => fun X10:set => exactly3 X10)) /\ exactly3 (V_ (binrep (Power (Power (Power (Power Empty)))) Empty))) -> (~ exactly5 X7))))))))) -> exactly2 X3))) -> (exactly2 Empty /\ set_of_pairs X0)) /\ (((set_of_pairs X5 -> set_of_pairs (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty)) -> nat_p X0) /\ ((~ exactly2 X6) -> (~ exactly4 X5)))) -> (~ exactly5 X6)) /\ (~ nat_p X5))))) -> (~ exactly3 X3))) -> (~ (X2 c= proj1 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty)))) /\ ((atleast3 X0 -> ((((~ atleast4 (Sing X2)) /\ (~ equip X3 X1)) /\ (~ exactly4 X1)) /\ ((((~ atleast3 X3) -> (atleast5 X0 /\ ((atleast4 X2 /\ atleast5 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))) /\ ((((~ setsum_p X3) /\ (~ set_of_pairs (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)))) /\ irreflexive_i (fun X5:set => fun X6:set => PNoLt_ X6 (fun X7:set => (~ atleast2 (proj1 (Power (binrep (Power (Power Empty)) Empty))))) (fun X7:set => atleast5 X6) -> (~ set_of_pairs X6))) /\ set_of_pairs X3)))) /\ exactly2 X2) -> atleast5 X2))) -> ((~ TransSet X3) /\ (((~ linear_i (fun X5:set => fun X6:set => atleast6 (binrep (Power (Power (Power Empty))) Empty))) -> TransSet (UPair X4 X4)) /\ exactly5 X2)))) /\ TransSet X3)))) -> (forall X3 c= Empty, forall X4:set, (~ exactly4 Empty)))) -> (exists X1 :e binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty, ((exists X2:set, ((forall X3 :e X1, (~ exactly4 X2)) /\ (exactly2 X0 /\ (~ exactly4 X1)))) /\ (exists X2:set, forall X3:set, nat_p Empty))).
admit.
Qed.

Theorem conj_Random1_TMTZ9eR4pdP1UxeqzQqfN5yv5dXubCdpFRM: forall X0 c= Empty, exists X1 :e Empty, exists X2:set, (exists X3:set, (exactly3 X1 /\ (forall X4:set, (reflexive_i (fun X5:set => fun X6:set => (~ atleast2 X5)) /\ (TransSet X3 -> (((~ atleast3 X0) /\ (exactly2 X4 -> SNo (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))))) /\ (atleast4 X3 /\ (~ atleast4 X4)))))))) -> (~ atleast2 X0).
admit.
Qed.

Theorem conj_Random1_TMUUNhEw7Uc26GmeMxvD242MWWKvRHRBHdD: forall X0:set, (forall X1:set, (exists X2:set, forall X3:set, exists X4:set, ((X4 c= X2) /\ nat_p X3)) -> (exists X2:set, ((X2 c= binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) /\ (exists X3:set, exists X4 :e Inj1 X0, (~ atleast3 X4) -> (~ ordinal X3))))) -> (exists X1:set, ((exists X2:set, (~ TransSet X2)) /\ (exists X2:set, ((X2 c= X1) /\ (exists X3:set, ((X3 c= Unj X2) /\ (~ inj X2 X2 (fun X4:set => X2)))))))).
admit.
Qed.

Theorem conj_Random1_TMYubzBzy5KXVSJKUQf5yopMoVFR7FrjcEm: exists X0:set, ((X0 c= binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty) /\ (forall X1 :e X0, exists X2 :e Empty, forall X3:set, exists X4:set, (((reflexive_i (fun X5:set => fun X6:set => (~ atleastp (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty) X0)) -> setsum_p (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)))) -> SNo_ X3 X3 -> (X0 :e binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty))) /\ atleast5 X4))).
admit.
Qed.

Theorem conj_Random1_TMcivZb9qdF25uDhjB6cai2xKzSHyK1BKAf: forall X0:set, exists X1:set, ((forall X2 :e Union (Power (Power (Power (Power Empty)))), (~ exactly3 X2)) /\ (forall X2:set, (exists X3:set, ((forall X4:set, ((~ binop_on (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) (fun X5:set => fun X6:set => X0)) /\ ((setsum_p X4 -> (X2 = Empty)) /\ set_of_pairs X0))) /\ (exists X4:set, (~ exactly4 X3)))) -> (forall X3 c= X1, exists X4:set, ((~ (Power X4 :e binrep (Power (Power (Power Empty))) Empty)) /\ (((~ SNo_ X3 (PSNo (Power (binrep (Power (Power Empty)) Empty)) (fun X5:set => (~ exactly5 X5)))) /\ SNoLt X4 Empty) /\ ((~ nat_p X3) /\ atleast5 X4)))) -> (~ exactly2 X1))).
admit.
Qed.

Theorem conj_Random1_TMLFPXLU1Az5hWtcj7qSWu8Yp7JcnkNfmUN: exists X0 :e binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)), exists X1:set, ((forall X2:set, ((forall X3:set, forall X4:set, setsum_p X3) -> exactly3 X2) -> (exists X3:set, ((exists X4:set, (atleast2 X3 -> ((~ (X4 :e X4)) /\ ((ordinal X4 -> (~ exactly3 X3)) -> ((~ SNo X3) /\ (~ exactly2 X3)))) -> (~ exactly3 X2)) -> (X4 :e X4)) -> reflexive_i (fun X4:set => fun X5:set => atleast5 X3 -> ((~ (Inj0 X0 :e X5)) /\ ((~ atleast5 X2) /\ (((((X0 :e X5) /\ (((~ exactly4 X5) /\ (~ TransSet X5)) /\ (atleast2 X4 /\ (exactly4 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty) /\ (((~ ordinal (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty)) -> (~ exactly4 X4)) /\ exactly5 X4))))) /\ ((exactly3 X4 /\ (exactly5 X5 /\ atleast5 X4)) -> (~ exactly2 X5))) /\ (setsum_p X4 -> ((((~ setsum_p X0) -> (SNo_ Empty Empty /\ (((SNo X5 /\ (((~ atleast3 X0) -> atleast2 X4) /\ exactly4 X0)) -> (~ atleast4 (Power (Power (Power (Power Empty)))))) /\ (~ reflexive_i (fun X6:set => fun X7:set => ((~ TransSet X6) /\ SNoLe X0 X7)))))) /\ exactly5 X4) /\ (TransSet X3 /\ (exactly3 X4 /\ ((~ atleast4 X1) /\ (atleastp X5 X4 /\ (~ SNo (Union X4))))))))) -> atleast2 (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty)))))) -> (forall X4 c= ordsucc (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty), ordinal X1))) /\ (~ exactly3 X1)).
admit.
Qed.

Theorem conj_Random1_TMQaVHp5UysP9Kb7wPrW64VW8DhbUQfW76G: exists X0 :e Empty, forall X1:set, (exists X2:set, ((X2 c= binrep X1 X0) /\ (exists X3 :e X1, (((forall X4:set, setsum_p X3) /\ (exists X4:set, ((X4 c= X0) /\ exactly5 X4))) /\ (((~ atleast6 (Inj0 X2)) /\ atleast3 (add_nat X3 X3)) /\ PNoEq_ X2 (fun X4:set => (~ exactly3 X3)) (fun X4:set => (((TransSet X0 -> (SNoLe (binrep (Power (Power (Power (Power Empty)))) Empty) X4 /\ (ordinal Empty /\ set_of_pairs (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)))))) /\ tuple_p (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty) X0) -> exactly5 X3) -> setsum_p X4)))))) -> (exists X2:set, (~ atleast4 X2)).
admit.
Qed.

Theorem conj_Random1_TMWkY6dRsoLhTt5fQbEeH7aAsJdmrM8k9cY: exists X0:set, exists X1:set, ((exists X2:set, ((X2 c= Empty) /\ ((forall X3 :e X1, forall X4:set, (((~ atleast6 X4) /\ TransSet X4) /\ ((~ atleast3 X4) -> (~ setsum_p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty))))) /\ (exists X3:set, ((forall X4:set, ((((~ nat_p X3) -> setsum_p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty) -> ((~ (X4 :e binunion X2 X3)) /\ (atleast6 X4 /\ (~ atleast3 X2)))) /\ ((~ set_of_pairs X1) /\ ((~ (Empty :e X3)) /\ strictpartialorder_i (fun X5:set => fun X6:set => exactly4 X6)))) /\ (~ atleast2 X3))) /\ exactly5 (binrep (Power (Power (Power Empty))) (Power Empty))))))) /\ SNo X0).
admit.
Qed.

Theorem conj_Random1_TMVxpDGAsUSPS8moMMSmXJ9m9BdSBLwWuqp: exists X0 :e Empty, forall X1:set, (reflexive_i (fun X2:set => fun X3:set => exists X4 :e X1, atleast2 X4 -> tuple_p X3 X4) -> (forall X2 c= X1, SNo (setexp X0 X2))) -> (exists X2:set, ordinal X2).
admit.
Qed.

Theorem conj_Random1_TMT451y3yTGWfK6ukqE1VeKDywp5dU5iiQv: exists X0 :e binrep (Power (Power (Power (Power Empty)))) Empty, exists X1:set, ((X1 c= X0) /\ (exists X2:set, ((forall X3 :e X0, atleast6 X2) /\ (((exists X3:set, ((X3 c= X2) /\ (forall X4 :e binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)), PNoEq_ X3 (fun X5:set => ((~ atleast5 X5) /\ (~ TransSet X4))) (fun X5:set => (exactly5 X4 /\ exactly3 X2))))) -> (~ exactly3 X0)) /\ (exists X3:set, exactly5 Empty))))).
admit.
Qed.

Theorem conj_Random1_TMTZG17v1bXE28L1Gk2EqTXonhFst9ZLh4w: forall X0 c= Empty, exists X1:set, ((exists X2:set, ((X2 c= X1) /\ ((forall X3:set, (~ reflexive_i (fun X4:set => fun X5:set => (~ reflexive_i (fun X6:set => fun X7:set => (~ ordinal X0)))))) -> (((~ setsum_p X1) /\ ((exists X3:set, exists X4:set, ((X4 c= X1) /\ (~ atleast3 X0))) /\ ((exists X3:set, (((exists X4:set, ((~ SNoLt X2 X0) -> SNo X3) -> atleast5 X4) -> (forall X4 :e binrep (Power (Power (Power Empty))) (Power Empty), exactly4 X4)) /\ (~ atleast2 X3))) -> atleast2 (ordsucc X2)))) /\ (atleast3 X1 /\ (forall X3 c= binrep (Power (binrep (Power (Power Empty)) Empty)) Empty, SNoLt X3 X3))) -> (exists X3 :e X1, ((forall X4 :e V_ X2, (~ atleast5 (binrep (Power (Power (Power Empty))) Empty))) /\ ((~ nat_p (V_ X1)) /\ (forall X4 c= X0, (inj X3 X3 (fun X5:set => binrep (Power (Power (Power (Power Empty)))) Empty) /\ (~ atleast3 X3))))))))) /\ (exactly2 X1 -> (exists X2:set, forall X3 c= X1, atleast5 (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty)))).
admit.
Qed.

Theorem conj_Random1_TMSJRsr4CoZkng6idgTxXo2gYf2rLWG1YJk: exists X0:set, ((X0 c= binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty) /\ (forall X1:set, exists X2 :e X0, exists X3:set, ((X3 c= X2) /\ ((forall X4 c= Empty, (~ SNo X1) -> atleast4 X2) /\ (forall X4:set, (~ exactly2 X2) -> (((~ atleast5 X4) /\ (atleast6 X3 /\ (((SNo X4 -> (((SNo X1 /\ (SNo X3 -> atleast6 X4)) /\ atleast4 X4) /\ (~ set_of_pairs X1))) /\ (~ atleast6 (Power (binrep (Power (Power Empty)) Empty)))) -> (atleast2 X1 /\ (~ set_of_pairs X3))))) -> atleast5 X0) -> ((~ SNoLt X3 (binrep (Power (Power (Power (Power Empty)))) Empty)) /\ ((((~ atleast6 X2) -> ((~ nat_p X4) /\ (~ atleast3 X4))) /\ (~ exactly3 X3)) -> ((((TransSet X4 /\ ((setsum_p X3 /\ (~ exactly3 X3)) -> ((~ nat_p X4) /\ atleast2 X1))) -> atleast2 X4) /\ (~ exactly2 X3)) /\ TransSet X3)))))))).
admit.
Qed.

Theorem conj_Random1_TMHJMz9PpCsDTXQuMF1K5FADTCje36UrAAJ: exists X0:set, ((forall X1 :e X0, exists X2:set, ((X2 c= Empty) /\ TransSet X1)) /\ (exists X1:set, forall X2 c= X1, ((exists X3 :e X2, (~ SNoLt X3 X1)) /\ (forall X3:set, forall X4:set, (~ exactly3 X4) -> nat_p X2)))).
admit.
Qed.

Theorem conj_Random1_TMMBtFBLRvMeyw4cpVaa4rVDkgvuVWYBk4r: exists X0:set, ((exists X1:set, ((~ (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty) :e lam2 X0 (fun X2:set => Power (binrep (Power (Power Empty)) Empty)) (fun X2:set => fun X3:set => X3))) /\ (exists X2 :e X1, forall X3:set, (exists X4:set, ((X4 c= X0) /\ PNoLe X4 (fun X5:set => (~ exactly3 (binrep (Power (Power (Power Empty))) Empty))) (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) (fun X5:set => (exactly2 Empty /\ (~ equip X3 X4))))) -> (exists X4:set, atleast6 X3) -> ((forall X4 :e X3, (~ (X4 :e X3))) /\ SNo X0)))) /\ (forall X1:set, (~ exactly5 X1) -> nat_p X1 -> ((exists X2:set, ((~ atleast5 Empty) /\ (~ nat_p X0))) /\ (exists X2 :e X0, forall X3 c= binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty), atleast2 X2)))).
admit.
Qed.

Theorem conj_Random1_TMGW3BcWwU7eBfGyVraeyDKZfgR1KZ61Mbg: forall X0:set, (forall X1 c= X0, forall X2:set, exactly1of2 (exists X3:set, exists X4:set, (~ ordinal X3)) ((exactly5 (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty) -> (forall X3:set, (forall X4 c= SNoLev X1, (~ nat_p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty))) -> (forall X4 c= X0, setsum_p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))) -> (~ bij X1 X0 (fun X4:set => X3)) -> (exists X4:set, ((~ TransSet X2) /\ exactly4 X3)))) /\ (forall X3 c= X2, forall X4:set, (~ exactly5 X4)))) -> (forall X1 :e Empty, (~ exactly4 X0)).
admit.
Qed.

Theorem conj_Random1_TMMhjwr2JcvTMGYfZD2tv5DH25DPRcJ2vmg: exists X0:set, ((forall X1 :e X0, (exists X2:set, forall X3:set, exists X4 :e X3, (((~ atleast6 X3) -> (~ exactly2 X4)) /\ (~ TransSet X4))) -> atleast2 X1) /\ (forall X1 :e V_ X0, (forall X2:set, forall X3 :e Power (Power (Power (Power Empty))), exists X4:set, ((~ atleast5 Empty) /\ exactly2 X2)) -> (exists X2 :e X0, atleast3 X1 -> (exists X3:set, ((exists X4:set, (TransSet X1 /\ ((((((~ SNo X4) -> (((~ exactly4 X3) -> (~ exactly3 X3)) /\ (~ equip X4 X3)) -> exactly2 X3) -> (~ atleast2 X3) -> exactly2 (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))) -> (((tuple_p X1 Empty -> exactly4 (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty)) -> setsum_p X1) /\ (~ setsum_p X2))) -> atleast6 Empty) -> atleast4 (SetAdjoin X3 X4)) -> (~ exactly4 X3) -> ((~ ordinal X1) /\ atleast4 (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty)))) -> (TransSet X3 /\ (~ atleast2 X4))) /\ (exists X4:set, (((atleastp (binunion (binrep (Power (Power (Power Empty))) (Power Empty)) X4) X1 -> ((((~ ordinal (Unj (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty))) /\ (~ exactly3 X3)) /\ (SNo_ (binrep (Power (Power (Power Empty))) Empty) (binintersect X4 Empty) /\ (~ SNoEq_ X3 X3 X3))) /\ setsum_p X3)) -> (TransSet X3 /\ (~ SNo X4)) -> ((atleast3 X1 /\ (((((~ nat_p X4) /\ (~ exactly3 (binrep (Power (Power (Power (Power Empty)))) Empty))) -> (((((exactly3 X4 -> (atleast3 X4 /\ ((atleast6 X0 -> ((~ TransSet X1) /\ (X3 :e X2))) -> (SNoLe (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) X4 /\ (~ SNo_ X0 Empty))))) /\ ((((~ atleast6 X3) /\ exactly2 X4) /\ (~ atleast6 Empty)) /\ exactly5 (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty))) -> ordinal X3) -> ((~ atleast3 X3) /\ (~ exactly5 X1))) /\ (atleast2 (UPair X0 X4) /\ (~ exactly2 X3)))) -> (~ atleast2 X3)) /\ ordinal (binrep (Power (Power (Power Empty))) Empty))) /\ ((exactly2 X0 -> atleast4 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))) -> atleast5 X2))) /\ (((~ atleast6 (Pi X1 (fun X5:set => X4))) /\ ((~ exactly3 Empty) /\ ((~ SNo_ X3 (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)) /\ ((((bij X3 X3 (fun X5:set => Empty) -> (atleast2 X3 /\ SNoLt (SNoElts_ X4) (binrep (Power (Power (Power (Power Empty)))) (Power Empty)))) /\ exactly3 X3) /\ set_of_pairs (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty))) -> ((~ ordinal Empty) /\ atleast6 X4) -> (~ atleast5 X4))))) /\ ((~ (X3 c= binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty)) -> ((~ exactly1of2 (exactly4 (Inj1 (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty))) (~ atleast6 X4)) /\ atleast4 X3)))) -> per_i (fun X5:set => fun X6:set => (~ atleast4 (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty))))))))).
admit.
Qed.

Theorem conj_Random1_TMYacgtjrbxaJTMWj6C2N1oAph39VLxkKRk: forall X0 c= binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)), forall X1 :e X0, ((exists X2 :e binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)), exists X3:set, ((X3 c= X0) /\ ((forall X4:set, (X4 :e X2)) -> (~ exactly3 X0)))) /\ (exists X2 :e X0, forall X3:set, atleast5 X3)).
admit.
Qed.

Theorem conj_Random1_TMPYwQEDGi9an9uvnxtgki1X4MugSoKW2nt: exists X0 :e Empty, forall X1 :e combine_funcs X0 (PSNo X0 (fun X2:set => forall X3 :e X2, ((X2 :e X2) /\ (((~ (X2 = X0)) -> (forall X4 :e binrep (Power (Power (Power (Power Empty)))) (Power Empty), (forall X5 :e X3, (((~ nat_p X3) /\ SNo X5) /\ (((~ nat_p X4) /\ (((~ exactly4 X5) /\ ((((exactly3 X3 /\ exactly2 X4) -> (~ atleast6 Empty) -> TransSet X5) /\ (exactly3 X5 /\ (((~ TransSet X3) /\ (~ atleast4 X5)) /\ exactly3 Empty))) -> (~ exactly3 (binrep (Power (Power (Power Empty))) (Power Empty))))) /\ exactly5 X5)) /\ (((atleast5 X5 /\ ((((~ atleast4 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))) -> (((~ atleast2 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty))) /\ (~ exactly4 (binrep (Power (Power (Power Empty))) (Power Empty)))) -> (setsum_p X0 /\ (~ reflexive_i (fun X6:set => fun X7:set => ((((((~ atleast5 X6) -> ((~ atleast6 X3) /\ (((exactly4 X6 -> nat_p X6) -> (((ordinal X6 /\ (((~ (X6 :e Empty)) -> (~ ordinal X7) -> ordinal X6 -> (~ exactly5 X6)) -> (ordinal X6 /\ exactly3 (mul_nat X7 X7)))) -> atleast3 X6) /\ ((set_of_pairs X7 -> (~ exactly3 X4)) -> (~ linear_i (fun X8:set => fun X9:set => (~ TransSet X3))) -> exactly3 Empty))) /\ exactly5 X6))) -> (atleast2 X0 /\ exactly3 (Power (binrep (Power (Power Empty)) Empty)))) /\ atleast2 X7) -> (~ atleast5 X0)) /\ (~ exactly5 X6)))))) -> atleast3 X5) -> (~ atleast5 X2)) -> ((((~ exactly5 (Sing (Power (binrep (Power (Power Empty)) Empty)))) -> (~ exactly5 X3)) -> ((SNo X5 /\ ((~ exactly5 X5) /\ (((~ atleast2 X0) -> (ordinal Empty -> atleast3 Empty) -> (~ nat_p X5) -> (~ exactly4 (Union Empty)) -> ((~ TransSet X3) /\ ((~ atleast6 X5) -> (PNo_downc (fun X6:set => fun X7:set -> prop => X7 X5) X4 (fun X6:set => (~ atleast3 X5)) /\ ((atleast6 X3 /\ (~ equip X3 X4)) -> ((TransSet X4 -> set_of_pairs X4 -> ((((~ ordinal Empty) -> atleast4 X4 -> (~ atleast3 X5)) -> (~ exactly3 X0) -> ((~ nat_p X5) /\ (((atleast4 X5 -> (~ setsum_p X2)) -> (~ atleast6 X4)) /\ ((~ atleast5 (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty)) /\ nat_p X5)))) -> (setsum_p X4 -> (~ exactly5 X5)) -> atleast4 X5) -> (exactly4 X5 /\ ((~ SNo X5) -> (~ TransSet X5)))) /\ (atleast3 X0 /\ atleast3 X3))))))) /\ (~ exactly4 X0)))) /\ ordinal X4)) /\ (~ atleast3 X3)))) /\ ((atleast4 X4 -> atleast3 X5) -> setsum_p X0)) /\ ordinal X5))) -> (~ ordinal X3)) -> (exists X5:set, ((X5 c= X3) /\ (atleast3 X5 /\ exactly5 X3))) -> TransSet X3)) -> (forall X4:set, (forall X5:set, (~ atleast5 X5) -> (((atleast4 X5 /\ ((~ reflexive_i (fun X6:set => fun X7:set => (((((atleast3 X5 /\ ((~ exactly4 X6) /\ (((~ exactly5 X0) -> atleast6 X6 -> exactly2 X3 -> (~ atleast3 X0)) -> (atleast5 X0 -> exactly3 (proj1 Empty)) -> (~ nat_p X6)))) /\ ((X6 = binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) /\ atleast4 Empty)) /\ nat_p X4) /\ (~ atleast3 Empty)) /\ atleast6 X0))) /\ ((~ (X4 c= V_ X5)) /\ SNo (Sing X3)))) /\ (atleast4 (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty) -> (~ atleast2 (Power (binrep (Power (Power Empty)) Empty))))) /\ exactly4 X2)) -> atleast6 X2))))) (fun X2:set => X2) (fun X2:set => binrep (Power (Power (Power Empty))) (Power Empty)) (binrep (Power (Power (Power (Power Empty)))) (Power Empty)), atleast5 X0 -> TransSet X0.
admit.
Qed.

Theorem conj_Random1_TMKHkHkSRJpDgTWxXS8DYRFdVMgLAcoXc93: exists X0:set, ((exists X1 :e proj1 Empty, forall X2 :e X1, forall X3 :e X0, forall X4:set, (((atleast3 X3 /\ ((~ exactly3 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))) -> (nat_p X3 /\ (~ atleast5 X4)) -> ((((~ atleast3 (Power (Power (Power (Power Empty))))) -> set_of_pairs X0 -> ((((exactly3 X3 -> atleast2 X2) /\ (~ atleast3 X3)) -> (exactly2 X4 /\ (((~ atleast4 X3) /\ (~ SNoLt X1 X3)) -> (~ SNo X0) -> ((((atleast6 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) -> exactly3 X2 -> (~ setsum_p X3)) -> (((~ tuple_p X4 X3) -> atleast4 X2) /\ (((~ SNo X4) /\ (~ TransSet (V_ X4))) /\ equip X4 X2))) /\ (((((((((~ TransSet X3) /\ bij X3 (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty) (fun X5:set => X4)) -> (((~ (X4 :e X2)) /\ atleast4 Empty) -> TransSet X4) -> (~ exactly5 X3)) /\ (~ atleast5 Empty)) /\ (~ exactly3 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)))) -> (~ exactly5 X3) -> (~ exactly4 (Power (binrep (Power (Power Empty)) Empty))) -> SNo X2) -> ((((~ atleast4 X2) /\ (~ nat_p X0)) -> ordinal X2) /\ exactly4 X3)) -> (exactly2 Empty /\ (atleast5 X3 /\ ((~ (X3 :e Union (Sing Empty))) -> (~ (X3 :e X1)))))) -> (binrep (Power (Power (Power Empty))) (Power Empty) = X4) -> (~ setsum_p X4))) /\ TransSet X3)))) /\ (atleast3 Empty /\ ((atleast6 X4 -> atleast3 X2 -> atleast3 X0) /\ ((~ reflexive_i (fun X5:set => fun X6:set => exactly4 X6 -> (~ ordinal X6) -> nat_p X5)) /\ (~ nat_p X0)))))) /\ (~ atleast5 (binrep (Power (Power (Power Empty))) Empty))) /\ atleast2 X4))) /\ atleast2 X4) -> nat_p X2) -> (~ SNoLe X0 X2)) /\ (forall X1:set, (~ atleast4 X0) -> (exists X2:set, (((exists X3 :e binrep X0 X1, ((exists X4 :e X3, (TransSet X3 /\ ((~ SNoLt X0 X2) -> (atleast6 X0 /\ nat_p X3) -> (~ eqreln_i (fun X5:set => fun X6:set => atleast2 (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)))))) /\ ((forall X4 c= Empty, nat_p Empty -> (~ atleast3 X4) -> ((~ exactly3 X4) /\ (((((~ exactly2 X4) -> (~ atleast2 X2)) -> (~ atleast6 X4) -> exactly5 (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty)) -> atleast3 X0) -> (ordinal X2 /\ (ordinal X3 /\ (((~ atleast5 X4) -> ordinal X4) /\ ((~ exactly2 Empty) /\ (~ ordinal X0)))))))) /\ (~ eqreln_i (fun X4:set => fun X5:set => (PNoLe X5 (fun X6:set => (SNoLe X0 X5 -> (~ setsum_p X0)) -> exactly5 X5) X5 (fun X6:set => ((~ exactly5 X0) /\ (TransSet X6 /\ (~ exactly4 X5)))) -> ((~ reflexive_i (fun X6:set => fun X7:set => (X0 :e X6))) /\ (~ exactly2 Empty))) -> ((~ atleast3 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty)) /\ ((((((((atleast3 X1 -> (~ atleast5 (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty))) -> ordinal X1 -> atleast6 X5) /\ atleast3 X0) /\ (((~ exactly5 X5) /\ (setsum_p X4 -> TransSet X5)) -> atleast2 (binrep (Power (Power (Power Empty))) (Power Empty)))) -> (~ atleast4 (Inj0 X0))) -> ((~ TransSet X5) /\ (~ tuple_p Empty (ap Empty X5)))) /\ ((~ exactly5 X0) -> exactly2 X1)) -> (((((exactly4 X5 /\ (~ atleast4 X5)) -> ((~ atleast6 X4) /\ exactly3 X4)) -> ((((set_of_pairs X0 -> (~ atleast5 X4)) -> (((~ atleast3 (Power (Power (Power (Power Empty))))) -> (~ atleastp Empty X4) -> set_of_pairs X3) /\ (~ atleast3 (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty)))) -> (~ atleast6 (SNoElts_ (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))))) /\ ((((atleast3 X2 -> (((~ atleast4 (Sing X4)) /\ (~ atleast6 X4)) /\ ((~ exactly2 X4) /\ (~ ordinal X2)))) /\ ((~ reflexive_i (fun X6:set => fun X7:set => (~ atleast6 X6) -> atleast6 X6)) -> ((~ atleast3 X4) -> ((((((~ tuple_p X5 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty)) /\ (set_of_pairs X4 -> exactly3 X2)) -> (atleast2 Empty /\ (((~ exactly4 X2) -> (exactly4 (binrep (Power (Power (Power (Power Empty)))) Empty) -> (~ atleast5 X0)) -> TransSet X3) /\ ((nat_p X2 -> ((~ nat_p (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty)) /\ (~ TransSet (V_ X4)))) -> exactly3 X4)))) /\ (~ exactly5 X5)) /\ (~ TransSet (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty))) /\ atleast2 (SNoElts_ X4))) -> (TransSet X5 /\ (((((((((~ ordinal Empty) /\ (set_of_pairs (proj1 X5) /\ (~ atleast2 X5))) -> (~ atleast5 X3)) -> (~ (X0 :e X5))) /\ (~ atleast4 (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))))) /\ ((~ nat_p X5) /\ (SNo_ X4 (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty) /\ (setsum_p X4 -> (~ ordinal X4))))) -> (atleast5 X5 -> ((~ exactly4 (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty)) /\ atleast4 X1)) -> exactly3 X5) /\ atleast3 X4) /\ (~ atleast3 X4))))) -> (((((~ exactly2 X5) /\ (((TransSet X3 -> ((~ exactly3 Empty) /\ ((exactly4 X5 -> (~ atleast3 X3)) /\ (nat_p (ordsucc (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty)) -> atleast4 X3)))) -> ((atleast4 X0 /\ (setsum_p X4 -> ordinal (Sing X5))) /\ ((~ exactly2 X4) /\ ((~ TransSet X4) /\ (~ exactly4 X1))))) /\ ((((((~ exactly5 X5) /\ (exactly3 X4 /\ SNo (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty))) /\ ((~ exactly4 X5) /\ (~ atleast2 (Sing X5)))) /\ (((exactly4 X0 /\ (~ TransSet X5)) -> (((((~ bij X5 (binrep (Power (Power (Power (Power Empty)))) Empty) (fun X6:set => X6)) /\ exactly5 X4) -> (~ exactly4 X5)) /\ ((~ exactly3 X3) -> (((exactly4 X0 -> atleast4 X4) -> (((~ nat_p X0) /\ (exactly4 X4 -> exactly4 X4)) /\ (~ atleast5 X5))) /\ ((~ exactly3 X4) /\ TransSet X5)))) /\ (~ exactly5 X0)) -> ((~ totalorder_i (fun X6:set => fun X7:set => ((((~ atleast2 X7) -> atleast3 (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)))) /\ ((~ TransSet X3) -> atleast2 X6)) /\ (~ atleast3 X7)))) /\ ((atleast6 (binrep (Power (Power (Power Empty))) (Power Empty)) -> exactly3 (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty)) -> (~ atleast3 Empty)))) -> ((~ SNoLe X5 X5) /\ (~ SNo (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty))))) -> exactly4 X5 -> (~ nat_p X3)) /\ (~ atleast3 X4)))) -> exactly3 (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)) /\ atleast3 X4) /\ (reflexive_i (fun X6:set => fun X7:set => (PNoLe X7 (fun X8:set => (~ exactly4 X7)) X2 (fun X8:set => (atleast4 X7 /\ (((((~ exactly5 X2) -> (((~ setsum_p X0) /\ (TransSet X2 -> ordinal X6 -> (((~ atleast5 (Inj0 X8)) /\ ((atleast2 (Sing X8) /\ (per_i (fun X9:set => fun X10:set => atleastp X5 X9) -> (exactly2 X5 /\ ((setsum_p X0 -> set_of_pairs X8) -> (set_of_pairs X5 /\ exactly2 X7))))) -> ((~ exactly3 X8) -> SNo X2) -> (~ equip X8 Empty))) /\ ((~ exactly4 X0) /\ atleast5 X6)))) /\ setsum_p X8)) /\ (X3 :e X7)) /\ exactly4 X8) -> PNoLt Empty (fun X9:set => (~ atleast4 Empty)) X7 (fun X9:set => (~ atleast2 X8))))) /\ (SNoLe X6 (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty) -> (~ atleast4 X7)))) -> exactly3 X0))) -> (~ (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty :e X2))))) -> (((~ atleast5 X4) -> (~ atleast6 X3) -> TransSet X5) /\ ((~ SNo X3) -> (~ exactly1of3 ((set_of_pairs X5 -> (~ setsum_p Empty)) -> ((exactly3 X4 -> SNo (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty) -> (~ TransSet (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty))) /\ (ordinal X5 -> atleast5 X4 -> (((((((~ exactly3 X3) -> exactly3 X4 -> (((~ atleast2 X5) /\ ((~ exactly4 X4) -> exactly2 X4)) /\ (((~ atleast4 X0) /\ (~ tuple_p (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty) Empty)) /\ ((~ atleast2 X4) /\ (~ SNo (Sing X4))))) -> (~ bij X0 X5 (fun X6:set => binrep (Power (Power (Power Empty))) Empty))) /\ nat_p X5) -> (~ (X4 :e Empty))) /\ ((((((atleast4 (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty) -> ((~ setsum_p X4) /\ (atleast5 X5 /\ atleast3 X4)) -> atleast4 X3) -> TransSet (binrep (Power (Power (Power Empty))) (Power Empty))) -> (~ nat_p X5)) -> set_of_pairs X5 -> (~ setsum_p X5)) /\ (~ ordinal X3)) -> atleast6 X2)) -> (~ nat_p X2) -> (((X1 = X4) -> exactly5 X1) /\ ((atleast6 X2 -> (atleast2 X4 /\ ((~ (X5 = X3)) /\ (~ reflexive_i (fun X6:set => fun X7:set => (~ atleast2 X7)))))) -> (((((~ exactly2 X5) /\ nat_p X1) -> (~ atleast3 X0)) -> (~ nat_p X4)) /\ ((atleast2 X4 -> (~ exactly4 X4) -> (~ exactly5 X5)) /\ (set_of_pairs X5 /\ (~ TransSet X0))))))) /\ ((((~ exactly3 X0) /\ (SNoLt X1 X0 /\ (~ atleast2 (PSNo (ordsucc X4) (fun X6:set => (~ atleast5 X2) -> (setsum_p X0 /\ (~ exactly5 X6))))))) /\ (((((reflexive_i (fun X6:set => fun X7:set => (~ atleast5 X6)) /\ atleast2 Empty) /\ setsum_p (binrep (Power (Power (Power Empty))) Empty)) -> atleast4 X4) -> (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)) :e X5)) -> ((~ atleast6 X0) /\ exactly5 (Power (binrep (Power (Power Empty)) Empty))))) -> (atleast4 X5 /\ (~ ordinal X2))))))) (stricttotalorder_i (fun X6:set => fun X7:set => nat_p Empty) /\ (~ exactly4 X2)) (~ ordinal X4))))) /\ set_of_pairs (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))) -> (~ setsum_p X3))) -> (atleast5 X4 /\ atleastp X5 X4)))))) -> (forall X3 :e X0, forall X4:set, (((~ reflexive_i (fun X5:set => fun X6:set => atleast3 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty))) -> setsum_p (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty)) /\ ((~ atleast4 X4) /\ (atleast5 X4 /\ ((~ atleast5 X4) /\ ((((((~ atleast6 X3) -> (((nat_p X2 /\ (atleast3 Empty /\ (~ exactly5 (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)))))) /\ ((((((~ atleast4 X1) -> (~ atleast2 X3) -> exactly2 X3) -> SNoLe (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty) (V_ (proj1 X4))) -> ((((TransSet X2 /\ reflexive_i (fun X5:set => fun X6:set => (~ setsum_p X6))) /\ ((SNo_ Empty X4 /\ (nat_p X3 -> ((~ exactly4 X4) /\ atleast3 X4))) -> (~ nat_p (Power X4)) -> (((((atleast4 X3 /\ ((exactly1of3 (nat_p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty))) ((PNo_upc (fun X5:set => fun X6:set -> prop => X6 X2) X2 (fun X5:set => ((((~ atleast3 X4) -> (~ atleast2 X4)) /\ ((~ ordinal X5) -> ((ordinal X4 /\ ((((~ exactly5 X5) -> (((~ TransSet X4) /\ (atleast4 X2 /\ TransSet (binrep (Power (Power (Power (Power Empty)))) (Power Empty)))) /\ (exactly3 X5 /\ (~ nat_p X5)))) -> ((~ inj X5 X5 (fun X6:set => X5)) /\ ordinal X5)) -> ((nat_p X4 /\ (SNo X2 -> ((~ nat_p X3) /\ setsum_p Empty) -> SNo (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty))) /\ (exactly4 X5 /\ (~ exactly2 X0))))) -> (((~ exactly2 X4) -> (~ tuple_p (binrep (Power (Power (Power Empty))) (Power Empty)) X3) -> (~ atleast5 X3)) /\ (((~ exactly5 X0) -> (~ exactly2 X2) -> atleast5 X5) /\ (~ atleast3 X2))) -> (~ ordinal X4) -> TransSet X4) -> (~ atleast4 (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)))) -> (~ (X5 :e X4)))) /\ SNo X5)) /\ ((~ atleast6 X4) -> (((exactly2 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) -> atleast5 X0) -> (atleast2 X3 /\ (PNoLe X1 (fun X5:set => exactly2 X4) X3 (fun X5:set => bij (UPair X1 X5) X4 (fun X6:set => X5)) /\ (~ (X3 :e X4))))) /\ ((~ TransSet X3) -> (~ exactly3 X2))) -> (~ atleast3 Empty))) /\ ((X2 c= X4) -> setsum_p X4)) (atleast2 (ordsucc X4) /\ TransSet (lam2 X4 (fun X5:set => X4) (fun X5:set => fun X6:set => X6))) -> (exactly2 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) /\ exactly2 X1)) /\ ((((~ TransSet X3) -> exactly5 X4) -> (atleast5 X3 /\ (~ atleast2 (binrep (Power (Power (Power Empty))) Empty)))) /\ (X3 = X4)))) -> ((((((symmetric_i (fun X5:set => fun X6:set => atleast3 (binrep (Power (Power (Power Empty))) Empty)) /\ (((~ ordinal X0) -> TransSet (binrep (Power (Power (Power Empty))) Empty)) /\ (atleast2 X4 /\ (((~ exactly5 X3) -> ((~ ordinal X3) /\ (((ordinal (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty) /\ (((((~ set_of_pairs (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)) /\ (((~ set_of_pairs Empty) /\ ((((~ equip X4 X3) /\ ((~ exactly3 X1) /\ (~ atleast4 X3))) /\ (exactly4 X3 /\ ((~ ordinal Empty) /\ ((~ atleast2 X3) -> (partialorder_i (fun X5:set => fun X6:set => ((exactly3 X6 -> atleast2 X2) -> (~ setsum_p X6)) -> atleast6 X2 -> (setsum_p X5 /\ (~ reflexive_i (fun X7:set => fun X8:set => ((((~ atleast2 X8) -> atleast3 X7) -> atleast5 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty))) /\ (~ SNo X8)))))) /\ exactly4 (Sing X2)))))) -> ordinal X2 -> ((~ atleast6 (binrep (Power (Power (Power (Power Empty)))) (Power Empty))) /\ (((~ ordinal X3) /\ (atleast4 X2 /\ atleast4 X4)) -> ((~ atleast3 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))) /\ atleast2 X0))) -> (~ atleast2 X3))) /\ ((~ atleastp X3 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))) -> (~ atleast3 Empty)))) /\ nat_p Empty) -> (~ atleast2 X3)) /\ (atleast5 X4 -> SNo X3))) /\ exactly5 Empty) -> (((~ SNo (SNoLev X4)) -> (exactly4 (SetAdjoin X0 X0) /\ SNo X3)) /\ (((ordinal X3 /\ ((atleast4 X2 /\ ((~ TransSet X4) /\ atleast6 X2)) -> (~ TransSet X4))) /\ (~ atleast3 X2)) /\ (((~ atleast3 (Power (Power (Power (Power Empty))))) -> TransSet (V_ X1) -> atleast4 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty)) /\ (~ atleast4 X4)))) -> exactly5 X1))) -> (nat_p X4 /\ ((~ setsum_p X2) -> reflexive_i (fun X5:set => fun X6:set => PNo_downc (fun X7:set => fun X8:set -> prop => (TransSet X7 /\ (((~ setsum_p (proj0 X0)) /\ ((X8 X7 /\ ((~ X8 X3) /\ (~ X8 X7))) -> (setsum_p X7 /\ (((~ X8 (binrep (Power (Power (Power (Power Empty)))) (Power Empty))) /\ (~ atleast6 (Inj0 X1))) -> (~ exactly5 (Power (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty))))))) /\ ((((X8 X5 -> atleast4 X7) /\ X8 X7) /\ atleast6 X6) /\ (~ X8 X6))))) (SNoLev X5) (fun X7:set => (((atleast6 X0 -> atleast5 X1 -> ((~ atleast3 X1) /\ exactly4 X7)) /\ (~ set_of_pairs X5)) /\ exactly5 X7))) -> (TransSet (mul_nat (lam2 X4 (fun X5:set => X0) (fun X5:set => fun X6:set => binrep (Power (Power (Power (Power Empty)))) (Power Empty))) X3) /\ (~ exactly2 X4)) -> (atleast6 X2 /\ TransSet X2) -> (((((((((~ PNoLt X2 (fun X5:set => ((~ totalorder_i (fun X6:set => fun X7:set => (strictpartialorder_i (fun X8:set => fun X9:set => ((SNo (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty) -> (~ atleast4 X5)) -> ((exactly4 Empty -> atleast4 X9) /\ (~ (X9 :e binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty))))) -> set_of_pairs X1) -> atleast2 X6) -> ordinal X7)) /\ (~ SNo X0))) X3 (fun X5:set => (atleast6 X5 -> ((((nat_p X4 /\ ((~ set_of_pairs X4) -> (~ atleast6 X5))) -> ((~ (Empty :e X1)) /\ ((~ nat_p X3) -> TransSet X5))) -> (~ atleast2 (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty))) /\ (~ exactly3 X3))) -> (~ exactly5 X5))) /\ ordinal X3) -> atleast3 X3 -> exactly3 X2) -> (~ nat_p X3) -> (exactly4 X0 /\ (~ atleast5 X2))) /\ (((~ exactly2 X4) /\ reflexive_i (fun X5:set => fun X6:set => ((~ ordinal (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty)) /\ nat_p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty))))) -> exactly2 X0 -> TransSet X3 -> (atleast4 X3 /\ (((~ TransSet X0) /\ ordinal X4) /\ ((~ ordinal X4) /\ exactly3 (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty)))))) -> (exactly2 X1 -> nat_p X3 -> ((~ exactly4 X4) /\ (~ exactly5 X3))) -> (~ atleast2 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty))) -> (atleast5 X2 /\ (~ atleast3 X3))) /\ atleastp X3 X0) /\ atleast6 X0))))))) -> (~ atleast6 X2) -> ((~ atleast3 X3) /\ (atleast6 X4 /\ ((~ SNoLt (binunion (proj1 X0) X3) X4) -> (~ exactly4 X4))))) -> (~ (X3 :e binrep (Power (Power (Power (Power Empty)))) Empty)) -> atleast2 (Inj1 X2)) /\ (((~ exactly4 (binrep (Power (Power (Power (Power Empty)))) (Power Empty))) -> atleast5 (mul_nat (binrep (Power (Power (Power Empty))) Empty) X3)) -> ((((~ SNo_ X4 Empty) -> atleast6 X4) /\ (nat_p Empty -> ((exactly2 (Power (binrep (Power (Power Empty)) Empty)) /\ ((((~ atleast2 X4) -> (~ nat_p X2) -> TransSet X0) /\ ((~ TransSet X4) /\ (((~ exactly2 X2) -> (((~ exactly4 X0) -> exactly2 (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty) -> (~ inj X3 X4 (fun X5:set => X5))) /\ ((SNoLt X3 X3 -> exactly4 X2) /\ nat_p X3))) -> ((~ atleast5 X3) /\ ((((((atleast3 X3 /\ (TransSet X3 /\ ((~ exactly1of3 (exactly3 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) /\ (~ exactly2 (binrep (Power (Power (Power Empty))) Empty))) ((~ atleast6 (setprod (Union X0) X3)) -> (atleast4 X1 /\ exactly5 X0)) (setsum_p (proj1 X3))) -> (~ TransSet X4)))) /\ (~ reflexive_i (fun X5:set => fun X6:set => (~ SNo Empty)))) /\ (reflexive_i (fun X5:set => fun X6:set => (atleast3 Empty /\ atleast3 X6) -> (~ ordinal X6) -> ((~ atleast5 X6) /\ ordinal X6)) -> exactly3 X4)) /\ atleast5 X3) -> exactly4 X1) /\ atleast2 X3))))) -> (~ exactly3 (proj0 X2)))) /\ ((X2 :e X3) -> (~ SNo_ X1 X3))))) /\ (~ exactly4 X3)))) -> ((~ exactly5 X3) /\ ((((((TransSet X3 /\ ((((nat_p (Power (binrep (Power (Power Empty)) Empty)) /\ (~ exactly4 X2)) -> exactly3 X3 -> (~ atleast2 X0)) /\ (~ (Power (binrep (Power (Power Empty)) Empty) = X3))) -> (~ atleast2 X3) -> (ordinal X1 -> (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty) :e X4)) -> ((equip X3 X4 /\ exactly5 X2) /\ (~ exactly4 X1)))) /\ ((~ exactly2 (binrep (Power (Power (Power Empty))) (Power Empty))) /\ (SNoLe X3 X3 -> atleast5 X3))) /\ ((atleast6 X4 /\ atleast4 Empty) /\ exactly2 (SNoElts_ X3))) -> ((~ atleast2 X0) /\ (~ nat_p X3))) /\ (((~ setsum_p X3) /\ atleast3 X3) -> (tuple_p X2 Empty /\ ((((~ exactly3 X4) /\ exactly2 X3) /\ (set_of_pairs X3 -> (~ exactly4 X4))) /\ (~ TransSet (ReplSep X3 (fun X5:set => (exactly5 Empty /\ (~ exactly3 (Sing (Inj0 X0))))) (fun X5:set => X1))))))) -> (SNo X0 /\ (exactly2 X2 -> (~ exactly5 (SNoElts_ X2))))))) /\ TransSet (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty))) /\ atleast6 X0) -> (TransSet X0 /\ ((exactly2 X3 -> ((~ ordinal (Power (Power (Power (Power Empty))))) /\ (~ TransSet X3))) -> (~ atleast4 X4)))) /\ ordinal X0))) -> (~ exactly2 X4)) /\ exactly5 X4)) /\ (~ set_of_pairs (setminus Empty X3))) -> ((exactly3 (binrep (Power (Power (Power Empty))) Empty) /\ (~ exactly5 X3)) /\ ((atleast5 X1 -> ((~ setsum_p X3) -> atleast3 Empty) -> ((SetAdjoin (Sep X0 (fun X5:set => (set_of_pairs X4 /\ atleast5 X0) -> (exactly2 X2 /\ set_of_pairs (binunion Empty Empty)))) X2 = X1) /\ ordinal Empty)) -> nat_p X1)) -> (~ ordinal X1))) /\ (~ exactly4 X0))) -> (~ nat_p X1)) /\ exactly5 X3) /\ ((((X4 :e X3) -> exactly4 X2) -> (irreflexive_i (fun X5:set => fun X6:set => TransSet X5) /\ ((((~ atleast2 X4) -> (~ exactly3 X4)) -> ordinal X4) -> (reflexive_i (fun X5:set => fun X6:set => (binop_on X5 (fun X7:set => fun X8:set => X8) /\ (~ nat_p X5))) /\ (((((exactly5 X3 -> setsum_p Empty) -> (~ exactly2 X4) -> (~ exactly3 X0)) -> totalorder_i (fun X5:set => fun X6:set => atleast5 X5)) /\ (~ atleast4 X4)) -> atleast5 X3 -> (~ atleast2 (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty)) -> atleast5 X3 -> (~ atleast2 X4)))))) -> ((set_of_pairs X0 -> (~ atleast5 X1) -> (~ atleast4 X0)) /\ ((~ atleast6 X3) -> (setsum_p X4 /\ (~ (X2 :e X3))))))) /\ (atleast3 Empty -> (~ exactly5 X3) -> (~ exactly5 X3))))))) -> (~ strictpartialorder_i (fun X5:set => fun X6:set => (~ atleast6 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty)))))) /\ ((forall X3:set, (forall X4:set, ((~ ordinal X2) /\ ordinal (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty))) -> (exists X4 :e X1, (~ atleast2 X1))) -> (exists X3:set, setsum_p X1 -> (exists X4 :e X0, exactly2 X4))))))).
admit.
Qed.

Theorem conj_Random1_TMX4xSmGUNhKQNM3yNyEccZsdzByXU5uhPK: forall X0:set, forall X1:set, (forall X2:set, (forall X3 :e Sing X2, ((forall X4 :e X1, (~ atleast5 (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty)) -> ((nat_p Empty /\ atleast3 X4) /\ (~ atleast3 X4))) /\ (forall X4 :e X0, SNo X2 -> (~ exactly2 X4)))) -> (~ transitive_i (fun X3:set => fun X4:set => (~ exactly4 (Power (binrep (Power (Power Empty)) Empty)))))) -> (forall X2 :e X0, (~ atleast3 X1)).
admit.
Qed.

Theorem conj_Random1_TMUVz8Jxzr4H2Ce9V9bzukNJigwUCuLwyG4: exists X0:set, ((forall X1 c= binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)), ((forall X2:set, forall X3 :e X0, forall X4 c= X2, ((atleast4 X3 -> (~ nat_p X4)) /\ ((exactly3 (Union X3) /\ exactly3 X4) /\ ((ordinal Empty -> ((~ exactly2 X3) /\ (atleast3 X4 -> reflexive_i (fun X5:set => fun X6:set => (exactly5 X5 /\ ((~ SNo X1) /\ (((atleast3 X6 /\ (~ TransSet X0)) -> (((((((~ exactly2 X5) -> (~ atleast2 X2)) -> (TransSet X6 /\ (atleast5 Empty /\ (((~ atleast4 (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)) /\ nat_p X2) -> (~ exactly5 X6)))) -> ((exactly4 (binrep (Power (Power (Power Empty))) Empty) /\ atleast6 X6) /\ (~ atleast5 (binrep (Power (Power (Power (Power Empty)))) Empty)))) -> (~ (X0 = binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty))) -> set_of_pairs X5) -> (~ SNoLe X0 X2) -> PNo_upc (fun X7:set => fun X8:set -> prop => X8 X6) X6 (fun X7:set => (~ atleast5 X5))) /\ (~ atleast6 X5))) /\ ((((setsum_p X4 /\ (~ exactly5 (SNoLev X5))) -> (~ atleast5 X6)) -> atleast2 X5) /\ (((((~ setsum_p X3) /\ atleast4 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))) /\ (~ set_of_pairs X6)) /\ atleast5 X5) /\ ((atleast6 X5 -> (((X5 :e X6) -> (exactly4 X0 /\ (~ exactly2 X6)) -> (~ ordinal X6) -> (~ exactly2 X0)) /\ (~ nat_p X6))) /\ nat_p X0)))))))))) /\ exactly4 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)))))) /\ (exists X2:set, ((X2 c= X0) /\ (forall X3:set, forall X4 c= X1, (atleast3 X3 /\ (~ totalorder_i (fun X5:set => fun X6:set => (~ nat_p (binrep (Power (Power (Power (Power Empty)))) Empty))))) -> (~ set_of_pairs X3)))))) /\ (exists X1:set, ((X1 c= binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty) /\ (forall X2 :e X1, (exists X3:set, trichotomous_or_i (fun X4:set => fun X5:set => (~ atleast6 Empty))) -> (~ exactly2 X0))))).
admit.
Qed.

Theorem conj_Random1_TMZdfbQ2pTKeQ9qSq8HYmRvMkCx4PksbPZz: forall X0:set, forall X1:set, ((exists X2:set, forall X3 c= Sing X0, ((exists X4:set, exactly3 X4) /\ ((~ atleast3 X0) -> (~ exactly5 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty))))) -> exactly3 X1) -> (~ exactly2 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty)).
admit.
Qed.

Theorem conj_Random1_TMd88FLDAc727XDB64c2rN4XzdLZtaNHejN: exists X0:set, ((exists X1 :e binintersect X0 X0, forall X2 :e X1, forall X3:set, (forall X4:set, ((((~ exactly5 X2) -> atleast3 Empty) /\ exactly3 (Sing X4)) /\ nat_p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty))) -> (partialorder_i (fun X5:set => fun X6:set => atleast3 X6) -> (~ atleast6 X4) -> ((~ exactly2 X4) /\ (inj X3 X3 (fun X5:set => X3) -> atleast2 (Power (binrep (Power (Power Empty)) Empty)) -> (~ exactly5 (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty)))) -> (~ TransSet X2)) -> ((nat_p X4 -> (~ nat_p X1)) /\ equip X4 X2) -> (~ atleast4 X3)) -> (exists X4:set, (atleast2 X4 /\ exactly3 (UPair X3 X2)))) /\ (exists X1:set, ((X1 c= Empty) /\ (forall X2:set, SNo X2 -> (exists X3:set, ((X3 c= X0) /\ ((~ exactly4 Empty) /\ (forall X4:set, atleast6 (SNoLev (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty))))))))))).
admit.
Qed.

Theorem conj_Random1_TMYSn2M9kPj2zpUcv9hk7ckWXNk36n9SAPm: forall X0:set, (exists X1:set, (~ exactly4 X1) -> (~ atleast5 X1)) -> (exists X1:set, (atleast6 X1 -> (exists X2:set, ((forall X3 :e X1, (~ atleast4 X1)) /\ (~ atleast5 (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty))))) -> (~ exactly4 X0)).
admit.
Qed.

Theorem conj_Random1_TMVwhWcK7LT2ukgF58QYYyG23q2jTU4mxmg: forall X0 c= binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty, forall X1:set, (forall X2:set, (exists X3 :e binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)), (SNo X3 -> (exists X4:set, (~ ordinal X4))) -> SNo X2) -> (forall X3 :e X1, forall X4:set, (~ atleast6 X2))) -> (~ set_of_pairs X1).
admit.
Qed.

Theorem conj_Random1_TMLPBgTZc9J3zDmjvLGR3MmyYuo6zxz4P37: forall X0:set, (exists X1:set, ((exists X2:set, ((X2 c= X1) /\ (forall X3:set, (exists X4:set, ((SNo X4 /\ exactly5 X4) /\ TransSet X4)) -> (exists X4:set, ((~ exactly2 X4) /\ ((((((nat_p X3 -> (exactly3 X3 /\ ((~ atleast3 X0) /\ (~ atleast6 X2))) -> (~ atleastp X3 X4)) -> nat_p X3) /\ exactly2 X4) /\ atleast2 (SNoLev X0)) /\ (~ atleast5 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)))) -> (((exactly3 X4 /\ ((((((exactly5 Empty /\ exactly3 X3) -> (atleast4 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty) /\ (~ atleast6 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty))))) /\ exactly3 Empty) /\ (~ atleast3 X2)) /\ (~ SNoLe X3 X4)) -> exactly5 X2)) /\ ((((tuple_p X3 X2 -> (((((~ SNo X3) /\ ((~ atleast3 X1) -> (SNoEq_ X1 X3 (Sing X1) /\ (~ ordinal X3)))) -> (~ atleast3 (binrep (Power (Power (Power Empty))) Empty))) -> (~ atleast3 X1)) /\ ((exactly2 X0 /\ (~ atleast6 (binrep (Power (Power (Power (Power Empty)))) Empty))) -> atleast4 X3))) /\ atleast5 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty))) /\ (~ exactly4 X3)) /\ (exactly3 X4 /\ (strictpartialorder_i (fun X5:set => fun X6:set => (((~ ordinal (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty)) -> (~ tuple_p X6 Empty)) /\ (~ nat_p (ordsucc X6)))) /\ (~ atleast5 (Power (binrep (Power (Power Empty)) Empty))))))) /\ partialorder_i (fun X5:set => fun X6:set => (((~ exactly3 X1) /\ ((exactly3 Empty -> (exactly3 X5 /\ (atleast2 X5 /\ (((~ atleast2 X6) -> (~ setsum_p (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty)) -> (~ exactly4 X6)) /\ (((((X6 = X6) -> (~ atleast2 X5)) /\ (~ (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty :e X6))) /\ TransSet Empty) -> (atleast6 X5 /\ (exactly5 X5 -> exactly4 X5))))))) -> set_of_pairs X5)) /\ (~ setsum_p X6)))))))))) /\ (forall X2:set, (forall X3 :e Empty, (~ setsum_p X0)) -> ((exists X3:set, exists X4:set, (atleast4 X0 -> (~ exactly5 X2) -> (~ ordinal X4)) -> (atleast4 X3 /\ ((~ irreflexive_i (fun X5:set => fun X6:set => atleast4 X0)) -> (atleast3 X3 /\ ((~ exactly3 (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty)) /\ ((~ (X3 :e X4)) /\ atleast3 X2))) -> (((~ atleast5 X1) -> (TransSet X4 -> (~ ordinal X2)) -> atleast5 (Power (binrep (Power (Power Empty)) Empty))) /\ setsum_p X4) -> exactly2 X4))) /\ (exists X3:set, forall X4:set, ((((atleastp (ap X2 Empty) X4 -> (~ ordinal X2)) /\ (exactly2 (Power X0) /\ exactly3 X3)) /\ (~ (Inj1 X4 :e X3))) /\ (((((atleast2 X4 /\ atleast3 X4) -> ((~ nat_p X2) /\ exactly4 Empty)) -> exactly2 X3 -> TransSet X2) /\ (~ atleast4 X2)) -> (~ exactly3 X1) -> (~ SNo X1) -> exactly3 X4))))))) -> (exists X1:set, ((X1 c= Inj0 Empty) /\ (forall X2 c= binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)), forall X3 c= binrep (Power (Power (Power Empty))) Empty, exists X4:set, exactly5 X3 -> ((~ atleast3 X1) /\ ordinal X3) -> ((~ TransSet X3) -> (~ ordinal X4)) -> atleast3 Empty))).
admit.
Qed.

Theorem conj_Random1_TMH1YDdzAiiBvH1vJWR2Nun4ST8C1AequwZ: forall X0 c= binrep (Power (Power (Power Empty))) (Power Empty), exists X1:set, ((X1 c= binrep (Power (Power (Power (Power Empty)))) Empty) /\ ((((~ atleast4 (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty)) -> (forall X2:set, (forall X3:set, (~ set_of_pairs (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) X3)) -> (((((exists X4 :e X2, (~ atleast3 X3)) -> (exists X4 :e X2, ((~ atleast2 X1) /\ ((~ atleast6 X3) -> (~ nat_p X3))))) -> (atleast5 X2 /\ ((forall X4:set, (~ setsum_p X4) -> exactly3 X4) /\ exactly4 X0))) /\ exactly5 (Inj1 X3)) /\ (forall X4:set, (~ TransSet X4) -> (~ TransSet X4)))) -> (((forall X3:set, exists X4:set, ((~ exactly2 X4) /\ (~ nat_p (Power X0)))) /\ (forall X3 :e X1, forall X4 c= X0, atleast6 X0)) /\ (exists X3:set, ((X3 c= X1) /\ (~ atleast5 X2)))))) -> (exists X2:set, ((X2 c= X1) /\ (forall X3 :e binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty, (~ nat_p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty)))))) /\ ((~ atleast4 X1) /\ (forall X2 :e binrep (Power (binrep (Power (Power Empty)) Empty)) Empty, atleast4 X2)))).
admit.
Qed.

Theorem conj_Random1_TMbDpn2KqvkErnCHriG4C1R7P27tB6cNxuK: forall X0 :e Empty, exists X1:set, ((X1 c= X0) /\ (forall X2:set, (forall X3 c= X2, forall X4 c= Union X3, ((atleast5 Empty /\ (~ exactly4 X3)) /\ (exactly2 X3 /\ (~ ordinal X4))) -> (~ ordinal (proj1 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty))))) -> set_of_pairs (In_rec_i (fun X3:set => fun X4:set -> set => X3) X2))).
admit.
Qed.

Theorem conj_Random1_TMdsurnwKugxPJjtWxjRZZncG5mw6QF5t8H: exists X0:set, ((forall X1 c= binrep (Power (Power (Power Empty))) (Power Empty), exists X2:set, ((exists X3:set, ((X3 c= X2) /\ (forall X4:set, ((~ atleast3 X2) -> ordinal X2) -> ((atleast4 X3 /\ ((atleast6 X3 /\ (~ exactly3 X3)) /\ (~ atleast3 X4))) /\ (~ setsum_p Empty)) -> SNoLt X4 Empty))) /\ (exists X3:set, atleast2 X2))) /\ (forall X1 c= X0, (X0 :e X0))).
admit.
Qed.

Theorem conj_Random1_TMMGu8sTcncXK8zBCCWcM7dusc8au9PBu8T: exists X0:set, ((exists X1:set, (exactly4 X1 /\ (forall X2:set, (~ atleast4 X1) -> (((forall X3 :e X1, ((~ exactly4 X1) /\ (((exists X4:set, binop_on (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) (fun X5:set => fun X6:set => X2)) /\ (exists X4:set, ((((((~ atleast6 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty)) -> ((atleast6 X1 /\ (atleast2 X3 /\ (~ atleast6 X4))) /\ (~ nat_p X4))) /\ (~ TransSet X0)) -> (~ TransSet (Power (binrep (Power (Power Empty)) Empty)))) /\ (((atleast2 X4 -> (set_of_pairs (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty) /\ (set_of_pairs X0 /\ exactly4 X4))) -> ((exactly2 X4 /\ (~ exactly5 X3)) /\ (~ ordinal X4)) -> (~ reflexive_i (fun X5:set => fun X6:set => (~ atleast2 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty))))) -> (~ stricttotalorder_i (fun X5:set => fun X6:set => ordinal X1)))) /\ atleast3 X4))) /\ (~ nat_p X2)))) /\ (forall X3:set, atleast2 X3)) /\ (((forall X3 :e X2, (((exists X4:set, (exactly5 X4 /\ ((((Union X2 :e X1) /\ (atleast5 X4 -> nat_p X3)) /\ ((~ exactly3 X2) /\ ((atleast3 X2 /\ ((((~ atleast5 X2) -> atleast5 Empty) /\ (atleast6 X3 -> atleast2 X4 -> set_of_pairs (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))))) -> exactly3 X4)) /\ (~ exactly3 X0)))) -> (~ atleast4 X4)))) -> setsum_p Empty) /\ (exists X4:set, (((~ exactly3 X1) -> (~ exactly2 (Power (Power (Power (Power Empty)))))) /\ exactly2 X2)))) -> (exists X3:set, ((X3 c= X0) /\ ((exists X4:set, (~ SNo X2)) -> (~ atleast5 X1))))) /\ (~ atleast6 X0)))))) /\ (exists X1:set, ((X1 c= X0) /\ (((exists X2:set, ((forall X3 c= X2, (~ transitive_i (fun X4:set => fun X5:set => (((atleast2 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty) /\ (exactly2 X5 -> (~ set_of_pairs X1))) -> nat_p (Power (Power (Power (Power Empty)))) -> PNoLt_ X4 (fun X6:set => (~ atleast3 X0)) (fun X6:set => (exactly3 X6 /\ (exactly5 X6 /\ atleast5 X5)))) /\ ((~ ordinal X1) /\ (exactly2 X3 /\ (~ exactly2 X1))))))) /\ (exists X3:set, ((forall X4:set, ((((exactly2 X4 -> (~ exactly3 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)))) -> (SNo (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty) /\ (exactly3 X3 /\ (~ exactly5 X3)))) /\ (atleast6 X4 /\ (~ atleast3 X3))) /\ (((TransSet X1 /\ (~ exactly3 X2)) /\ ((~ atleast3 X4) -> (((~ atleast2 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty)) -> (exactly5 (binrep (Power (Power (Power Empty))) (Power Empty)) /\ TransSet X3)) /\ (~ SNo_ (ReplSep Empty (fun X5:set => atleast2 X1) (fun X5:set => Empty)) X3)))) /\ (atleast2 X3 /\ (~ atleast4 Empty))))) /\ ((atleast2 Empty -> (exists X4:set, ((X4 c= X1) /\ ((~ exactly4 (V_ X4)) /\ ((~ atleast5 Empty) -> atleast4 X4))))) /\ (forall X4 c= X2, (~ setsum_p X0))))))) -> (forall X2:set, (exists X3:set, ((X3 c= X1) /\ atleast3 X3)) -> exactly3 Empty -> ((setsum_p X2 -> (forall X3 c= X1, exists X4 :e V_ Empty, atleast2 X3 -> ((~ exactly4 X4) /\ (~ nat_p X3)) -> (atleast4 (famunion (binrep (Power (Power (Power Empty))) (Power Empty)) (fun X5:set => X4)) /\ (exactly4 X4 -> exactly2 X3)))) /\ exactly4 (V_ X2)))) -> SNo (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty))))).
admit.
Qed.

Theorem conj_Random1_TMcrvt4EaWx8p9AuGo2ygyj9LQ6dBZKxuev: forall X0:set, (forall X1 :e binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty, atleast2 X1 -> TransSet Empty) -> (exists X1 :e binrep (Power (Power (Power (Power Empty)))) Empty, exists X2 :e X1, (exists X3:set, ((X3 c= binrep (Power (Power (Power (Power Empty)))) Empty) /\ (forall X4:set, (atleast5 X0 -> (~ atleast4 X4)) -> setsum_p X2))) -> (forall X3 c= X1, (((forall X4:set, (SNoLe X1 X4 /\ (~ exactly3 X3)) -> (((~ tuple_p X3 X3) -> (setsum_p (binunion X4 X4) /\ TransSet X1)) /\ PNoLt_ (Union X3) (fun X5:set => atleast3 X4) (fun X5:set => (~ nat_p X4)))) -> (forall X4 c= binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty), (~ atleast6 (Power (Power (Power (Power Empty))))))) /\ ((~ ordinal (binrep (Power (Power (Power (Power Empty)))) Empty)) /\ (exists X4:set, ((((~ TransSet X4) -> (((~ symmetric_i (fun X5:set => fun X6:set => (~ ordinal X5))) /\ SNoEq_ X3 X4 X3) /\ (SNo Empty /\ exactly2 X4))) /\ (~ setsum_p X3)) /\ (nat_p X0 -> (atleast4 X4 /\ (~ atleast2 X3))))))))).
admit.
Qed.

Theorem conj_Random1_TMaFHYVknhemg7Mm9KBpfez1FT5JdoxErcJ: exists X0:set, ((X0 c= Sep (binrep (Power (Power (Power Empty))) (Power Empty)) (fun X1:set => exists X2:set, ((X2 c= binrep (Power (Power (Power (Power Empty)))) (Power Empty)) /\ (~ set_of_pairs X2)))) /\ (forall X1:set, (forall X2 :e X0, (~ atleast6 X1)) -> (exists X2:set, ((X2 c= X1) /\ (forall X3:set, forall X4:set, ((((X2 = X4) -> (~ atleast5 (binintersect X1 X4))) /\ (((~ ordinal X2) -> ((~ atleast2 X2) /\ (atleast5 X2 /\ ((((~ atleast3 (binrep (Power (Power (Power (Power Empty)))) (Power Empty))) -> (~ atleast6 X3)) -> (~ exactly4 X3)) /\ nat_p X2)))) /\ (~ SNo X3))) /\ (~ nat_p X2))))))).
admit.
Qed.

Theorem conj_Random1_TMYDRbxo33KRmxxPBmp4Ee3u9uUm7DLyVhb: forall X0 :e binrep (Power (Power (Power (Power Empty)))) (Power Empty), exists X1 :e X0, exists X2:set, ((X2 c= X1) /\ ((~ exactly3 (lam X1 (fun X3:set => X3))) -> (exists X3:set, ((X3 c= binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty) /\ ((exists X4:set, ((~ atleast6 X4) /\ exactly2 X4)) -> atleast4 X3))))).
admit.
Qed.

Theorem conj_Random1_TMGwevTsYLn6zUM8wFMqL4bA7eab3Pfd5QS: forall X0 :e binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty, forall X1 c= X0, (exists X2:set, ((X2 c= X0) /\ ((forall X3:set, ((exists X4:set, (~ ordinal (binrep (Power (Power (Power (Power Empty)))) (Power Empty))) -> nat_p X4) /\ (exists X4:set, (~ exactly5 X1))) -> (forall X4:set, nat_p X3)) /\ ((~ atleast3 X2) /\ exactly4 X2)))) -> SNoLt X1 X0.
admit.
Qed.

Theorem conj_Random1_TMPTJg4z5s8JpcNVzqCsjVh5wCzt7kpfRa4: exists X0:set, ((forall X1:set, ((forall X2 :e X0, exists X3:set, (irreflexive_i (fun X4:set => fun X5:set => (~ tuple_p X5 X5)) /\ (~ exactly5 (binrep (Power (Power (Power Empty))) Empty)))) /\ (forall X2:set, ((exists X3:set, ((X3 c= X1) /\ (((exists X4 :e X3, ((atleast6 (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))) -> ((atleast2 X3 -> (TransSet X3 /\ (((exactly4 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) /\ (((~ atleast6 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))) /\ (exactly4 X4 /\ atleastp X1 X1)) -> (~ ordinal X3))) -> (~ (X3 :e X4))) -> (~ SNo_ X3 X3)))) /\ exactly5 X4)) /\ setsum_p X1)) /\ ((~ exactly2 X0) -> (exists X4:set, (~ setsum_p X4)) -> exactly5 X2)) /\ (forall X4 c= X1, (~ atleast3 X0) -> (~ exactly5 (SNoLev X3)))))) /\ (exists X3:set, ((forall X4:set, ((((atleast3 X1 -> (((~ SNoLe Empty X1) -> (~ exactly2 X4)) /\ exactly5 Empty)) -> nat_p Empty) /\ TransSet (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)) /\ (((atleast4 X1 /\ exactly5 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty))) /\ SNo X0) /\ nat_p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty))) -> (((atleast5 X3 -> (~ (X1 :e X2))) /\ (~ (X2 :e X0))) /\ (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty :e X3))) /\ ((atleast4 X3 /\ (~ ordinal Empty)) -> (exists X4 :e X0, (~ atleast4 X0) -> (~ nat_p X3)))))) -> (forall X3:set, (forall X4:set, (setsum_p X2 /\ (~ TransSet (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty)))) -> (((forall X4 c= X1, (atleast2 X2 -> ((set_of_pairs Empty /\ ((((~ TransSet X0) -> (~ atleast3 X4) -> atleast3 X4) -> ((~ exactly5 Empty) /\ ((~ exactly2 X2) -> atleast3 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty))))) -> ordinal X2)) /\ ordinal (Pi X3 (fun X5:set => X4)))) -> (atleast2 (binrep (Power (Power (Power Empty))) (Power Empty)) /\ (~ TransSet (Union X3)))) /\ (forall X4:set, atleast3 (nat_primrec X0 (fun X5:set => fun X6:set => X5) X4) -> (~ ordinal X3))) /\ (forall X4 :e X1, (~ SNoLe X2 X3) -> (((~ atleast6 X3) -> ((~ atleast3 X3) /\ exactly4 X3)) -> set_of_pairs X0) -> (~ atleast5 X4))))))) /\ (forall X1:set, forall X2 c= X0, exactly5 X1)).
admit.
Qed.

Theorem conj_Random1_TMKiEVp78PBwxV5kBBRkHR3qw4ZnAoJtG6G: exists X0:set, ((X0 c= Empty) /\ (exists X1:set, (((exists X2:set, ((X2 c= X0) /\ (exists X3 :e X2, forall X4 c= X2, ((((((exactly4 Empty -> atleast3 X4) /\ (~ set_of_pairs X4)) /\ (~ atleast3 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)))) /\ ordinal Empty) /\ ((~ setsum_p Empty) /\ nat_p (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty))) -> (~ atleast2 Empty)) -> atleast2 (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty)))) -> (forall X2 :e X1, exists X3:set, exists X4:set, ((~ setsum_p (SNoLev (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)))) -> (((~ SNoLt X4 X4) /\ (~ SNo (Sing X2))) -> (exactly4 Empty -> (((~ exactly3 X4) -> atleast3 X1 -> (~ SNo X4) -> (exactly4 X4 /\ (~ strictpartialorder_i (fun X5:set => fun X6:set => (~ ordinal (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty)) -> ordinal X5)))) /\ ((exactly2 X2 /\ (~ atleast3 X4)) /\ (PNo_downc (fun X5:set => fun X6:set -> prop => (X6 X4 /\ (((~ X6 X5) /\ (((((~ X6 X1) /\ (~ (X2 c= X5))) -> (~ ordinal X0)) -> (((~ exactly3 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))) /\ (~ SNo_ X0 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty))) /\ ((~ atleast6 X5) /\ X6 Empty)) -> (~ X6 X4)) /\ ((~ X6 X5) /\ (X6 X5 -> exactly3 X0)))) /\ (~ exactly5 X3)))) X3 (fun X5:set => (((~ atleast5 Empty) -> (~ PNoLt_ X5 (fun X6:set => (~ atleast5 X6)) (fun X6:set => TransSet X6))) /\ exactly3 X2)) /\ (((trichotomous_or_i (fun X5:set => fun X6:set => atleast2 X4) -> (((~ atleast6 X4) -> (~ (ordsucc X4 c= X1))) /\ ((SNo_ X3 X0 /\ exactly2 X1) -> (TransSet X0 /\ (~ equip X4 X4)))) -> exactly5 X2) -> ((exactly3 X0 -> atleast6 X4) -> atleast4 X4) -> (atleast4 X4 /\ (~ (X2 :e binrep (Power (Power (Power Empty))) (Power Empty))))) /\ (~ atleast2 X2))))) -> (~ TransSet Empty)) -> (((((~ exactly1of2 (atleast2 X2) ((((X4 = X3) /\ atleast5 X3) /\ (~ atleast5 Empty)) /\ TransSet X3)) -> (exactly5 X2 /\ (~ (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)) :e X3)))) /\ ((((((~ reflexive_i (fun X5:set => fun X6:set => ordinal (Power (Power (Power (Power Empty)))))) /\ ((~ exactly2 Empty) -> atleast5 Empty)) -> atleast4 X1 -> (((~ exactly3 (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)) -> nat_p X3) /\ ((((atleast6 X0 -> SNo X3) /\ (~ atleast3 X4)) -> exactly3 (binrep (Power (Power (Power (Power Empty)))) (Power Empty))) -> exactly3 X3))) /\ exactly3 X3) /\ (~ stricttotalorder_i (fun X5:set => fun X6:set => atleast5 X6 -> (ordinal X6 /\ ((((setsum_p X2 -> TransSet X6 -> atleast6 X6) /\ ((exactly4 Empty /\ ((((atleast2 X1 /\ (nat_p X6 -> (((exactly5 X6 -> ((~ exactly4 (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty)) /\ (~ atleast6 X6))) -> atleast2 (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty) -> (~ reflexive_i (fun X7:set => fun X8:set => (~ atleast4 X8)))) /\ ((atleast6 X5 -> ((~ atleast3 X5) /\ nat_p X5)) /\ (((~ exactly3 X0) -> ((~ nat_p X5) /\ (((~ TransSet (binrep (Power (Power (Power Empty))) (Power Empty))) -> (~ (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty) c= binrep (Power (Power (Power Empty))) Empty))) -> ((exactly4 (Sing Empty) -> (~ ordinal (PSNo X5 (fun X7:set => (~ reflexive_i (fun X8:set => fun X9:set => (~ exactly4 X9))) -> exactly4 X0))) -> exactly2 X5) -> (~ nat_p X5)) -> (~ exactly3 (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty))))) /\ (~ exactly3 X6)))))) -> (nat_p X6 /\ (~ (X5 :e Power (binrep (Power (Power Empty)) Empty))))) -> exactly5 X5) -> exactly5 X6)) -> totalorder_i (fun X7:set => fun X8:set => ((~ TransSet X7) -> nat_p X8) -> exactly2 X6))) /\ exactly3 (binunion X6 X6)) -> ((~ antisymmetric_i (fun X7:set => fun X8:set => (~ set_of_pairs X3))) /\ (((~ exactly2 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty))) /\ (~ exactly4 X6)) -> atleast4 X2))))))) /\ ((((~ SNo X0) /\ ((SNoLe (proj0 X4) Empty /\ (exactly5 X3 -> (~ atleast5 X2))) -> ((~ setsum_p X3) /\ ((~ exactly2 X0) -> ((SNo X1 -> (((~ SNo_ X4 X3) -> (atleastp X4 (Sing X4) -> ordinal X1) -> (~ ordinal (binrep (Power (Power (Power Empty))) (Power Empty))) -> (atleast2 X4 /\ (~ ordinal X4))) /\ (SNo X2 -> (~ TransSet X4))) -> ordinal X4) -> ordinal X3) -> (~ exactly5 X3))))) /\ (exactly2 X2 /\ atleast4 X3)) -> exactly2 X4))) -> SNo (V_ (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))))) /\ ((~ atleast4 X2) /\ (exactly5 X4 -> TransSet X4)))) -> (((((((set_of_pairs X1 /\ (~ set_of_pairs (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty))) -> (~ PNoLe X1 (fun X5:set => (SNo X4 -> set_of_pairs X3) -> ordinal X5) (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) (fun X5:set => ((~ reflexive_i (fun X6:set => fun X7:set => exactly4 X6)) /\ (~ exactly4 (Power (binrep (Power (Power Empty)) Empty))))))) -> (~ atleast5 X1) -> (atleast2 X2 /\ atleast6 X2)) /\ exactly2 Empty) /\ ((~ (X2 c= binrep (Power (Power (Power (Power Empty)))) (Power Empty))) /\ ((~ exactly2 X1) -> atleast5 (binrep (Power (Power (Power Empty))) Empty)))) /\ (~ atleast5 X2)) /\ exactly4 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty))) -> (~ exactly5 X0))) /\ (forall X2:set, forall X3:set, forall X4 c= X2, ((((((~ atleast6 (binrep (Power (Power (Power Empty))) (Power Empty))) /\ (((~ atleast4 X4) /\ atleast4 X2) -> atleast6 X0)) /\ ((~ exactly3 X3) /\ ((~ atleast6 X1) /\ ((~ atleast4 X3) -> (((~ SNo (Power (binrep (Power (Power Empty)) Empty))) /\ ((SNo_ X3 X3 /\ (~ nat_p X4)) /\ ((((~ irreflexive_i (fun X5:set => fun X6:set => nat_p X5)) /\ (~ ordinal X4)) -> (((((exactly2 (Inj1 X1) /\ (((atleast3 X3 /\ setsum_p X4) /\ (~ nat_p X4)) /\ ((~ exactly2 X3) /\ (((~ exactly3 X3) -> (~ exactly5 X4)) -> ((~ TransSet (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)) /\ (~ exactly5 X4)))))) /\ (~ ordinal X0)) -> nat_p X3) /\ (~ nat_p X0)) /\ ((((((~ atleast6 X3) -> atleast2 (Power (Power (Power (Power Empty))))) -> (~ atleast3 X3)) /\ nat_p (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)) -> (~ SNo X3) -> (~ atleast5 (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))))) -> (~ atleast2 X0)))) -> (~ PNoLe X3 (fun X5:set => ordinal X4) X0 (fun X5:set => (~ TransSet (binrep (Power (Power (Power (Power Empty)))) Empty))))))) /\ (((atleast3 X4 -> (~ atleast5 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty))) -> ((((((((~ nat_p X1) -> (X0 :e Empty) -> ((~ nat_p X2) /\ (~ exactly5 X3))) -> (~ exactly5 X2) -> set_of_pairs (Union X1)) -> eqreln_i (fun X5:set => fun X6:set => ((((atleast2 X4 -> exactly5 X6 -> (~ exactly2 X5)) /\ ((~ ordinal X6) -> (((linear_i (fun X7:set => fun X8:set => exactly5 X8) /\ (symmetric_i (fun X7:set => fun X8:set => ordinal X8) -> (~ ordinal X6))) /\ exactly2 X6) /\ exactly3 X6))) -> equip X5 (binrep (Power (Power (Power (Power Empty)))) Empty)) -> (((~ strictpartialorder_i (fun X7:set => fun X8:set => ((~ SNoLt X7 Empty) /\ (ordinal X7 -> atleast3 X7)))) /\ ((~ TransSet X3) -> exactly5 X6)) /\ (((~ atleastp X5 X5) -> (((~ TransSet Empty) /\ (((ordinal X1 -> (atleast6 X0 /\ (~ SNo_ X5 (binrep (Power (Power (Power Empty))) Empty))) -> (atleast4 (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))) /\ atleast2 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)))) /\ ((~ set_of_pairs X0) -> exactly3 X5)) /\ (((((atleast6 X5 /\ (~ PNoEq_ X0 (fun X7:set => (((~ TransSet X7) -> (~ TransSet X4) -> ((exactly5 Empty /\ (TransSet X0 -> atleast2 X6)) /\ (((atleast3 X7 /\ (~ setsum_p X6)) -> (~ ordinal X6) -> atleast3 X1) -> atleast5 Empty))) -> (exactly4 X7 /\ (((exactly3 Empty -> ordinal X1) -> (~ atleast6 X7)) /\ (~ exactly2 X6)))) -> TransSet X6) (fun X7:set => (~ SNo (binrep (Power (Power (Power (Power Empty)))) (Power Empty)))))) -> exactly4 X5) -> (~ exactly3 X6)) -> tuple_p X6 X6 -> (((~ atleast5 (binrep (Power (Power (Power (Power Empty)))) (Power Empty))) -> exactly5 (Power X4)) -> (~ ordinal X0) -> exactly2 X6) -> (((((~ atleast2 (binrep (Power (Power (Power (Power Empty)))) (Power Empty))) /\ ((~ exactly2 X5) /\ ((reflexive_i (fun X7:set => fun X8:set => ((~ exactly4 X8) /\ ((~ TransSet X8) /\ (exactly4 X8 -> (~ transitive_i (fun X9:set => fun X10:set => (ordinal X4 /\ (TransSet X9 /\ (TransSet X9 -> (~ (X10 :e X9))))))))))) -> ((exactly4 X6 /\ ordinal (binrep X6 X5)) /\ SNo X6)) /\ ((~ exactly5 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))) -> (~ atleast2 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty)))))) -> (~ atleastp X4 X5)) -> ((~ exactly2 X0) /\ ((~ atleast5 X5) -> exactly4 X6))) /\ ((~ TransSet X5) /\ (((((atleast3 X0 -> TransSet X3) -> ((~ exactly3 X5) /\ ((~ ordinal X0) -> atleast4 X0 -> setsum_p X6 -> ((~ atleast2 X2) /\ exactly2 Empty)))) -> atleast3 X6 -> TransSet (UPair X5 X5)) -> (~ atleast2 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)))) -> (((atleast5 X4 -> ((~ atleast4 X6) /\ atleast4 X6)) /\ ((atleast5 X5 /\ exactly3 X6) /\ ((~ setsum_p X5) -> (~ atleast4 X6)))) /\ (~ exactly3 X5)))))) -> (~ setsum_p (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty))))) /\ (~ atleast6 (binrep (Power (Power (Power (Power Empty)))) (Power Empty))))) /\ (exactly2 Empty -> TransSet X5)))) -> (((nat_p X5 -> ((~ exactly5 X5) /\ ordinal X0)) -> ((~ exactly2 Empty) -> nat_p X0 -> ((~ atleast4 X6) -> set_of_pairs X5) -> (~ exactly3 X5)) -> (~ exactly4 (Unj (Power X5)))) /\ ((~ atleast3 X5) -> ((atleast4 X6 /\ (~ atleast2 X4)) /\ SNo_ X5 (Power X4)))))) /\ (~ exactly2 (ordsucc (Inj0 X4)))) -> (~ TransSet X3)) /\ ((~ atleast3 X1) -> ((((~ atleast4 X4) /\ exactly4 (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty)) -> (((SNo X4 /\ (~ ordinal X0)) /\ atleast3 X3) /\ (nat_p X4 /\ (nat_p (ordsucc X2) -> (~ nat_p (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty))))) -> (~ atleast2 X4)) /\ (~ equip (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty) X4)))) /\ (((ordinal Empty -> (~ reflexive_i (fun X5:set => fun X6:set => (nat_p X5 /\ (PNoLe X2 (fun X7:set => TransSet X6 -> ((((nat_p X7 -> atleast4 (UPair X2 (Power (binrep (Power (Power Empty)) Empty))) -> ((~ atleast5 X0) /\ (exactly5 X0 -> (~ nat_p X7)))) -> (atleast2 X7 /\ (set_of_pairs X6 -> (~ atleast6 (Power (Power (Power (Power Empty)))))))) -> setsum_p X4) -> atleast2 X7) -> (exactly5 Empty /\ (X2 :e X6))) X6 (fun X7:set => (~ SNo Empty) -> atleast6 X7) -> ((~ atleast4 X6) -> (~ nat_p X6)) -> (~ (X6 :e X6)))))) -> ((~ atleast3 X4) /\ (~ exactly4 (binrep (Power (Power (Power Empty))) Empty)))) -> (~ exactly3 Empty)) -> tuple_p X3 X0))) -> (setsum_p X3 /\ atleast6 X3) -> exactly3 X1 -> (~ set_of_pairs X3))))))) /\ (atleast6 X2 -> (~ nat_p X4))) /\ (atleastp X4 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) /\ (atleast3 X4 /\ exactly5 X1))) /\ (~ exactly3 X2)))))).
admit.
Qed.

Theorem conj_Random1_TMVixMcejXURDNZndYwXpogcwCpVfq4B7FG: exists X0:set, ((exists X1 :e binrep (Power (Power (Power Empty))) (Power Empty), exists X2:set, ((X2 c= binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty) /\ ((~ atleast2 X2) /\ (~ nat_p (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty))))) /\ (exists X1:set, ((TransSet X1 /\ (~ exactly2 X1)) /\ (exists X2:set, (forall X3:set, ((~ equip X3 Empty) -> (exactly2 X3 /\ exactly4 X2)) -> ((forall X4:set, atleast5 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty))) /\ (forall X4:set, atleast3 X4 -> ((((PNoLe X4 (fun X5:set => ((((PNoLt X2 (fun X6:set => exactly2 X6) X4 (fun X6:set => ((~ atleast4 (V_ X5)) /\ (((~ atleast5 X5) /\ exactly5 X5) -> exactly3 X0 -> ((exactly3 X6 /\ exactly2 X5) /\ ((~ SNo X6) /\ ((SNo (binrep (Power (Power (Power Empty))) (Power Empty)) /\ (((ordinal (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty) -> (TransSet X5 /\ (~ (binrep (Power (Power (Power (Power Empty)))) Empty = X6)))) /\ (((~ atleast2 (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty)) -> atleast3 X4) -> (~ atleast5 X5))) -> stricttotalorder_i (fun X7:set => fun X8:set => atleastp X8 X7))) /\ (~ atleast6 X2)))))) -> (atleastp (Sing X6) X3 /\ (exactly5 Empty /\ (ordinal (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty) -> (~ atleast5 (SNoLev Empty)))))) /\ (((~ atleast3 Empty) /\ (~ SNo X2)) /\ ((~ atleast3 X5) /\ ((((((atleast4 (If_i ((~ exactly5 X2) /\ (~ atleast3 X4)) Empty X4) /\ atleast5 X4) -> (~ TransSet (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)))) -> atleast2 X5 -> (~ atleast3 X5)) /\ ((PNoLt X5 (fun X6:set => equip X2 X2 -> (((~ atleast3 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty)) -> (~ exactly3 X3)) -> (TransSet X5 /\ SNo X5)) -> (atleast2 X6 /\ ((~ exactly5 X1) -> (~ PNo_upc (fun X7:set => fun X8:set -> prop => (((~ X8 X4) /\ (X8 X6 /\ ordinal X6)) /\ ((((~ atleast4 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty)) -> ((binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty c= X0) /\ (~ exactly3 (Inj0 X7)))) /\ ((X8 (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty) /\ (~ atleast6 (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty))) /\ (~ exactly5 (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty)))) /\ (~ atleast5 X7))) -> (exactly4 (V_ Empty) /\ per_i (fun X9:set => fun X10:set => (~ atleast4 X4)))) (nat_primrec (Unj X0) (fun X7:set => fun X8:set => X2) X0) (fun X7:set => ((~ exactly2 X7) /\ nat_p X6) -> (equip X2 Empty /\ TransSet X7)))))) X4 (fun X6:set => transitive_i (fun X7:set => fun X8:set => (~ exactly4 X8))) /\ ((~ TransSet X4) -> (~ set_of_pairs X5))) /\ exactly3 X0)) /\ (((~ ordinal X0) -> (((((((((~ SNo X4) /\ (~ atleast5 X4)) /\ (~ atleastp X2 X1)) -> (~ atleast5 X4)) -> ((SNo_ X4 X5 -> (~ exactly3 X5)) -> (~ atleast2 X2)) -> (~ exactly5 (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty))) /\ ordinal X5) /\ (((~ exactly3 (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty)) -> nat_p X0) /\ (~ atleast6 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty)))) -> (~ atleastp X1 X4)) /\ ((~ nat_p (Union X4)) -> (atleast4 Empty /\ ((binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty :e X0) /\ (set_of_pairs X5 -> (atleast2 X5 /\ (~ atleast3 (ap (ordsucc X4) X4))))))))) -> (atleast2 X4 /\ (ordinal X1 /\ ((atleast5 X0 -> (~ atleast6 (binrep (Power (Power (Power Empty))) (Power Empty)))) -> (~ exactly4 Empty) -> (~ atleast6 (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty))))))) /\ (((~ reflexive_i (fun X6:set => fun X7:set => atleast4 X0)) -> exactly2 (Unj X4)) /\ exactly2 X4)) /\ ((~ atleast2 X4) /\ ((atleast5 X5 -> (~ atleast4 X5)) /\ atleast4 X5)))))) -> ((~ exactly3 X3) /\ atleast6 X4)) -> atleast6 X4) /\ nat_p (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty))) X4 (fun X5:set => exactly5 X3 -> (~ TransSet X5) -> (~ exactly5 Empty) -> (~ atleast6 X4)) -> TransSet X3) -> (((((atleast4 X2 -> (exactly2 X1 -> (~ exactly2 X4)) -> (TransSet X3 /\ SNoEq_ X4 (SetAdjoin X4 X2) (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)))) /\ ((~ exactly3 X1) /\ ((((~ atleast5 X1) -> (~ irreflexive_i (fun X5:set => fun X6:set => (~ atleast4 (Inj0 X6)) -> exactly3 (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty))) -> ((~ exactly5 (ap X3 Empty)) /\ (((~ equip X2 X0) -> (((~ exactly4 X4) -> (atleast3 X2 /\ (exactly3 X0 /\ (~ exactly4 X4)))) -> atleast2 X3 -> ordinal X2) -> ((~ atleast6 X3) -> atleast4 X1) -> atleast2 X3) /\ tuple_p X4 (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty)))) -> ((ordinal X1 /\ (exactly3 X3 -> (X1 :e X4))) /\ ordinal X2)) -> (~ TransSet X4)))) /\ ((((setsum_p X3 -> ((~ exactly4 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))) /\ (~ atleast5 X3))) /\ atleast2 X2) -> SNo X2 -> (~ nat_p X2)) -> (~ exactly2 (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)))))) -> TransSet X4) /\ (~ exactly3 X4))) /\ (((((~ atleast6 X3) /\ ((~ atleast4 X2) /\ (atleast4 X4 -> (~ exactly2 (V_ X0))))) /\ ((atleast4 X0 -> (~ exactly2 X4)) /\ (~ nat_p (Union X3)))) -> (atleast2 X4 -> ((reflexive_i (fun X5:set => fun X6:set => (~ atleast3 X6)) /\ atleast5 X2) /\ (~ atleast5 X3))) -> (((atleast4 (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty) /\ atleast5 X3) -> (atleast6 X2 /\ (~ exactly4 X4))) /\ (ordinal X4 /\ stricttotalorder_i (fun X5:set => fun X6:set => exactly3 X5)))) /\ ((~ atleast5 X3) /\ (~ TransSet X3)))) /\ exactly3 X3)))) -> (exists X3:set, ((X3 c= Empty) /\ exactly3 X1)))))).
admit.
Qed.

Theorem conj_Random1_TMMnUesxvyUL6bRzWvP9pjfWuYUkaxsFnG4: exists X0:set, forall X1 c= X0, (exists X2:set, ((X2 c= X1) /\ ((~ (X2 c= X2)) -> (exists X3:set, (atleast6 (binunion X1 X2) /\ (forall X4:set, (~ totalorder_i (fun X5:set => fun X6:set => (~ atleast5 X5) -> atleast3 X0)) -> ordinal X2)))))) -> (exists X2:set, TransSet X0).
admit.
Qed.

Theorem conj_Random1_TMJ6ZeDUw1aJhA4CfoNYh8F9HCaP5mSdgeF: exists X0:set, ((exists X1:set, ((forall X2 c= X0, ((~ nat_p (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty)) /\ (~ reflexive_i (fun X3:set => fun X4:set => atleast2 X2)))) /\ (~ atleast4 X0))) /\ (exists X1:set, (~ setsum_p X1) -> ((~ atleastp X0 X1) /\ (exists X2:set, ((~ atleast5 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty))) /\ (exists X3:set, (((~ exactly4 X0) -> (exists X4:set, (((atleast6 X2 /\ (~ atleast4 (Power (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty)))) -> ordinal X4) /\ (((~ atleast5 X3) -> ((~ atleast5 X2) /\ ((((exactly5 X0 -> ((~ atleast2 X4) /\ (~ atleast4 X4))) /\ (~ exactly4 X4)) -> ordinal X4) -> (~ (X3 :e X3)))) -> (~ exactly3 X3)) /\ (~ TransSet X4))))) /\ (exists X4:set, ((X4 c= X2) /\ (((~ exactly5 X2) /\ ((~ exactly4 X2) -> ((((~ TransSet X4) /\ ordinal X4) -> (~ reflexive_i (fun X5:set => fun X6:set => atleast4 X5))) /\ ((ordinal X3 /\ exactly2 X1) -> (~ (Power (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) = X3)))))) -> atleast4 X4)))))))))).
admit.
Qed.

Theorem conj_Random1_TMbYhqVfLkEJK36z7kmbrVppsmkprngBiAs: exists X0:set, ((X0 c= binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) /\ (forall X1:set, (((exists X2:set, (atleast5 X2 /\ (exists X3:set, ((X3 c= X0) /\ (exists X4:set, (~ nat_p X0)))))) /\ (forall X2:set, exists X3:set, exists X4:set, (~ atleast6 X4))) -> (exists X2:set, ((X2 c= Empty) /\ exactly3 X0)) -> (forall X2:set, (forall X3 c= SetAdjoin (add_nat X1 X1) X0, atleast2 X2) -> (((exists X3:set, (((exists X4 :e X0, (((~ TransSet X2) /\ exactly4 X1) /\ (strictpartialorder_i (fun X5:set => fun X6:set => (atleast3 X5 -> (reflexive_i (fun X7:set => fun X8:set => atleast6 X8 -> ((((~ ordinal (SNoElts_ X4)) -> (~ atleast3 X5)) -> (atleast5 X8 /\ exactly3 (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty))) /\ (((binrep (Power (Power (Power Empty))) Empty = binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty) -> (~ nat_p (Power (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty)))) -> (~ exactly5 X7) -> exactly4 X7 -> ((TransSet (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty) /\ (~ exactly4 (binrep (Power (Power (Power (Power Empty)))) (Power Empty)))) /\ (~ atleast6 X7))))) /\ (~ exactly5 X3)) -> (~ atleast5 X6)) -> (~ atleast6 X6)) -> (((TransSet X3 -> (~ exactly2 X3)) /\ (atleast2 X0 /\ ((~ atleast5 X2) /\ exactly3 X3))) /\ SNoLt X4 X1)))) /\ exactly3 X3) /\ (exists X4:set, ((X4 c= X3) /\ SNo X3)))) /\ (forall X3:set, (exists X4 :e X2, nat_p X2) -> (forall X4:set, ((~ exactly5 X3) /\ ((set_of_pairs X4 /\ (~ atleast4 X1)) /\ (exactly4 X4 -> atleast4 X3)))))) /\ (exists X3 :e X0, exists X4:set, ((atleast5 X0 /\ setsum_p X3) /\ (((Power (Power (Power (Power Empty))) c= X4) -> atleast4 X4) /\ ((~ ordinal (binrep (Power (Power (Power (Power Empty)))) Empty)) -> (~ PNo_downc (fun X5:set => fun X6:set -> prop => (~ X6 X0)) (Power (Power (Power (Power Empty)))) (fun X5:set => set_of_pairs X5)))))))) -> (forall X2:set, forall X3 :e X2, forall X4:set, ((~ atleast6 X2) /\ exactly3 X4))) -> (forall X2:set, (atleast5 X1 /\ (forall X3:set, ((~ atleast3 X2) /\ exactly4 X1) -> exactly5 X2)) -> (~ exactly4 X1)))).
admit.
Qed.

Theorem conj_Random1_TMQiDXhTCVnrSXBHVmekCdagS2svJjizXE2: exists X0:set, ((X0 c= proj0 (binrep (Power (Power (Power Empty))) Empty)) /\ (forall X1:set, exists X2:set, ((X2 c= mul_nat X1 X1) /\ (forall X3:set, (exists X4:set, ((equip (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))) X3 /\ ((atleast2 (binrep X3 X4) -> atleast2 X4 -> (~ atleast3 X4)) -> ((((tuple_p X4 X4 -> (((exactly2 (V_ X1) /\ atleast5 X2) -> (setsum_p X3 /\ (((~ atleast2 X4) /\ (((reflexive_i (fun X5:set => fun X6:set => (~ antisymmetric_i (fun X7:set => fun X8:set => exactly4 (binunion X7 X8)))) /\ ((~ nat_p X4) /\ SNoLe (ordsucc (binrep (Power (Power (Power (Power Empty)))) Empty)) X4)) /\ (partialorder_i (fun X5:set => fun X6:set => (~ atleast5 X0)) /\ atleast6 X3)) /\ ((nat_p (Power (Power (Power (Power Empty)))) -> ((~ atleast3 X3) /\ (((TransSet (ordsucc X1) -> ((~ exactly2 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))) /\ exactly3 X3)) -> ordinal X4) /\ ((~ atleast5 (binrep (Power (Power (Power (Power Empty)))) (Power Empty))) -> (~ atleast5 X4))))) /\ ordinal X4))) -> ((~ linear_i (fun X5:set => fun X6:set => (atleast4 X3 /\ ((~ atleast2 Empty) -> ((atleast5 (binrep (Power (Power (Power Empty))) (Power Empty)) /\ (~ atleast6 X5)) /\ (~ exactly4 (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty))))))) /\ (~ nat_p X4))))) /\ (~ atleast2 X4))) -> (~ atleast2 X0)) -> TransSet X4) /\ (~ exactly4 (ordsucc X3))))) /\ (atleast3 Empty -> (((~ atleast3 Empty) -> (~ ordinal X0) -> (~ SNo X3)) /\ (~ atleast6 X2))))) -> (forall X4 :e X3, atleast5 X4))))).
admit.
Qed.

Theorem conj_Random1_TMLwHSFQaUB3Hx7W8hXJQ6tm4WuKxmknstB: forall X0:set, (forall X1 :e V_ (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty), forall X2:set, (forall X3 :e Empty, atleast5 (binrep (Power (Power (Power (Power Empty)))) Empty) -> (exists X4:set, atleast5 (binrep (Power (Power (Power Empty))) Empty))) -> (exists X3 :e X1, atleast3 X2)) -> (forall X1 :e X0, ((forall X2 c= X1, (forall X3:set, atleast2 X3 -> (~ atleast2 X1)) -> (exists X3 :e X0, exists X4:set, exactly2 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty) -> (exactly5 X4 /\ (exactly4 (If_i ((((SNoLt X3 X4 /\ (~ atleast3 X2)) /\ (atleast3 X4 -> (set_of_pairs X0 /\ (atleast2 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) /\ (~ atleast2 X3))))) -> (((TransSet X0 -> (~ atleast6 X4)) /\ ((X4 :e binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty) -> (~ exactly2 X3))) /\ ((~ exactly5 X3) -> (~ ordinal (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty))))) -> TransSet X4) (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty) X2) -> (~ atleast4 X0))) -> (~ atleast3 (binrep (Power (Power (Power Empty))) (Power Empty))))) /\ (exists X2:set, ((forall X3:set, atleast6 X1) /\ (~ setsum_p (Power (Power (Power (Power Empty))))))))).
admit.
Qed.

Theorem conj_Random1_TMNrmQKowNAQnFa6q3vRC2Rr5R1yBULQbX6: exists X0:set, ((X0 c= binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty) /\ (exists X1:set, ((X1 c= X0) /\ (((~ nat_p X1) /\ (exists X2:set, exists X3:set, ((X3 c= X0) /\ (exists X4:set, ((~ strictpartialorder_i (fun X5:set => fun X6:set => atleast4 X6)) /\ (((~ atleast4 X0) /\ equip X3 X1) -> ordinal X2)))))) -> (~ nat_p X1) -> (forall X2:set, (TransSet X2 -> exactly5 X1) -> ((exists X3:set, forall X4 c= binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty, exactly1of2 (~ exactly3 X3) (nat_p X3 -> atleast4 X4)) /\ (exists X3:set, ((forall X4 :e X3, atleast5 X4) /\ (((forall X4 c= binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty), ((~ SNo X4) /\ (((~ exactly2 X3) /\ (~ atleast2 X0)) /\ (((~ atleast5 (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty)) -> (exactly5 (Union X3) /\ (((((((per_i (fun X5:set => fun X6:set => (SNoLt X6 Empty /\ (~ set_of_pairs X6)) -> (X3 c= X0)) -> nat_p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty)) /\ (~ TransSet (binrep (Power (Power (Power (Power Empty)))) (Power Empty)))) -> (~ atleast5 X3)) -> exactly4 X3) /\ ((~ atleast2 X4) /\ ((~ atleast5 X2) -> (~ atleast4 X4) -> atleast5 X4))) /\ nat_p (binrep (Power (Power (Power Empty))) (Power Empty))) /\ exactly2 (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)))))) /\ ((~ atleast3 X3) /\ (~ atleast2 X4)))))) -> (exists X4:set, ((X4 c= X1) /\ atleast3 X4))) -> (forall X4:set, (~ atleast2 X0) -> nat_p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)))))))))))).
admit.
Qed.

Theorem conj_Random1_TMVZ7DXgx9MNNfQgScWd3d2jWQT4skiP3gZ: forall X0 :e Sing Empty, exists X1:set, forall X2:set, atleast3 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty) -> ((forall X3 :e X0, forall X4:set, (~ (X4 c= X3)) -> equip (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty) X3 -> (TransSet X2 /\ (~ exactly3 X4))) /\ (forall X3:set, exists X4:set, ((~ setsum_p X3) /\ exactly5 X2))).
admit.
Qed.

Theorem conj_Random1_TMGRGzitdJRMjtMUfsBzgPf22qu9F5cwJ2A: exists X0:set, ((exists X1:set, ((forall X2:set, exists X3:set, ((forall X4:set, (~ atleast5 (binunion X3 X4)) -> (~ exactly4 X4)) /\ (exists X4 :e X3, exactly2 X1 -> (atleast6 X4 /\ ((~ atleast6 (binrep (Power (Power (Power Empty))) Empty)) /\ (~ exactly3 X4))) -> (SNo_ (Inj1 X2) (Power (binrep (Power (Power Empty)) Empty)) /\ (exactly2 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) -> exactly4 (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty) -> setsum_p X4)))) -> (exists X4:set, (((~ (X4 :e X3)) -> exactly5 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty))) /\ (((~ nat_p X3) /\ (~ exactly3 X4)) /\ ((~ setsum_p X1) /\ (atleast3 X3 -> (~ exactly3 (Power (binrep (Power (Power Empty)) Empty))))))))) /\ (forall X2 c= Empty, exists X3:set, ((exists X4:set, ((~ exactly2 X0) /\ ((~ SNo X2) /\ ((((((exactly2 X3 /\ (SNoLt (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty) (Union X2) -> atleast3 Empty -> exactly2 X3 -> (~ (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)) :e X3)))) /\ TransSet Empty) /\ ((X2 :e X3) -> exactly3 Empty)) -> nat_p (binrep (Power (Power (Power (Power Empty)))) Empty)) /\ exactly3 X4) /\ ((((~ atleast6 X3) -> (~ atleast4 (Pi X2 (fun X5:set => X4)))) -> ((setsum_p X4 /\ (~ ordinal X2)) /\ (((~ atleast5 X2) -> TransSet X0) -> SNo_ X3 X0))) /\ SNo (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty))))))) /\ (forall X4:set, ((~ exactly4 (binrep (Power (Power (Power Empty))) (Power Empty))) -> (setsum_p X2 /\ ((atleast4 X2 -> (~ atleast3 (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty))) /\ (~ atleast6 (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))))))) -> exactly4 X4))))) /\ (forall X1 :e X0, (exists X2:set, ((exists X3:set, forall X4:set, (~ exactly4 X3)) /\ exactly5 X2)) -> (~ atleast5 X1))).
admit.
Qed.

Theorem conj_Random1_TMdMRveZy7wUJYeTMY4YLEM3pAys2kTnK9y: forall X0 c= Power (Power (Power (Power Empty))), exists X1:set, ((atleast6 Empty -> (exists X2:set, ((X2 c= Empty) /\ (exists X3:set, ((~ atleast6 (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)) /\ (forall X4 :e X2, (~ SNoLt (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) X0))))))) /\ ((exists X2:set, ((X2 c= X1) /\ (exists X3:set, ((exists X4 :e binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty, atleast6 X3) /\ atleast2 (Power (Power (Power (Power Empty)))))))) -> (forall X2 c= X0, forall X3 :e X2, exists X4 :e X2, (atleast3 X4 /\ (~ set_of_pairs (binrep (Power (Power (Power (Power Empty)))) Empty)))))).
admit.
Qed.

Theorem conj_Random1_TMYeaSSwNJXtruA4Pc2oMUzyFq9jDp3KFVV: exists X0:set, ((forall X1 :e binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty, ((((~ atleast6 Empty) -> (exactly3 X1 /\ ((forall X2 c= binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty, exactly5 X1) /\ ((exists X2:set, ((exists X3:set, ((forall X4 c= Power (binrep (Power (Power Empty)) Empty), ((((((~ atleast4 (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty)) /\ nat_p (Sep2 X4 (fun X5:set => binrep (Power (Power (Power (Power Empty)))) (Power Empty)) (fun X5:set => fun X6:set => TransSet (Sing Empty)))) /\ ((exactly4 (Power (Power (Power (Power Empty)))) -> (~ SNoLe Empty X4)) /\ (~ ordinal (lam2 (PSNo X0 (fun X5:set => (atleast5 X5 -> (atleast5 (binrep (Power (Power (Power Empty))) Empty) /\ (((exactly5 X5 -> ((~ exactly4 X3) -> tuple_p X5 X5) -> ((atleast3 Empty /\ ((~ atleast2 (Union X5)) /\ (~ atleast6 X1))) /\ ((X5 c= X4) /\ (~ exactly2 X4))) -> (ordinal (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) /\ ((~ atleast2 X3) -> ((((~ ordinal X3) /\ ((((~ exactly5 (Power (Power (Power (Power Empty))))) /\ ((~ exactly2 (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty)) /\ ordinal X1)) /\ ((((atleast6 X2 -> ((((((((((~ atleastp X4 X5) -> nat_p X2) /\ (~ setsum_p X3)) /\ (eqreln_i (fun X6:set => fun X7:set => (~ tuple_p X6 (Union X7))) /\ exactly4 (binintersect X5 X4))) /\ (~ exactly2 Empty)) /\ (~ atleast6 X5)) -> ((atleast2 X1 /\ (~ exactly2 X1)) /\ (~ TransSet X4))) -> TransSet X4 -> (~ atleast2 X3)) -> exactly3 (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)) /\ (~ exactly2 X0))) /\ exactly4 X4) -> (~ atleast6 X5)) -> ((((setsum_p X5 /\ ((exactly5 X4 -> SNo X0) -> (~ atleast2 X0))) /\ (~ exactly3 X5)) -> atleast3 X1 -> exactly5 X5) /\ (((atleast4 X4 -> (~ exactly5 X4) -> ((~ nat_p X5) /\ ((~ exactly4 (Power (Power (Power (Power Empty))))) -> atleast5 X4))) -> ((exactly3 X4 -> (TransSet X5 /\ (~ atleast6 X2))) /\ atleast3 X4)) -> ((~ atleast5 X1) /\ (~ SNo X2)))))) /\ SNo X0)) -> (((tuple_p X5 X4 /\ (((~ (X0 = X5)) /\ (((~ atleast3 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty)) /\ ((~ atleast5 (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty)) -> (~ ordinal X4))) -> (~ atleast4 X4))) -> ordinal X5 -> (((((~ nat_p Empty) /\ atleast5 X5) -> ((~ exactly3 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty))) /\ exactly3 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))))) -> (~ nat_p X1)) /\ (atleast6 Empty /\ ((~ nat_p (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)) -> (~ SNo_ X5 X4) -> ((atleast2 X4 /\ (~ tuple_p X5 X5)) /\ (~ atleast5 X4))))) -> ((~ exactly3 X4) /\ (~ exactly4 X2)))) -> atleast6 X1 -> (~ atleast3 (Power (Power (Power (Power Empty))))) -> (~ atleast6 X1)) /\ atleast3 X5)) /\ ((exactly5 X4 -> atleast5 X5) /\ (((atleast2 X4 /\ ((X5 :e X3) /\ setsum_p X5)) -> exactly2 X5 -> (~ TransSet X5)) /\ (((exactly3 X5 /\ (~ (SNoElts_ (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty) :e X4))) /\ ((symmetric_i (fun X6:set => fun X7:set => ((~ (X6 :e X6)) /\ (~ atleast5 X7)) -> equip X7 X7) /\ ((~ atleast5 X5) -> (~ atleast4 (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty)) -> (~ ordinal X4))) -> (~ nat_p X5) -> (((~ atleast2 X2) -> (exactly2 Empty /\ (~ exactly4 Empty))) /\ ordinal (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty)))) /\ (X4 c= X2)))))))) -> (exactly4 X5 /\ TransSet X3)) /\ ((exactly5 X5 -> (exactly2 X4 /\ atleast5 X4)) -> ((((~ TransSet (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty)) -> exactly3 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty))) /\ (nat_p (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty) -> atleast2 X4 -> exactly2 X0 -> nat_p (binintersect X0 X4) -> atleast5 X4 -> (~ ordinal X4))) /\ (~ ordinal X3)))))) -> exactly5 Empty)) (fun X5:set => X4) (fun X5:set => fun X6:set => X2))))) /\ (~ atleast6 X1)) -> atleast4 X0) /\ (~ SNoLt (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty) (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty)))) /\ (exists X4:set, ((X4 c= X0) /\ (~ exactly4 Empty))))) /\ (exists X3:set, ((X3 c= X2) /\ (~ atleast3 (Sing X2)))))) -> (exists X2:set, forall X3 :e X1, ((forall X4:set, (~ ordinal X3) -> (atleast3 X4 /\ ((~ ordinal X4) -> ((Empty c= X4) /\ (~ ordinal X2))))) /\ (exists X4 :e binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty), exactly2 X2))))))) /\ (~ exactly5 X0)) /\ (exists X2:set, (((~ atleast5 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))) -> SNoLe X1 (binrep (Power (Power (Power (Power Empty)))) Empty)) /\ ((exists X3 :e X0, (X0 :e X3)) /\ (((~ setsum_p (binrep (Power (Power (Power Empty))) (Power Empty))) -> atleast4 X2) /\ (forall X3 :e X1, exists X4:set, ((X4 c= X2) /\ ((~ PNoLe X0 (fun X5:set => (((~ ordinal X3) /\ ((~ atleast2 X5) /\ (~ atleast6 X5))) /\ (~ atleast6 X2))) Empty (fun X5:set => setsum_p X5)) -> ((~ TransSet (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty)) /\ ((((~ atleast5 Empty) /\ (~ atleast3 X4)) -> atleast2 X4) -> (~ atleast3 X2) -> atleast5 X3))))))))))) /\ (forall X1 :e setprod (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))), (exists X2:set, forall X3 c= X1, exactly4 X2) -> ((forall X2 c= X1, forall X3 c= X1, forall X4 :e Empty, (exactly5 X0 /\ (X2 = X0))) /\ (exists X2:set, ((X2 c= X0) /\ (~ exactly3 X2)))))).
admit.
Qed.

Theorem conj_Random1_TMREXQphuHq9Dvfg2xNWBvgSUGbgkuSnw5W: exists X0:set, ((forall X1 c= X0, exists X2:set, (~ exactly3 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)))) /\ (forall X1:set, exists X2:set, ((X2 c= binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) /\ (forall X3:set, ((~ exactly2 X2) /\ (~ atleast4 X0)) -> (~ exactly5 (UPair X2 X2)))))).
admit.
Qed.

Theorem conj_Random1_TMTjkNWK8NAMcwjKeVU1h6xcJ6dMs6LN8dT: forall X0 :e binrep (Power (Power (Power Empty))) Empty, forall X1:set, ((exists X2 :e binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty, forall X3:set, (exists X4 :e X3, atleast6 X3) -> (exists X4:set, ((atleast3 (V_ X2) -> (((~ exactly4 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty))) /\ set_of_pairs X4) /\ (~ totalorder_i (fun X5:set => fun X6:set => ((~ set_of_pairs Empty) /\ ((exactly4 (binrep (Power (Power (Power (Power Empty)))) Empty) -> (~ exactly4 X5)) -> ((~ SNoLe X6 X5) /\ (~ atleast5 X2)))))))) /\ (((~ exactly5 (Power (Power (Power (Power Empty))))) /\ (reflexive_i (fun X5:set => fun X6:set => atleast6 X2) -> (~ (Power (Power (Power (Power Empty))) :e Power (Power (Power (Power Empty))))))) -> ((((~ atleast2 X2) -> ((~ exactly5 X3) /\ atleast2 X1)) -> (~ exactly3 X4)) /\ (((~ atleast3 X2) /\ (~ exactly2 X4)) /\ ((~ atleast3 X4) -> (~ atleast3 X4)))) -> (~ atleast6 X3))))) -> ordinal X0) -> (forall X2:set, ((exists X3:set, ((X3 c= Empty) /\ (~ atleast3 (Power (Power (Power (Power Empty))))))) -> nat_p X1) -> (exists X3 :e X0, exists X4 :e Unj X3, inj (binrep (Power (Power (Power Empty))) Empty) (binunion X1 X4) (fun X5:set => binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty))).
admit.
Qed.

Theorem conj_Random1_TMRUFsZWoiozZr1cMsZUie61yhWWcVs5hML: exists X0:set, ((X0 c= binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) /\ (forall X1 :e UPair X0 X0, forall X2:set, forall X3:set, (((~ atleast2 Empty) /\ (forall X4:set, (~ atleast4 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty))) -> exactly5 (binrep (Power (Power (Power (Power Empty)))) Empty) -> (~ exactly5 X3) -> (exactly5 (Inj1 X4) /\ ((~ set_of_pairs X3) /\ (~ set_of_pairs X4))) -> ((exactly4 X4 /\ ((~ atleast4 X4) -> exactly5 X4)) /\ (~ exactly5 X4)))) /\ ((((~ setsum_p (setsum X0 X0)) /\ (~ atleast6 X0)) -> (forall X4:set, (~ atleast5 (ordsucc X2)) -> (~ nat_p X2))) -> atleast6 (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty))))).
admit.
Qed.

Theorem conj_Random1_TMRwYWsqPf79Ubk6dYfLXVwXGu1yvJMDyB5: exists X0:set, ((exists X1:set, (nat_p X0 /\ (exists X2 :e X1, exists X3:set, ((X3 c= binrep (Power (binrep (Power (Power Empty)) Empty)) Empty) /\ (((forall X4:set, (~ atleast3 X0) -> (~ ordinal Empty) -> (~ atleast4 X3)) -> (forall X4 c= X1, exactly4 (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))))) /\ (exists X4:set, (~ atleast5 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))))))))) /\ (exists X1:set, ((X1 c= Empty) /\ (forall X2:set, (exists X3 :e X2, exists X4:set, (TransSet X3 /\ TransSet X2)) -> setsum_p (binrep (Power (Power (Power Empty))) (Power Empty)) -> ordinal Empty -> (exists X3:set, ((forall X4 :e X2, (~ atleast6 X1)) /\ ((exists X4 :e X2, atleast6 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty))) /\ (exists X4:set, ((X4 c= binrep (Power (Power (Power Empty))) (Power Empty)) /\ exactly3 X4))))))))).
admit.
Qed.

Theorem conj_Random1_TMdJRMR59W1AcGaHbAjpQL9jE2u9MQAgVuW: forall X0:set, forall X1 :e X0, (forall X2 :e X0, forall X3:set, (forall X4:set, (~ TransSet X2)) -> (exists X4 :e Empty, ((~ linear_i (fun X5:set => fun X6:set => (((~ SNo X5) -> ((~ nat_p (Inj0 (Power (binrep (Power (Power Empty)) Empty)))) /\ ((~ linear_i (fun X7:set => fun X8:set => ((atleast3 Empty /\ ((((SNo X7 -> set_of_pairs X2) -> (atleast2 X8 /\ (atleast5 X2 /\ nat_p X8))) /\ (exactly3 X5 -> ((~ nat_p X2) /\ (nat_p X7 -> atleast6 X8 -> (~ nat_p X6))) -> ((TransSet X7 -> exactly4 Empty) /\ atleast5 X8))) /\ ((atleast5 X8 -> partialorder_i (fun X9:set => fun X10:set => (~ exactly3 (Repl X10 (fun X11:set => X11)))) -> ((atleast5 X0 /\ ((X8 :e X5) -> ((~ atleast5 X8) /\ (atleast3 (proj1 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))) -> (((exactly4 Empty /\ ((~ TransSet X2) -> (((exactly5 (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty) -> nat_p X8) -> exactly4 X8) /\ nat_p X7) -> (~ setsum_p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))))) /\ (exactly4 X8 /\ (TransSet X5 /\ (~ atleast5 (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))))))) /\ (X7 c= X4)))))) /\ (~ atleast3 X0))) /\ (~ exactly5 X7)))) -> (((~ ordinal X7) -> binop_on (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty) (fun X9:set => fun X10:set => X5)) /\ ((((~ exactly5 X8) -> exactly2 X7) /\ ((~ (X7 :e SNoElts_ X7)) -> atleast3 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)))) /\ (((X3 :e X3) -> (~ atleast2 X7)) -> (atleast4 X8 /\ ((exactly2 X7 -> (~ exactly2 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)))) /\ atleast2 Empty)))))) -> atleast5 (V_ (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)))))) -> (X6 :e binrep (Power (Power (Power (Power Empty)))) (Power Empty))))) -> ((((((atleast3 X5 -> (~ atleast4 (Unj X6))) -> (~ atleast2 X2) -> (((~ setsum_p X5) /\ ((((~ atleast6 X5) -> setsum_p X2) /\ exactly2 X6) /\ exactly4 X5)) /\ ((exactly5 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) /\ (SNo X5 /\ atleast6 (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty))) /\ ((~ exactly3 (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty)) -> (~ exactly5 X5))))) /\ exactly3 X0) /\ ((SNo Empty /\ (((~ set_of_pairs X6) -> (((~ nat_p X5) /\ exactly5 (binrep (Power (Power (Power (Power Empty)))) Empty)) /\ (~ set_of_pairs X3))) /\ (~ atleast5 (binrep (Power (Power (Power (Power Empty)))) (Power Empty))))) /\ set_of_pairs X0)) /\ ((set_of_pairs X5 /\ (~ PNo_upc (fun X7:set => fun X8:set -> prop => TransSet X4) X5 (fun X7:set => (((atleast4 X0 -> per_i (fun X8:set => fun X9:set => exactly4 X5)) -> (~ atleast2 X5)) /\ exactly3 X6)))) -> (~ atleast5 X6))) /\ exactly5 X6)) -> (~ exactly2 (Power (binrep (Power (Power Empty)) Empty))))) /\ (~ setsum_p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)))) -> (X3 :e X3))) -> (forall X2 :e X1, (exists X3:set, ((exists X4 :e X2, exactly2 X0) /\ (forall X4:set, ((~ (Empty c= Sing (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))))) /\ (~ exactly2 X3))))) -> ((exists X3:set, (((forall X4:set, ((((((atleast5 Empty /\ (((~ PNoEq_ X3 (fun X5:set => (~ exactly2 Empty) -> (~ ordinal X3)) (fun X5:set => (((((~ atleast3 X5) /\ (~ nat_p X2)) /\ ((~ atleast5 X5) /\ ((((~ exactly5 X5) -> (~ atleast5 (binrep (Power (Power (Power Empty))) (Power Empty)))) -> (((((atleast3 X5 /\ (((nat_p (binrep (Power (Power (Power (Power Empty)))) Empty) -> ((~ exactly4 (Power (Power (Power (Power (Power Empty)))))) /\ atleast2 (Inj1 X1))) /\ ((~ atleast2 (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty)) /\ atleast5 X4)) -> (~ atleast6 X1) -> exactly5 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)))) /\ ((exactly5 X1 -> (~ exactly4 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)))) -> atleast3 X4)) /\ ordinal X5) /\ (~ nat_p X5)) /\ SNo X4)) /\ exactly3 X2))) -> (~ nat_p X4)) -> (((~ atleast6 X4) -> (~ tuple_p X2 Empty)) -> (~ partialorder_i (fun X6:set => fun X7:set => (((atleast3 X7 /\ (atleast3 (Power X2) /\ (~ ordinal X1))) -> (((exactly3 X4 -> (exactly4 X6 /\ (~ atleast6 (binrep (Power (Power (Power (Power Empty)))) Empty)))) /\ (atleast6 Empty /\ atleast5 Empty)) /\ (~ reflexive_i (fun X8:set => fun X9:set => (~ ordinal X8))))) /\ exactly3 X6)))) -> (X1 = X0)) -> (~ atleast4 X2))) -> (~ exactly4 X3)) -> (~ tuple_p X4 X4))) -> (~ atleast3 (binrep (Power (Power (Power Empty))) (Power Empty)))) -> (atleast4 X4 /\ (~ atleast6 (SetAdjoin X3 X4)))) /\ TransSet X3) /\ (~ exactly2 X3)) /\ (exactly3 X2 -> (~ ordinal (binunion (Power (binrep (Power (Power Empty)) Empty)) X4)))) -> (((~ atleast2 X3) -> (~ atleast4 X4)) /\ (((ordinal X2 /\ (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)) c= X4)) -> (~ (X3 = Empty)) -> (~ nat_p X0) -> ((exactly2 X2 -> (~ (X4 :e Empty))) /\ atleast6 X2)) /\ (~ exactly4 X4)))) -> (exists X4:set, exactly2 (Pi Empty (fun X5:set => X4)))) /\ (((exists X4:set, ((((atleast3 X4 -> (~ exactly3 X0)) -> ((atleast2 (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))) /\ (tuple_p (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty) X2 /\ (~ tuple_p X4 X4))) /\ (((atleast6 X2 -> ((atleast2 X4 -> (ordinal X4 /\ (~ equip X4 X0))) /\ setsum_p X3)) /\ atleast2 X3) /\ (X3 :e X2))) -> (~ setsum_p X4)) /\ (~ SNo X1)) /\ (((~ exactly5 X2) -> atleast3 X4) -> ((exactly4 X4 /\ (~ TransSet X3)) /\ (((PNoEq_ X4 (fun X5:set => (exactly2 X3 -> ((((~ atleast6 X5) /\ exactly4 X5) /\ (atleast3 Empty /\ (X4 :e SNoElts_ (binrep (Power (Power (Power Empty))) (Power Empty))))) /\ atleast4 (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty))) -> (((exactly4 X4 -> ((tuple_p X5 X0 -> exactly2 X5) /\ (~ exactly5 X4))) -> (~ exactly5 X4)) /\ ((exactly4 X0 -> exactly5 X5) -> (((((atleast4 (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))) -> setsum_p (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty)) /\ (~ set_of_pairs Empty)) -> (~ set_of_pairs X4)) /\ (exactly3 X4 /\ (~ atleast2 X2))) /\ exactly5 (Power (binrep (Power (Power Empty)) Empty)))))) (fun X5:set => reflexive_i (fun X6:set => fun X7:set => (~ atleastp (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty) (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)))) -> (((~ totalorder_i (fun X5:set => fun X6:set => ((~ atleast3 Empty) -> (~ exactly4 Empty)) -> exactly3 X6)) /\ (atleast2 X2 -> atleast4 Empty)) /\ (~ exactly3 X4)) -> ((~ atleast4 X3) /\ (~ setsum_p X4))) /\ TransSet (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))) -> atleast2 X4))))) /\ (exists X4:set, ((X4 c= X2) /\ (~ set_of_pairs (Power (binrep (Power (Power Empty)) Empty)))))) /\ TransSet X3))) -> (forall X3:set, (forall X4 :e X2, linear_i (fun X5:set => fun X6:set => (~ TransSet X4))) -> (forall X4:set, exactly3 (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)))) -> (forall X3:set, forall X4 c= binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty, (~ trichotomous_or_i (fun X5:set => fun X6:set => exactly3 Empty)))).
admit.
Qed.

Theorem conj_Random1_TMS8NB7tnwudKx67dxN9YKoBeqtFxRAJPZg: exists X0:set, ((X0 c= binrep (Power (Power (Power (Power Empty)))) Empty) /\ (forall X1:set, (exists X2:set, nat_p X2) -> ((forall X2:set, (forall X3:set, (~ atleast5 X1)) -> (forall X3:set, forall X4 :e X2, setsum_p X2)) /\ ((~ symmetric_i (fun X2:set => fun X3:set => forall X4 c= binunion X2 X2, atleast3 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty))) -> ((~ (X0 c= X1)) /\ (exists X2:set, (atleast6 X0 /\ (exists X3:set, exists X4 :e X2, reflexive_i (fun X5:set => fun X6:set => (~ exactly4 X0) -> (~ nat_p Empty) -> ((~ atleast4 X5) /\ (~ atleast6 (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty)))))))))))).
admit.
Qed.

Theorem conj_Random1_TMYXUPQjhRehxqq6sx1MSzgoN8azJABGN62: exists X0:set, forall X1:set, (forall X2 :e X0, (forall X3:set, (~ PNo_downc (fun X4:set => fun X5:set -> prop => (((~ exactly5 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))) /\ (SNo X2 -> ((((atleast3 X4 -> ((~ X5 X3) /\ (set_of_pairs X4 -> (exactly2 (binrep (Power (Power (Power Empty))) (Power Empty)) /\ ((X5 X4 -> (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty c= X4)) /\ (~ X5 (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty)))))) -> (~ X5 X1)) -> X5 X4) -> atleast5 (mul_nat X0 (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))))) /\ X5 X2) -> exactly3 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) -> X5 X0)) /\ (~ X5 X0))) X3 (fun X4:set => (SNo X2 /\ TransSet X1) -> (((~ exactly3 Empty) /\ (((TransSet X0 -> PNoLt_ X3 (fun X5:set => (~ atleast6 X4) -> atleast6 X4) (fun X5:set => (~ ordinal X1)) -> (nat_p (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty) /\ exactly5 (proj1 (SNoElts_ (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty))))) /\ (exactly3 X3 -> (~ TransSet (SNoLev X3)))) -> atleast6 X2 -> atleast3 X4)) /\ (~ exactly3 X4)))) -> atleast2 (Power (binrep (Power (Power Empty)) Empty))) -> (forall X3 :e X2, forall X4:set, atleast6 X3)) -> (exists X2:set, ((X2 c= binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) /\ (forall X3:set, ((forall X4:set, (atleast2 X3 /\ (set_of_pairs X2 /\ (~ strictpartialorder_i (fun X5:set => fun X6:set => atleast3 X0 -> atleast3 X5 -> ((atleast6 X1 /\ (((((Empty = X6) -> TransSet X6) -> (~ atleast3 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty))) /\ ((~ SNoLt Empty X6) /\ (PNo_upc (fun X7:set => fun X8:set -> prop => (~ X8 X7)) X6 (fun X7:set => (~ atleast3 X7)) -> ((~ nat_p Empty) /\ (~ atleast4 X0))))) -> (~ (X2 :e binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty)))) /\ atleast3 X6))))) -> atleast4 X3) /\ (exists X4:set, ((((exactly2 X3 /\ (exactly5 X2 /\ exactly3 X0)) -> (~ reflexive_i (fun X5:set => fun X6:set => (~ atleast3 X0))) -> ((~ setsum_p X3) /\ ((X4 c= Power (Power (Power (Power Empty)))) -> (((atleast4 X1 -> (~ exactly2 X3)) /\ (~ atleast5 X4)) -> exactly3 X3 -> (~ (X1 :e X4))) -> (((((~ setsum_p X3) /\ (~ exactly1of2 (~ ordinal (Sing (Power (binrep (Power (Power Empty)) Empty)))) (exactly3 X4 -> exactly5 X3))) -> (~ exactly2 X4) -> ordinal X4) -> (~ exactly3 X2)) /\ ((((((Empty :e Empty) -> ((SNo X4 -> (nat_p X3 -> (~ TransSet X1)) -> atleast3 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty))) /\ ((~ atleast5 X3) -> atleast5 X2 -> atleast5 X3))) -> setsum_p X3 -> nat_p Empty) /\ (atleast4 (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty) -> (~ SNo X4) -> (X4 = X0))) -> equip X1 (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty)) -> (~ atleast3 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))))))))) /\ ((~ TransSet X1) /\ (atleast4 X0 /\ (~ exactly4 X4)))) /\ (~ exactly4 X4)))) -> (exists X4 :e X1, (~ set_of_pairs X3) -> (((atleast3 X0 /\ ((~ exactly3 X4) -> (~ exactly2 X3))) /\ ((~ atleast6 X2) /\ ((((~ atleast6 X0) /\ ((~ exactly3 (Sep X0 (fun X5:set => (~ TransSet X4)))) /\ TransSet X3)) -> (((((~ exactly5 Empty) -> ((atleast3 X3 /\ (~ exactly2 X3)) /\ atleast2 Empty)) -> (~ atleast4 X4)) -> atleast5 X3) -> (~ set_of_pairs X4)) -> atleast2 X2) -> ordinal X4))) /\ ((eqreln_i (fun X5:set => fun X6:set => SNo X0) -> ((~ exactly5 (binrep (Power (Power (Power Empty))) Empty)) /\ SNoLe X2 (Power (Power (Power (Power Empty)))))) -> ((~ exactly2 (Sing X4)) /\ ((((((~ atleast3 X3) -> (~ atleast5 X4)) /\ tuple_p X1 X3) -> (Power (Power (Power (Power Empty))) :e X3)) -> (ordinal X4 /\ (((~ atleast4 X3) -> ((nat_p X0 /\ ((~ SNoLt X1 X3) -> (~ exactly4 X4))) /\ (~ SNoLt X4 Empty))) /\ exactly3 X3))) -> (atleast5 X3 /\ (ordinal (lam2 X3 (fun X5:set => X4) (fun X5:set => fun X6:set => X6)) /\ (exactly2 X3 /\ ordinal X4))))))))))).
admit.
Qed.

Theorem conj_Random1_TMQKjLjQEDBJcnr1Tf9JtQPQ8qoGB9G2cpM: exists X0 :e binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)), exists X1:set, ((forall X2 c= binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)), (exists X3:set, atleast3 X3) -> (exists X3:set, ((TransSet X1 -> (forall X4:set, ordinal X2 -> (~ TransSet X4))) /\ (~ atleast6 X3)))) /\ (~ exactly2 X0)).
admit.
Qed.

Theorem conj_Random1_TMZ1E3eHsSekrjcjn6MPTi2NMBzpRd1bMBN: exists X0:set, ((X0 c= binrep (Power (Power (Power Empty))) (Power Empty)) /\ (exists X1:set, ((forall X2:set, (forall X3 c= X2, ((~ atleast4 X2) /\ (exists X4:set, (((((partialorder_i (fun X5:set => fun X6:set => ((~ setsum_p X5) /\ (~ atleast2 X4))) /\ ((~ atleast4 X1) -> (((((~ nat_p X3) -> (~ exactly5 (SNoLev Empty)) -> ((~ atleast3 X4) /\ atleast2 X3)) /\ ((~ atleast5 X3) /\ set_of_pairs X2)) /\ ((~ equip X0 X3) -> (reflexive_i (fun X5:set => fun X6:set => (~ ordinal X2) -> (atleast4 Empty /\ exactly5 X0)) /\ (~ atleast5 X0)) -> atleast6 X4)) /\ (((~ TransSet X4) -> (exactly3 X3 /\ exactly3 X2)) /\ atleastp X2 X4)))) /\ (exactly4 (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty) -> ((((atleast6 X2 /\ atleast6 X2) /\ ((exactly5 X2 -> ordinal X0) /\ (((reflexive_i (fun X5:set => fun X6:set => (((~ TransSet X6) -> (((((X6 :e X6) -> (~ atleast4 X5) -> atleast6 X6) -> (~ stricttotalorder_i (fun X7:set => fun X8:set => (~ nat_p X5)))) -> (((exactly3 Empty /\ (~ atleast5 X4)) /\ ((exactly4 X6 -> ((~ atleast2 (Power (binrep (Power (Power Empty)) Empty))) /\ ((~ atleast5 X1) -> (~ atleast2 X5) -> ((((((((((((~ equip X5 X6) -> (~ ordinal Empty)) -> ((((~ exactly5 X5) /\ ((~ atleast4 Empty) /\ exactly2 X2)) -> (~ nat_p X5)) /\ nat_p X5)) /\ (~ exactly5 X0)) -> (~ SNoLt X0 X6)) -> (totalorder_i (fun X7:set => fun X8:set => (~ atleast2 (Power (binrep (Power (Power Empty)) Empty))) -> exactly3 X0) /\ (~ atleast2 X6))) /\ atleast3 X2) /\ (~ SNo X5)) /\ (set_of_pairs X2 -> atleast4 X2)) /\ (((((~ atleast5 X1) -> atleast3 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) -> (atleast6 X5 /\ exactly2 (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))))) -> (~ atleast6 X5)) -> setsum_p X6) -> (~ ordinal X6))) -> ((((((atleast3 (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty) /\ setsum_p X0) /\ (nat_p (SNoElts_ (Inj0 X6)) /\ (~ exactly3 X6))) /\ exactly4 (SetAdjoin Empty X6)) -> (~ atleast6 X0)) /\ ((atleast2 X6 /\ ((~ atleast5 (binrep (Power (Power (Power (Power Empty)))) (Power Empty))) /\ (((((~ ordinal X6) /\ ((~ exactly2 X6) /\ (~ ordinal X6))) -> (~ nat_p X0)) -> exactly2 (Unj X4)) /\ ((~ exactly3 X6) /\ (((~ (X0 :e X4)) /\ ((nat_p X5 -> bij X6 (Unj X6) (fun X7:set => X5)) /\ (PNoLt X0 (fun X7:set => (~ setsum_p X6)) X0 (fun X7:set => (~ symmetric_i (fun X8:set => fun X9:set => (atleast2 X9 /\ (~ atleast5 (Power X8)))))) /\ nat_p X5))) -> (~ atleast3 X5) -> (((~ set_of_pairs (ordsucc X5)) -> ((((~ nat_p X5) -> ((~ nat_p (binrep (Power (Power (Power (Power Empty)))) Empty)) /\ (~ nat_p X5))) -> (exactly3 Empty /\ ((((ordinal (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty) /\ TransSet X3) -> (~ trichotomous_or_i (fun X7:set => fun X8:set => (~ equip X7 X7))) -> (~ nat_p X0)) -> ((~ exactly4 X5) /\ atleast2 X6)) /\ atleast5 X6))) /\ (~ atleast5 X5))) /\ (~ exactly3 X0)) -> set_of_pairs X5))))) /\ ((~ ordinal X5) -> (~ atleast3 X0)))) /\ (((((~ atleast2 X0) -> atleast2 X0) /\ ((~ TransSet X5) /\ atleast2 (Power (Power (Power (Power Empty)))))) -> (((((nat_p X1 -> atleast3 X0) -> (~ set_of_pairs X4)) /\ (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty c= X6)) /\ (((((((((~ nat_p X4) /\ (((~ atleast3 X5) /\ ((~ (X5 :e X5)) -> TransSet X5 -> exactly4 X3)) /\ trichotomous_or_i (fun X7:set => fun X8:set => (((((~ (X8 = SNoLev Empty)) /\ ((~ nat_p X8) /\ ((~ exactly3 (famunion X0 (fun X9:set => X8))) -> (X2 = X2)))) -> (~ exactly4 X8) -> (reflexive_i (fun X9:set => fun X10:set => (((~ setsum_p X2) -> SNo X5 -> ((atleast6 (binrep (Power (Power (Power Empty))) Empty) -> exactly3 X2) /\ (atleast4 X10 -> (~ atleast4 X0) -> ((atleast4 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty) -> (~ exactly2 X9) -> exactly5 X9) /\ (~ atleast6 (binrep (Power (Power (Power (Power Empty)))) (Power Empty))))))) /\ atleast5 X10)) /\ ((~ nat_p X7) /\ (ordinal X8 -> ((exactly3 X7 -> (TransSet X7 /\ (exactly2 X8 -> TransSet X8)) -> (~ atleast2 X2) -> (~ atleast6 X5)) -> exactly2 X7) -> (~ atleast3 X7))))) /\ ((~ atleast6 X7) /\ atleast5 X3)) /\ (~ atleast5 X6))))) /\ ((exactly3 X3 /\ ((((~ atleast4 (binrep (Power (Power (Power (Power Empty)))) (Power Empty))) -> exactly5 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))) -> exactly4 X6) /\ (X5 :e binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty))) -> (((~ atleast4 Empty) -> ordinal (binrep (Power (Power (Power Empty))) (Power Empty))) /\ ((TransSet X5 /\ (X3 :e X6)) -> ((~ atleast6 X6) /\ (~ atleast4 X5)))))) /\ (~ SNo X1)) -> (~ ordinal (SetAdjoin X5 X0))) -> (~ SNoLe Empty (binrep (Power (Power (Power (Power Empty)))) (Power Empty)))) /\ (~ atleast4 (lam2 X6 (fun X7:set => binrep (Power (Power (Power Empty))) (Power Empty)) (fun X7:set => fun X8:set => X0)))) /\ atleast2 (ap X6 X1)) /\ nat_p (setexp X0 X6))) /\ ((((~ reflexive_i (fun X7:set => fun X8:set => exactly4 X0)) -> linear_i (fun X7:set => fun X8:set => (~ set_of_pairs X7))) -> (~ atleast2 X2)) /\ (~ tuple_p X2 X5)))) /\ exactly4 X6)) -> (atleast4 X6 /\ SNoLe X3 X6)) /\ nat_p X0))) -> (reflexive_i (fun X7:set => fun X8:set => atleast4 X8) /\ TransSet X6) -> (~ atleast5 X5)) -> (((setsum_p X1 /\ (((~ set_of_pairs (Power (binrep (Power (Power Empty)) Empty))) /\ ((exactly2 X5 -> (((~ SNo (binrep (Power (Power (Power Empty))) Empty)) -> SNo (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty))) /\ atleast3 X4)) -> (~ exactly5 X5))) /\ ((~ exactly4 (SNoElts_ (Union X5))) -> TransSet X6))) /\ SNo X6) /\ atleast5 Empty))) /\ ordinal (setexp (binrep (Power (Power (Power Empty))) (Power Empty)) X6))) /\ (~ exactly3 X6))) -> (~ atleast6 X1)) -> equip X5 X5) -> ((((((((~ (X4 :e Empty)) /\ (exactly2 X3 -> (~ setsum_p X4))) /\ exactly2 (SetAdjoin X1 X2)) /\ ((~ exactly4 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))) /\ (((~ exactly2 X3) /\ (~ exactly5 Empty)) -> setsum_p Empty))) -> ((~ (X4 :e X3)) /\ atleast4 X4)) -> TransSet X4 -> (~ atleast5 X0)) /\ ((~ ordinal X0) /\ atleast4 X3)) /\ (~ nat_p X2))) -> (~ atleast6 X3)) /\ ((~ atleast3 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty))) /\ ((~ exactly4 (V_ X3)) -> exactly4 (Inj0 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))) -> (~ exactly4 X2) -> atleastp X1 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) -> ordinal X1))))) -> (~ exactly3 X4)) /\ atleast6 X4) -> (exactly4 X4 /\ (exactly3 X0 /\ (~ SNo X4))))) /\ (~ exactly3 X4)) /\ (SNoLt X3 X4 /\ (ordinal X4 /\ (nat_p X4 -> atleast5 (binrep (Power (Power (Power Empty))) (Power Empty)) -> (~ TransSet X2))))) /\ (~ exactly2 X4))))) -> ((((forall X3 c= X0, (~ TransSet Empty)) /\ (forall X3:set, forall X4 c= X1, ((~ atleast5 X3) /\ (~ atleast2 X3)))) -> exactly4 X1) /\ (exists X3:set, ((exists X4 :e X0, (((~ set_of_pairs X3) /\ (~ (X2 :e X3))) /\ ((((((~ atleast6 X4) -> (~ nat_p X3)) -> atleast5 X2) /\ (~ (X3 :e X3))) /\ (~ nat_p X2)) /\ (nat_p X4 /\ ((~ exactly4 X2) /\ ((~ nat_p X3) -> (~ atleast3 X4))))))) /\ (forall X4:set, ordinal X0 -> atleast5 X0 -> ((~ PNoLt X4 (fun X5:set => (((~ TransSet X4) /\ ((nat_p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) /\ ((~ ordinal X5) -> ((~ exactly5 X4) /\ ((((((~ set_of_pairs (Power (Power (Power (Power Empty))))) /\ (atleast4 X5 -> (exactly2 X4 -> atleast4 X4) -> TransSet X4)) -> (~ exactly5 X4)) -> (((X5 c= X5) -> ((((((~ atleast4 X4) -> (((((~ irreflexive_i (fun X6:set => fun X7:set => (~ exactly4 (binrep (Power (Power (Power (Power Empty)))) (Power Empty))))) -> ((~ TransSet X0) /\ (~ exactly3 Empty))) -> (~ exactly3 X5)) -> nat_p X2) /\ (~ TransSet (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty))) -> ordinal X4) -> exactly2 X4) /\ (ordinal X0 /\ ((atleast4 X4 -> (((~ set_of_pairs X5) /\ (~ exactly3 X5)) -> (((ordinal (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) /\ (((~ atleastp X5 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))) /\ (~ atleast4 X5)) /\ (SetAdjoin (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) X5 :e Power (binrep (Power (Power Empty)) Empty)))) -> (binrep (Power (Power (Power Empty))) (Power Empty) :e X0)) /\ (ordinal (Power (binrep (Power (Power Empty)) Empty)) -> (((~ exactly5 Empty) -> exactly2 X5 -> (~ exactly4 X5) -> TransSet X0) /\ ((~ nat_p X4) -> (~ exactly4 X4) -> (((atleast2 Empty /\ (((~ exactly5 (Repl X2 (fun X6:set => Power (binrep (Power (Power Empty)) Empty)))) -> atleast4 X5) -> ((X3 :e X0) /\ (((~ SNoLe (SetAdjoin X2 X5) X0) -> ((exactly5 X5 /\ TransSet X4) -> (~ exactly5 X1)) -> (~ set_of_pairs X4)) -> (~ atleast2 X5))))) -> atleast6 (ordsucc X4)) -> exactly2 Empty -> exactly4 X2) -> TransSet X5))))) -> (X2 :e Empty)) -> (ordinal X4 /\ (~ atleast5 X5))))) -> (~ (X3 = X2))) /\ ((~ exactly5 X4) /\ ((~ atleast5 X4) /\ (~ atleast4 X4)))) -> (~ atleastp X5 (binunion X4 X4))) /\ (~ exactly5 (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty)))) /\ SNoLe X4 X4) /\ exactly5 X5)))) /\ TransSet Empty)) /\ (((((~ TransSet (Power (binrep (Power (Power Empty)) Empty))) /\ ((((X5 = X4) /\ (exactly3 (binrep (Power (Power (Power Empty))) Empty) /\ ((~ atleast6 X5) -> atleast4 X1))) -> (~ atleast5 X5) -> (((~ atleast5 X0) /\ (((~ exactly5 X2) -> ((((~ atleast6 X4) -> (~ atleast5 X3)) -> reflexive_i (fun X6:set => fun X7:set => (~ exactly4 X7))) /\ ((exactly4 X4 /\ (~ nat_p Empty)) /\ atleast6 X0))) /\ (~ TransSet X4))) /\ (((~ atleast5 X5) -> ((~ nat_p X1) /\ ((~ atleast5 (binrep (Power (Power (Power (Power Empty)))) Empty)) -> (~ exactly2 X3) -> (~ atleast3 X0)))) -> (~ atleast6 X5)))) /\ (~ atleast2 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty)))) /\ atleast2 X4) -> (((~ TransSet X5) /\ tuple_p X0 X5) -> atleast2 X4 -> ((exactly3 X3 /\ ((~ SNo X4) -> ((~ SNo X4) -> ((exactly5 X5 /\ (~ atleast4 X5)) /\ exactly3 X4)) -> (~ exactly2 (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty)))) /\ (atleast6 X3 -> ((~ exactly5 X2) /\ exactly3 X5)))) -> atleast2 Empty) /\ (~ SNo_ Empty (ordsucc (mul_nat X2 (Sing (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty)))))))) X0 (fun X5:set => (exactly2 Empty /\ (X0 :e X4)))) /\ (nat_p X4 /\ (equip X2 X3 /\ (~ atleast5 X3))))))))) /\ ((exactly5 X1 /\ (forall X2 :e X1, exists X3:set, ((X3 c= X2) /\ (exists X4:set, ((X4 c= binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty) /\ setsum_p X4))))) /\ PNo_downc (fun X2:set => fun X3:set -> prop => ((forall X4:set, (~ X3 X1) -> ((set_of_pairs X0 -> (nat_p X2 /\ (((((~ X3 X1) /\ (((~ exactly3 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty)) /\ (~ nat_p X1)) /\ (X3 X2 /\ (X3 X4 /\ X3 X2)))) -> (~ atleast4 X4)) /\ (~ nat_p (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))))) /\ ((X3 X2 /\ X3 X2) /\ (~ X3 X4))))) -> nat_p X4) -> equip X4 X2) /\ (exists X4:set, (((~ atleast5 X4) /\ X3 (Power (binrep (Power (Power Empty)) Empty))) /\ ((atleast4 (famunion Empty (fun X5:set => X5)) -> ordinal X0) -> X3 X4))))) X1 (fun X2:set => forall X3:set, exists X4:set, ((X4 c= X2) /\ ((~ exactly4 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty))) /\ ((~ atleast6 X4) -> (~ SNoLt X4 X4))))))))).
admit.
Qed.

Theorem conj_Random1_TMYvuse7tUteMqLXKZMZqjkSy7icQAagprH: exists X0 :e Empty, exists X1 :e X0, forall X2:set, ((~ trichotomous_or_i (fun X3:set => fun X4:set => atleast2 X3 -> (atleast6 X2 /\ (~ TransSet X3)))) /\ (forall X3:set, (exists X4:set, ((X4 c= X3) /\ (~ reflexive_i (fun X5:set => fun X6:set => atleast6 X5)))) -> (exists X4 :e binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)), (~ atleast5 (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))))))) -> ((exists X3:set, ((X3 c= X1) /\ (exists X4:set, ((X4 c= X2) /\ ((((((~ exactly5 X0) -> atleast4 X4) /\ atleast5 X4) /\ (atleast5 (Power (binrep (Power (Power Empty)) Empty)) /\ atleast3 X3)) -> atleast2 (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty)) -> (~ TransSet X4)))))) /\ (exists X3:set, exists X4 :e X2, ((((~ exactly2 X2) -> (~ exactly3 X3)) /\ (~ atleast5 X4)) /\ (~ nat_p X3)))).
admit.
Qed.

Theorem conj_Random1_TMbeV54bcBrJc5uDRHtA9bqLov7V8gtNEd9: forall X0:set, (exists X1:set, ((X1 c= binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty) /\ ((exists X2:set, ((X2 c= X1) /\ ((~ nat_p X2) /\ ((exists X3 :e binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty, (~ exactly4 X1)) /\ (exists X3 :e binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty, forall X4:set, (ordinal X1 /\ (((~ atleast2 X2) /\ (~ exactly5 Empty)) /\ atleast5 X3))))))) /\ equip X1 (Inj1 X1)))) -> (exists X1:set, ((X1 c= X0) /\ (~ atleast3 X0))).
admit.
Qed.

Theorem conj_Random1_TMT74giqjpC98xFzk1zFtRJmb31Q2UXh7uF: forall X0:set, (exists X1:set, forall X2:set, ((forall X3 :e X2, ordinal Empty) /\ (forall X3 c= X0, forall X4 c= X3, (~ exactly4 X3))) -> ((~ exactly2 X0) /\ (~ TransSet X1))) -> (exists X1 :e Empty, exists X2:set, (irreflexive_i (fun X3:set => fun X4:set => SNo X0 -> ((set_of_pairs X0 -> exactly4 X3) /\ (~ (X1 :e X2))) -> (~ exactly3 X2)) /\ TransSet (Union X1))).
admit.
Qed.

Theorem conj_Random1_TMHNzWVF5n5wsEdKdas4R2SJKurNsLkSeSe: exists X0 :e binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty, exists X1:set, (exists X2:set, ((X2 c= X0) /\ (forall X3 :e X1, exists X4:set, ((((((~ exactly3 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty))) /\ (~ atleast3 X1)) /\ exactly4 (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)))) /\ (atleast3 Empty -> atleast3 X4)) /\ (exactly2 X3 -> (~ atleast6 X2) -> atleast6 X3)) /\ ((((exactly5 X3 /\ (~ nat_p X3)) -> (~ exactly2 X3)) -> exactly5 X4) -> ordinal X2))))) -> (forall X2 :e SNoElts_ X0, exists X3:set, ((forall X4 :e X2, atleast5 X3) /\ (forall X4:set, atleast3 X1 -> (~ equip X3 X4)))).
admit.
Qed.

Theorem conj_Random1_TMKjKkoa9HDUoLuuoDizx3bjBG2GraUcqwd: forall X0 c= SetAdjoin (binunion (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty) (V_ (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))))) (setprod (Union (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)) (binintersect (Union (ordsucc (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty))) (Power (Power (Power (Power Empty)))))), exists X1:set, ((forall X2:set, (exists X3:set, (((~ nat_p (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)))) /\ exactly5 X3) /\ (exists X4:set, ((X4 c= Sing X1) /\ (nat_p X3 /\ set_of_pairs X3)))) -> exactly4 X2) -> (~ atleast6 X2)) /\ (forall X2 :e binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)), forall X3 :e X2, exists X4:set, (~ SNoLe X3 X4) -> ((atleast4 X4 -> exactly3 X0 -> ((~ binop_on X1 (fun X5:set => fun X6:set => Power (Power (Power (Power Empty))))) /\ (~ exactly2 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))))) -> atleast2 (ordsucc X1) -> ((atleast5 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) -> TransSet X2) /\ atleast6 X0) -> (~ atleast5 (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty))) -> exactly5 X1)).
admit.
Qed.

Theorem conj_Random1_TMchgB1ep1m9RSeTmZnW7L3j1Grc6CytVTB: exists X0:set, exists X1:set, ((exists X2:set, ((exists X3:set, ((exists X4:set, ((X4 c= Power (binrep (Power (Power Empty)) Empty)) /\ ((((((~ SNo X3) /\ atleast4 X4) -> ((((X3 = X2) /\ ((exactly3 X3 -> ((((atleast5 (In_rec_i (fun X5:set => fun X6:set -> set => X0) X3) -> ((Empty :e binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty) /\ exactly5 X4)) -> (~ atleast4 Empty)) -> atleast4 X0) /\ atleast4 X4)) -> (~ atleast2 Empty))) /\ ((atleast4 X3 -> nat_p (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)))) /\ (~ TransSet X3))) /\ ((~ atleast6 Empty) /\ ((exactly3 X0 -> atleast5 (binrep (Power (Power (Power Empty))) Empty)) -> ((~ atleast2 X4) -> (~ nat_p X3) -> (set_of_pairs X3 -> (SNo X4 -> (~ atleast4 X3)) -> (X3 :e Empty)) -> (~ nat_p X0)) -> ((~ SNo (Unj (Power (binrep (Power (Power Empty)) Empty)))) /\ atleast4 (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)) -> atleast6 X4 -> (((((~ exactly4 X3) -> (exactly5 X4 /\ ((atleast2 (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty) -> (~ exactly4 X3)) -> (((~ atleast6 X4) -> ((atleast2 X4 -> (~ exactly4 X4)) /\ (((~ atleast5 X4) -> ((~ exactly2 Empty) -> ordinal X3) -> tuple_p X0 X0) -> (~ exactly5 X0)))) /\ ((~ setsum_p X3) -> atleast6 X3))))) /\ ((atleast5 X3 /\ ((((((X0 :e X0) -> ((atleast2 X1 -> ((ordinal X4 /\ (~ reflexive_i (fun X5:set => fun X6:set => atleast4 X6))) /\ ((~ nat_p X3) /\ (~ setsum_p X1)))) /\ (((((~ atleast3 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty)) /\ (setsum_p X3 -> ((~ TransSet X4) /\ (~ atleast6 X4)) -> atleast4 X3)) -> (X3 :e X2)) /\ atleast6 Empty) -> (~ atleast3 X4) -> atleast5 (Power (Power (Power (Power Empty)))) -> (~ exactly3 X4))) -> (~ (X4 = X0))) /\ (~ TransSet X4)) /\ ((~ atleast4 X4) -> (X3 :e X3))) -> (~ exactly5 (binrep (Power (Power (Power (Power Empty)))) Empty))) -> (((((atleast4 X4 /\ TransSet X0) -> (((PNoEq_ X3 (fun X5:set => ((~ exactly4 X0) /\ (~ exactly4 X4)) -> TransSet X5) (fun X5:set => atleast3 Empty) -> ordinal (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)) -> (~ exactly3 X1) -> atleast5 X3) /\ ((~ exactly1of2 ((~ exactly4 X3) -> (TransSet (binrep (Power (Power (Power Empty))) (Power Empty)) /\ atleast5 X4)) (exactly5 X4)) /\ exactly5 (proj0 X4))) -> atleast4 X4) /\ atleast2 X4) -> (transitive_i (fun X5:set => fun X6:set => (~ atleast2 X6)) /\ atleast5 X0)) /\ (~ setsum_p Empty)))) /\ ((~ atleastp X3 X4) /\ (~ equip X0 X2)))) -> (~ TransSet X3) -> ((~ atleast2 X3) /\ ((~ atleast2 X4) -> (~ nat_p X0) -> (~ exactly5 (Power (Power (Power (Power Empty)))))))) /\ atleast3 X3) -> exactly4 Empty)))) -> (~ atleast5 X1)) -> atleast4 Empty) /\ (~ reflexive_i (fun X5:set => fun X6:set => (X0 c= X6)))))) /\ (forall X4 c= Power (Power (Power (Power Empty))), (~ atleast5 Empty)))) /\ (forall X3:set, (~ (X3 :e Inj1 (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty))) -> (exists X4:set, (atleast3 X3 /\ ((~ atleast6 X1) -> atleast5 X3)))))) /\ (((exists X2:set, ((exists X3:set, ((exists X4:set, ((~ exactly4 X4) /\ ((((~ exactly3 X3) /\ set_of_pairs X3) -> atleast4 X4) /\ atleast6 X3))) /\ (exists X4 :e X2, atleast5 X4))) /\ (irreflexive_i (fun X3:set => fun X4:set => ((~ SNo X4) /\ (~ nat_p X4))) /\ (forall X3:set, exists X4:set, ((~ atleast2 X3) /\ (~ exactly4 X2)))))) -> (forall X2:set, atleast2 (binrep (Power (Power (Power (Power Empty)))) Empty) -> (~ exactly2 X0))) /\ (((forall X2 c= X1, exists X3:set, (~ reflexive_i (fun X4:set => fun X5:set => (~ TransSet X5)))) -> (exists X2:set, ((X2 c= Empty) /\ (exists X3:set, (SNo X3 /\ (exists X4:set, (~ exactly2 X4))))))) -> (forall X2 c= X0, (~ symmetric_i (fun X3:set => fun X4:set => (~ atleast4 X4))))))).
admit.
Qed.

Theorem conj_Random1_TMTHxaWtz7koD99x82ikBj39S6kJb8UAoUH: forall X0 :e binunion (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty) Empty, forall X1:set, ((~ nat_p X0) /\ (exists X2:set, ((X2 c= X1) /\ (((exists X3 :e X0, set_of_pairs X1) -> (atleast5 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) /\ exactly4 X1)) /\ (forall X3:set, exists X4:set, atleast5 X3))))) -> (forall X2:set, exactly5 (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty)) -> (forall X2:set, ((~ nat_p X0) -> (forall X3:set, (forall X4:set, exactly4 X0) -> (~ (X2 :e X1)))) -> (exists X3 :e X0, ((exists X4:set, (((~ atleast2 X3) -> ((Empty :e X4) /\ atleast2 (binrep (Power (Power (Power (Power Empty)))) (Power Empty)))) /\ equip X4 X2)) /\ (forall X4:set, ((~ atleast4 X4) -> (~ exactly2 X3)) -> ((~ exactly4 (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)) -> (~ atleast6 X0)) -> (~ exactly4 X3))) -> (exists X4 :e X0, (((((~ atleast2 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty))) /\ atleast4 X0) /\ (((~ SNo_ X1 Empty) /\ ((~ atleast2 X4) /\ (~ exactly5 X0))) /\ (((~ atleastp X4 X3) /\ (((exactly4 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) /\ (~ atleast6 X4)) -> ((~ atleast4 X4) -> (SNo X4 /\ (~ exactly3 (binrep (Power (Power (Power Empty))) (Power Empty))))) -> atleast5 X2) /\ setsum_p X2)) /\ (SNo X4 -> (atleast4 X1 /\ (((~ exactly4 X2) -> ((~ (binunion X2 (binrep (Power (Power (Power (Power Empty)))) Empty) :e X2)) /\ (~ TransSet X3)) -> atleast3 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty))) -> (Empty = X3) -> (~ reflexive_i (fun X5:set => fun X6:set => (~ atleast4 X0))))) -> (~ SNoLt X3 X4))))) /\ exactly4 X0) /\ (exactly5 X0 /\ (~ atleast6 X3)))))).
admit.
Qed.

Theorem conj_Random1_TMNZs8juWa2T7vXDEWp5B8wgURaGHDVshQm: forall X0:set, (forall X1:set, (~ (X0 :e X1)) -> ((exists X2:set, ((exists X3:set, ((~ atleast5 X3) /\ (exists X4 :e X2, (~ (X4 = binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)))))) /\ TransSet X1)) /\ (exists X2:set, ((X2 c= X1) /\ (forall X3 c= X1, exists X4 :e X1, (~ exactly4 X3)))))) -> (exists X1:set, ((forall X2:set, atleastp (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty) X0 -> (forall X3 c= X2, forall X4 :e X3, (atleast4 X4 /\ ((((PNo_downc (fun X5:set => fun X6:set -> prop => (((setsum_p (ordsucc X4) -> atleast5 X3) /\ exactly4 X4) -> trichotomous_or_i (fun X7:set => fun X8:set => (~ X6 Empty))) -> TransSet (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))) X0 (fun X5:set => equip X5 X1) /\ (~ nat_p (Unj X0))) /\ ((X1 = binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))) -> exactly3 Empty)) /\ (((~ (X4 c= binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))) -> ordinal X2) /\ (exactly5 X4 /\ ((exactly5 Empty -> atleast6 X4) -> (~ ordinal (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty)))))) -> (~ SNoLt (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty) X3))))) /\ ((~ SNo (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)) -> atleast4 X0))).
admit.
Qed.

Theorem conj_Random1_TMMKMRtwCbwL8iXayoUziW2wttmLntbeQGB: forall X0 c= Union (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty), forall X1:set, forall X2:set, exists X3:set, ((forall X4 :e X0, (~ atleast6 X4) -> (((((~ tuple_p X0 Empty) -> ((exactly4 X3 /\ exactly3 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty)) /\ SNo X3)) -> nat_p X0) /\ (atleast6 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) -> (((~ exactly3 X3) -> atleast6 X4) -> TransSet X1) -> atleast2 X3 -> exactly3 Empty)) -> ((~ exactly4 X2) -> (~ exactly4 X3)) -> (((((~ atleast2 X2) /\ (exactly4 (binrep (Power (Power (Power (Power Empty)))) Empty) /\ exactly4 (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty))) -> (((TransSet X4 -> (X0 :e X3)) /\ ((~ atleast6 X3) -> (((nat_p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty) /\ (((((((~ exactly2 (binintersect X0 X1)) /\ (~ exactly5 Empty)) /\ exactly4 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty))) -> exactly5 X3) -> (((exactly2 X0 /\ ((((((((~ exactly2 X4) -> (~ (X4 :e X2))) -> (~ (X3 c= X3))) /\ (~ atleast4 (binrep (Power (Power (Power Empty))) Empty))) -> (~ atleast2 X0)) -> (~ setsum_p X3)) /\ (atleast5 X4 /\ ((((~ equip X3 X3) -> (~ exactly3 Empty) -> (exactly3 X2 /\ ((~ set_of_pairs X3) /\ (~ exactly5 (Power (binrep (Power (Power Empty)) Empty)))))) -> (~ ordinal X4)) /\ (((((((~ (X3 :e binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty))) -> nat_p X3) -> ((~ exactly2 X3) /\ (nat_p X3 -> (~ exactly4 Empty) -> ((~ SNoEq_ X3 X2 (Power (binrep (Power (Power Empty)) Empty))) /\ ((~ atleast4 X4) -> atleast5 X3))))) /\ (~ ordinal (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))))) -> (~ atleast4 X3)) -> (X2 :e X3)) /\ nat_p Empty)))) /\ (~ exactly4 X4))) /\ (~ atleast4 (binrep (Power (Power (Power Empty))) Empty))) /\ ((atleastp X4 X3 -> (~ TransSet X3) -> ((~ exactly4 (UPair X4 Empty)) /\ ((((SNo Empty -> (~ atleast5 X4)) -> (~ exactly5 X4)) /\ nat_p X3) -> SNo X3)) -> (~ exactly3 X2)) /\ (~ atleast2 (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty))))) /\ ((((~ ordinal X0) -> ordinal X4) /\ ((((((~ exactly5 X0) -> atleast5 X4 -> ((((exactly2 X2 /\ ((set_of_pairs X3 -> ((~ atleast4 X3) /\ (~ exactly3 X3))) -> TransSet (binunion X2 X0))) /\ (~ exactly3 X3)) -> (atleast6 X3 -> (~ reflexive_i (fun X5:set => fun X6:set => exactly3 X5))) -> SNoLe X3 X3) /\ atleast6 (Inj1 (Power X4)))) /\ ((((TransSet X4 /\ exactly5 Empty) /\ reflexive_i (fun X5:set => fun X6:set => set_of_pairs X6)) -> exactly4 X0) /\ exactly3 X2)) /\ (atleast6 X0 -> (~ atleast6 X4))) /\ ((exactly4 X2 /\ atleast2 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty)) /\ exactly5 X2)) /\ atleast5 X4)) /\ (~ atleast6 X4))) /\ (~ atleast3 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty))))) /\ (~ exactly4 X1)) /\ (binop_on X4 (fun X5:set => fun X6:set => X0) /\ exactly5 X2)))) /\ (((nat_p X3 /\ (exactly2 Empty -> (((((~ exactly3 X4) -> ((~ nat_p X3) /\ (~ ordinal X3))) -> SNo X1) /\ SNo (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))) /\ ((~ atleast5 X0) -> ((~ atleast3 X4) /\ (atleast4 X3 -> (((((~ ordinal X4) /\ (exactly5 X4 /\ ((~ equip (Unj X1) Empty) /\ ((~ (X3 :e Empty)) -> equip X4 X4 -> (((ordinal X4 -> exactly5 X0) -> (set_of_pairs X1 /\ (((((~ TransSet X3) -> ((~ exactly5 X4) /\ (((atleast6 (Inj1 X3) /\ ordinal X4) -> (~ atleast6 X4)) -> ((~ ordinal X4) -> (((~ atleast6 X2) /\ (~ atleast3 Empty)) /\ ((exactly5 X4 -> (~ exactly3 X2)) -> (atleast6 X3 -> ((exactly2 X3 -> atleast2 Empty -> (~ SNo X4)) /\ (~ TransSet X4))) -> (((~ equip X4 X3) /\ SNo_ Empty X3) /\ atleast4 X2)))) -> atleast2 X4 -> (((exactly3 X0 -> exactly5 X3) /\ ((~ nat_p X4) -> atleast4 X4)) /\ (~ atleast6 X2))))) /\ (X3 :e binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty))) -> (((ordinal X4 -> ((~ atleast5 Empty) -> (~ atleast6 X3)) -> (~ ordinal X4)) /\ (~ nat_p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))))) /\ exactly3 X2)) /\ antisymmetric_i (fun X5:set => fun X6:set => (~ setsum_p X1))))) /\ ((~ set_of_pairs X2) /\ ((~ ordinal X2) /\ (exactly5 X1 -> ((reflexive_i (fun X5:set => fun X6:set => (nat_p X2 /\ (~ exactly3 X6)) -> (((~ exactly4 X0) /\ ((atleast6 X5 /\ (~ TransSet X6)) -> (Empty = X6))) /\ ((((((~ per_i (fun X7:set => fun X8:set => atleast5 X1)) -> (~ atleast2 X5)) -> (~ exactly4 Empty)) /\ ((TransSet (SNoElts_ X5) /\ (X1 :e X6)) /\ (((((~ partialorder_i (fun X7:set => fun X8:set => ((((ordinal X0 /\ (~ SNo Empty)) -> atleast6 X7 -> ((~ set_of_pairs X2) /\ (SNo X2 -> ((ordinal (binrep (Power (Power (Power Empty))) Empty) /\ (~ atleast6 X0)) /\ (~ atleast6 (binrep (Power (Power (Power Empty))) (Power Empty)))) -> (((((~ atleast5 X8) -> (~ (X7 :e X7))) -> exactly5 (Union X4)) -> ((~ atleast2 X7) /\ (~ TransSet X6))) /\ (((~ exactly1of3 (atleast3 X8) (exactly2 (proj1 X8)) (X2 :e X7)) -> ((((~ SNo_ X4 X8) -> per_i (fun X9:set => fun X10:set => (atleast2 X6 /\ (~ TransSet X10)))) /\ (~ SNoLt X5 X7)) /\ (~ exactly3 X4))) -> (exactly5 X8 /\ (((X7 :e X7) /\ (set_of_pairs X8 -> (((~ atleast2 (proj0 X4)) /\ atleast4 X7) /\ ((~ atleast6 X8) -> atleast3 X7)))) -> (~ nat_p (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)))) -> (~ set_of_pairs (Sep X8 (fun X9:set => ((~ equip Empty X9) /\ (~ atleast5 X6))))))))))) -> (~ ordinal X8) -> ((atleast2 X2 -> (antisymmetric_i (fun X9:set => fun X10:set => (~ atleast3 (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)) -> (~ exactly3 Empty)) -> (~ atleast6 X6)) -> atleast2 X8 -> ((nat_p X8 /\ atleast3 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty)) /\ exactly2 X7)) /\ atleast5 X7)) -> (~ atleast4 X8)) -> atleast6 X1) -> (((~ (X8 :e X1)) -> (~ atleast3 (ap X7 X4))) /\ (nat_p X1 -> (~ atleast3 (V_ X1)) -> (~ exactly2 X4))))) -> atleast3 Empty) -> (((~ atleast5 X0) /\ (((~ (X5 c= X2)) /\ (~ setsum_p X0)) /\ atleast3 X6)) /\ ordinal X6) -> ((SNoElts_ (nat_primrec X6 (fun X7:set => fun X8:set => X8) Empty) = X1) /\ exactly3 X6) -> exactly2 X5) -> (~ atleast3 (Inj0 X6))) -> (ordinal X4 /\ (~ atleast4 X5))))) /\ ordinal X6) /\ ((~ atleast4 X6) -> (~ exactly3 X6))))) /\ (exactly5 X2 -> (set_of_pairs X4 -> (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty :e X3) -> (((bij X3 X4 (fun X5:set => X0) /\ ((~ atleast3 X3) /\ ((~ SNo Empty) /\ SNo X2))) /\ atleast5 X2) /\ (atleast6 (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty) -> (((~ atleast2 X3) /\ (~ exactly2 X3)) /\ (X1 :e X2))))) -> exactly5 X0)) /\ (((~ atleast5 X4) /\ ((~ atleast6 X2) /\ nat_p (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty))) /\ setsum_p X3)))))) -> (((~ atleast3 X2) /\ (~ TransSet X4)) /\ (((~ exactly3 (V_ (Union (ordsucc X4)))) -> (((((((TransSet X0 /\ TransSet (Sing X2)) -> (~ atleast4 X2) -> ((((~ atleast3 X1) -> atleast3 Empty) -> reflexive_i (fun X5:set => fun X6:set => ((~ atleast6 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty))) /\ (atleast6 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) /\ antisymmetric_i (fun X7:set => fun X8:set => ((~ TransSet X7) -> nat_p X8) -> ((~ atleast6 X7) /\ atleast6 X4) -> (ordinal X8 /\ nat_p X2)))))) /\ atleast4 (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty))) -> (atleast3 X2 -> (~ exactly3 X3)) -> exactly5 X3) -> (~ nat_p X3)) /\ setsum_p (Sing X4)) -> nat_p Empty) /\ ordinal X4)) /\ ((SNoLt X4 X4 /\ exactly5 Empty) /\ (~ exactly4 Empty)))) -> (((~ atleast6 X4) /\ (exactly3 X3 -> (atleast5 X4 /\ (reflexive_i (fun X5:set => fun X6:set => ((((~ nat_p X5) -> ((~ ordinal X6) /\ ((~ exactly2 X6) /\ setsum_p X5)) -> exactly3 X5) /\ ((exactly4 X6 -> exactly5 X6) -> (X3 c= Empty))) -> atleast6 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty))) -> (~ exactly4 X5)) /\ (~ atleast6 X0))))) /\ ((((((SNo X3 /\ ((((~ atleast6 (V_ X4)) -> exactly3 Empty) -> totalorder_i (fun X5:set => fun X6:set => ((~ nat_p X0) /\ (~ reflexive_i (fun X7:set => fun X8:set => set_of_pairs X8))))) /\ ((atleast3 (Repl X3 (fun X5:set => binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)) -> exactly5 (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty)) -> atleast5 X3 -> (~ exactly3 X4) -> (((exactly3 X4 /\ atleast6 (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)))) -> (~ atleast5 X1)) /\ ((~ (X3 = X3)) /\ (~ atleast6 X3)))))) /\ SNo (binrep (Power (Power (Power Empty))) (Power Empty))) /\ tuple_p X3 X2) /\ (~ tuple_p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty) X0)) -> (~ exactly2 X2)) /\ (((~ exactly3 X2) -> ((((X4 :e X4) /\ ((((~ exactly2 X0) /\ (~ nat_p X2)) /\ (((((~ exactly5 X0) -> (set_of_pairs X3 /\ (atleast2 (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty) /\ (((~ atleast4 X4) /\ ordinal X0) -> (~ atleast6 X4)))) -> exactly1of3 (nat_p X4 -> ((((X4 :e X3) /\ exactly5 X3) /\ setsum_p X4) /\ (((((~ TransSet X4) -> ((~ SNo_ X4 X0) /\ (exactly3 (binrep (Power (Power (Power Empty))) Empty) -> atleast2 X4 -> (((atleast3 X4 /\ (~ atleast4 X4)) /\ (~ atleast5 X2)) /\ (((~ atleast5 X4) /\ (atleast3 (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty) -> ((reflexive_i (fun X5:set => fun X6:set => equip X6 X5) /\ (~ ordinal X2)) /\ atleast5 X0))) /\ atleast3 Empty))))) -> (~ ordinal X0)) /\ ((exactly2 X3 -> (((~ (X3 :e X3)) -> ((~ transitive_i (fun X5:set => fun X6:set => (~ atleast4 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))))) /\ nat_p X4)) /\ exactly2 X3)) /\ ((~ (X4 c= X3)) /\ ((((((((~ exactly5 X4) -> (~ atleast2 X3) -> (~ TransSet X2)) /\ (~ exactly3 X3)) /\ ((((((SNoEq_ X3 X2 Empty -> ((~ exactly2 Empty) /\ (set_of_pairs X0 /\ atleast2 (Power (Power (Power (Power Empty))))))) -> ((~ atleast2 (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty)) /\ (ordinal (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) -> set_of_pairs X3))) /\ (((((~ (X2 :e Empty)) -> ((~ atleast5 X2) /\ (~ atleast2 (binrep (Power (Power (Power (Power Empty)))) (Power Empty))))) -> (((~ exactly3 X4) /\ exactly4 X3) /\ (SNo (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) /\ setsum_p X4))) -> (~ TransSet (Inj1 X3))) /\ (atleast5 X2 /\ (SNoLe X1 X3 /\ (~ TransSet (binrep (Power (Power (Power (Power Empty)))) Empty)))))) -> (~ binop_on X2 (fun X5:set => fun X6:set => X5))) -> ((~ exactly2 X0) /\ (atleast6 X1 /\ (((((~ exactly5 X3) /\ (~ atleast2 X3)) /\ atleast4 Empty) -> (atleast2 X4 /\ ((~ exactly4 X4) /\ atleast3 X0))) -> set_of_pairs X1 -> atleast4 X2)))) -> TransSet X4 -> ((((((~ exactly5 X1) /\ (~ atleast6 (binrep (Power (Power (Power Empty))) Empty))) -> ((~ nat_p X3) /\ (~ set_of_pairs X2))) /\ ((~ exactly5 X2) /\ (exactly3 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) -> (~ atleast3 (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty))))) /\ exactly5 X0) /\ ((~ atleast2 Empty) /\ atleast3 (lam2 X4 (fun X5:set => Power (Power (Power (Power Empty)))) (fun X5:set => fun X6:set => X0)))))) -> reflexive_i (fun X5:set => fun X6:set => (((~ SNoLt Empty (setminus X6 X5)) -> (~ ordinal X3)) /\ exactly5 (binrep (Power (Power (Power (Power Empty)))) Empty)) -> (((X0 c= X6) -> (((~ ordinal X6) -> ((((~ exactly5 Empty) /\ TransSet (V_ X5)) /\ ((~ atleast6 X2) -> ordinal X5)) /\ (~ atleast6 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty)))) /\ (~ exactly4 X3))) /\ ((X4 :e X0) /\ (((~ setsum_p X0) -> partialorder_i (fun X7:set => fun X8:set => ((((PNo_downc (fun X9:set => fun X10:set -> prop => ((~ atleast3 Empty) /\ exactly3 X8)) X2 (fun X9:set => exactly5 X9) /\ (exactly3 X8 /\ (((~ setsum_p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))) /\ ((~ atleast3 X7) -> atleast2 X8 -> atleast6 X8)) -> atleast2 X5 -> (~ atleast3 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty))))) /\ (~ atleast3 X5)) /\ (((((~ exactly2 X7) -> (~ set_of_pairs X3)) /\ (~ atleast3 X8)) -> (exactly2 X8 /\ ((((exactly2 X8 -> exactly3 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty)) -> (~ setsum_p Empty)) /\ (((~ exactly4 X2) -> (~ exactly4 X8)) -> exactly5 X7)) /\ (((~ exactly2 X8) /\ atleast5 X7) -> (~ set_of_pairs X8))))) -> (X7 :e X4))) /\ (exactly2 X7 /\ (~ atleast4 X8)))) -> (reflexive_i (fun X7:set => fun X8:set => (((~ exactly3 X5) -> (atleast2 X8 /\ ((bij X7 X7 (fun X9:set => X9) /\ TransSet X7) -> (~ atleast3 X8)))) -> (((((~ atleast6 X1) /\ ((equip X8 X7 -> (((~ atleast4 X0) /\ (((~ exactly3 (binrep (Power (Power (Power Empty))) Empty)) -> atleast5 X7) -> (((~ TransSet Empty) -> SNo X7) /\ ((~ atleast4 X8) -> (~ nat_p X7))))) -> (atleast6 X3 /\ (nat_p X5 /\ (~ set_of_pairs X4)))) -> (~ atleast6 X7)) -> (~ set_of_pairs X7))) /\ atleast5 X8) /\ ((atleast5 X5 /\ ((~ nat_p X7) -> (~ SNo_ X7 X8))) -> (~ reflexive_i (fun X9:set => fun X10:set => ((~ exactly3 X1) /\ (exactly4 X9 /\ tuple_p X10 X8)))))) /\ (((~ atleast4 Empty) /\ ((~ set_of_pairs (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty))) -> ordinal X1)) -> SNoLe X7 X8))) -> (TransSet X5 /\ ((X7 :e Power (binrep (Power (Power Empty)) Empty)) -> exactly5 X5))) /\ ((~ set_of_pairs X6) -> ((atleast5 X5 /\ transitive_i (fun X7:set => fun X8:set => exactly2 X7)) /\ (~ (binrep (Power (Power (Power (Power Empty)))) Empty = binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty)))))) -> atleast3 X6 -> set_of_pairs X5))))) -> (~ set_of_pairs X4)) -> ((~ exactly2 X3) -> PNo_upc (fun X5:set => fun X6:set -> prop => ((~ atleast4 (Power (Power (Power (Power Empty))))) /\ (((~ X6 (Inj0 X4)) /\ ((((exactly2 X4 /\ atleast2 (Inj1 X4)) -> (~ atleast4 X4)) -> (~ X6 (binrep (Power (Power (Power (Power Empty)))) Empty))) /\ X6 X5)) -> X6 X5))) X3 (fun X5:set => exactly5 X4)) -> (~ exactly4 (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))))) /\ (((~ atleast6 X1) /\ per_i (fun X5:set => fun X6:set => (~ set_of_pairs X0))) -> exactly2 Empty))))) -> setsum_p X0 -> SNo (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty)))) ((atleast4 (binintersect (Inj0 (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)))) (binunion X0 (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty))) /\ ((~ (X2 :e X1)) -> ((~ atleast5 X3) /\ (~ TransSet Empty)) -> (~ exactly5 X3))) /\ ((exactly4 X2 /\ exactly2 X0) -> set_of_pairs X4)) ((((~ atleast2 X3) -> ((~ SNo X2) /\ ((~ reflexive_i (fun X5:set => fun X6:set => (((~ atleast4 X5) -> atleast3 X5) /\ (~ exactly5 X6)))) /\ (~ ordinal X3)))) -> exactly3 X2) -> (~ ordinal (Power (binrep (Power (Power Empty)) Empty))))) /\ ordinal X4) -> TransSet X2) -> (~ SNo X4))) /\ (X2 :e X3))) -> atleast5 X3 -> ((~ ordinal X3) /\ (atleast4 X2 /\ (~ set_of_pairs (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))))))) /\ (((~ exactly4 X0) /\ ((setsum_p X4 /\ ((~ exactly5 X3) /\ (((atleastp Empty X3 /\ (~ atleast2 X0)) -> (exactly4 X3 -> (~ exactly4 X4)) -> TransSet X3 -> (exactly5 X3 -> (~ exactly4 (proj1 X3))) -> SNoLe X3 Empty) /\ ((~ exactly5 X1) -> (((((((~ PNo_downc (fun X5:set => fun X6:set -> prop => reflexive_i (fun X7:set => fun X8:set => ((((X6 Empty /\ X6 (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty)) /\ ((((~ exactly2 X1) -> (~ atleast4 (Power (binrep (Power (Power Empty)) Empty))) -> (X6 X7 /\ X6 X1) -> X6 X0) /\ (nat_p X4 -> ((~ ordinal (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)))) /\ ((X6 X8 /\ (((X6 X7 /\ (~ exactly2 X0)) -> (SNoLt X4 X8 /\ (~ exactly2 X0))) -> (~ TransSet X8))) /\ ((((~ X6 Empty) /\ atleast6 X7) /\ X6 (binrep (Power (Power (Power Empty))) (Power Empty))) /\ (X6 Empty /\ (~ nat_p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty)))))))) -> ((~ X6 X8) -> X6 X0) -> (~ X6 X7))) -> (~ (X0 :e X8))) /\ X6 X5))) X3 (fun X5:set => (((~ PNoEq_ X5 (fun X6:set => (~ exactly2 X5)) (fun X6:set => ((((exactly4 X3 -> (~ atleast6 X5) -> (~ atleast4 X5)) -> (~ exactly4 X5)) -> (~ exactly4 X5)) /\ (~ set_of_pairs (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty))))) -> ((atleast3 X0 -> atleast3 X5) /\ ((~ nat_p X5) /\ ((binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty) c= X2) -> exactly5 X5)))) /\ (~ atleast2 X4)) -> (~ exactly3 X4))) /\ ((TransSet X4 -> (exactly5 (setsum X4 X4) -> (TransSet (Inj0 X3) -> (~ TransSet X3)) -> ((~ atleast5 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))) /\ (atleast5 X4 -> SNo_ X3 X4))) -> exactly5 X2) -> (~ SNo_ X4 X3))) -> (((((SNo X4 -> (((~ atleast3 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty)) -> exactly5 X4) /\ ((atleast2 (binrep (Power (Power (Power (Power Empty)))) Empty) /\ (atleast3 X2 /\ exactly3 X3)) /\ (~ exactly4 X3)))) -> atleast6 X4) -> (~ PNoLe (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (fun X5:set => ordinal (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty))) X3 (fun X5:set => (~ atleast4 (lam X1 (fun X6:set => X6)))))) -> ((~ exactly5 X2) -> (X3 :e X3)) -> ((((~ nat_p Empty) -> (((((~ (X4 = X3)) -> (atleast6 X3 /\ (((atleast3 X4 -> (~ atleast2 X3)) -> nat_p X2) -> (~ exactly4 X1)))) /\ (~ exactly2 X4)) -> (~ atleast6 X4)) /\ (~ exactly3 X3))) -> (~ exactly4 X4)) /\ ((~ nat_p (binrep (Power (Power (Power Empty))) (Power Empty))) -> (nat_p (binrep (Power (Power (Power Empty))) Empty) /\ (~ nat_p X2))))) /\ exactly4 (Union X4))) -> (~ ordinal X3)) -> (~ (X4 :e X1))) /\ exactly1of2 ((atleast2 X3 /\ (atleast5 X0 -> TransSet X4 -> (~ TransSet X3))) /\ ((((~ exactly3 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))) /\ (atleast6 X1 /\ atleast4 X3)) /\ (((~ atleast3 X3) -> (((~ atleast2 X2) -> atleast5 X0) /\ TransSet (setminus (setprod X4 X4) X3)) -> exactly4 X4) /\ atleast2 (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty))) /\ (set_of_pairs X4 /\ ((~ TransSet X3) /\ (((~ exactly5 X3) -> exactly5 X2) -> (~ TransSet X4)))))) (X1 :e ap (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty) (binunion X3 X3))) /\ (~ nat_p Empty)))))) /\ atleast4 X4)) -> (~ atleast2 X4)))) -> ((~ TransSet X3) /\ (((set_of_pairs X2 /\ ((((~ exactly5 (proj1 X4)) /\ (~ atleast5 X2)) /\ ((Empty :e X3) /\ (~ tuple_p (Power (Power (Power (Power Empty)))) (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty)))) /\ atleastp X4 X2)) /\ (~ set_of_pairs (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty))) -> tuple_p X2 X3))))))))) /\ ((((~ nat_p X0) -> (~ SNoLe Empty X4) -> nat_p X1) /\ exactly4 X3) -> (~ PNoLt X1 (fun X5:set => (~ exactly4 X0)) X4 (fun X5:set => (((~ exactly2 Empty) -> (((atleastp (Union X4) X5 /\ atleast4 X1) -> ((TransSet (Power (Power (Power (Power Empty)))) /\ atleast6 X0) /\ (((~ TransSet X1) -> ((X0 = binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty) /\ (~ atleast5 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty)))) /\ atleast6 X5)) -> ((atleast4 X1 -> ((~ atleast3 X1) -> (~ atleast5 X4)) -> (~ atleast5 X2) -> (exactly4 X4 /\ ((~ atleast2 X4) /\ (~ exactly3 X4)))) /\ (exactly4 X5 -> ((~ (Empty :e X4)) /\ (~ atleast5 X2))))) /\ (((((atleast6 X3 -> SNo X5) -> (~ SNo X2)) -> TransSet (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))) -> ((~ TransSet X5) /\ (~ atleast4 (binrep (Power (Power (Power (Power Empty)))) Empty)))) -> (~ exactly5 X0))) -> atleast2 (binrep (Power (Power (Power (Power Empty)))) (Power Empty))) /\ ((~ atleast6 X2) -> (TransSet X0 -> (atleast6 X0 /\ exactly5 X0)) -> atleast3 X5)))))) /\ (~ atleast6 X1)) /\ ((atleast5 X3 /\ ((~ nat_p Empty) /\ reflexive_i (fun X5:set => fun X6:set => (~ exactly2 X6)))) /\ (((~ atleast3 X2) -> (((((exactly2 (Inj1 X3) -> (~ atleast2 Empty) -> SNoLe X4 X1) -> (~ atleast5 X2) -> ordinal X3) /\ ((ordinal X1 -> ((~ atleast6 X3) /\ (~ set_of_pairs (Inj1 (proj0 Empty))))) /\ atleast2 X2)) -> (~ exactly2 X4)) -> (~ nat_p X4) -> (~ SNoLe X4 X3)) -> ((~ exactly2 (SNoElts_ X3)) /\ (~ TransSet (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty)))) /\ exactly2 Empty))))) -> ((~ atleast2 X2) /\ SNo X1))))) -> ((exactly2 (Inj1 X3) -> exactly3 (Power (binrep (Power (Power Empty)) Empty))) /\ atleast6 X4)) -> (~ atleast5 Empty) -> atleast6 X3))) -> (~ equip X4 X2)) -> exactly2 X3) -> exactly2 X2) -> (X4 :e X1)) /\ (forall X4 :e X3, atleast3 X1 -> ((~ exactly5 X0) -> ((~ ordinal X4) /\ ordinal X4) -> (exactly3 (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty) /\ ((~ (X3 :e X4)) /\ (atleast5 X2 -> ((((~ exactly5 (setprod (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty) (Sing Empty))) /\ atleast4 (binrep (Power (Power (Power Empty))) Empty)) /\ totalorder_i (fun X5:set => fun X6:set => (exactly5 Empty /\ (~ exactly2 X6)))) /\ (~ exactly3 Empty))))) -> setsum_p X4) -> atleast2 (PSNo X4 (fun X5:set => ((~ (X5 :e X4)) /\ (ordinal X0 -> exactly4 X4 -> ((~ (X5 c= X4)) /\ ((~ atleast6 X5) /\ (((setsum_p X1 /\ (~ (X5 = X2))) -> ((~ reflexive_i (fun X6:set => fun X7:set => (nat_p X6 /\ ((exactly2 X7 /\ ((~ ordinal X7) /\ (~ (X6 :e X4)))) /\ (TransSet X7 -> ((~ reflexive_i (fun X8:set => fun X9:set => setsum_p X8)) /\ ((~ exactly4 X6) /\ ((set_of_pairs X7 /\ (((~ (Empty :e X1)) -> (nat_p X4 /\ (~ ordinal X7))) -> ((((~ equip Empty X6) -> ((~ exactly4 X7) /\ (~ atleast6 X6))) -> ((~ exactly2 X7) /\ (~ SNoLt X6 (binrep (Power (Power (Power Empty))) (Power Empty))))) /\ (~ exactly3 X7)))) /\ ((~ atleast3 X0) /\ (~ exactly3 X5)))))))) -> (((((((((~ atleast6 X6) -> (atleast3 X5 /\ ((((~ atleast5 X6) /\ ((~ per_i (fun X8:set => fun X9:set => (~ atleast2 X9))) -> TransSet X6)) /\ (ordinal (binunion X7 Empty) /\ (~ atleast4 (SetAdjoin X6 X7)))) -> ((~ exactly5 X6) /\ (~ SNo X7)))) -> exactly4 (binrep (Power (Power (Power (Power Empty)))) Empty)) -> atleast5 X0) -> (Sing X1 c= X7)) -> (((~ atleast3 X7) /\ (atleast2 X7 -> (((~ nat_p X6) /\ ((~ exactly5 X6) -> (~ atleast6 X5))) /\ ((((~ reflexive_i (fun X8:set => fun X9:set => ((((~ exactly3 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty))) /\ (atleast5 X5 -> ((~ atleast6 X8) /\ ordinal X8))) /\ (exactly4 X9 -> exactly2 X8)) /\ (((~ (X8 :e X5)) -> ((((~ PNo_upc (fun X10:set => fun X11:set -> prop => ((X11 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty) -> ((X11 X4 -> X11 (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty) -> (~ setsum_p X4) -> X11 (Power (binrep (Power (Power Empty)) Empty))) /\ atleast3 X9)) /\ atleast4 (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty))) X8 (fun X10:set => ((((~ exactly4 X10) -> exactly2 X10 -> (atleast5 X10 /\ (~ atleastp X10 (proj0 Empty)))) -> (~ atleast3 X8) -> SNo X0 -> (~ SNo X3)) /\ (((exactly2 X9 -> (ordinal X10 /\ (~ atleast5 X0))) -> ((X9 c= X3) /\ (~ atleastp X10 X2)) -> (exactly4 X1 /\ (atleast3 X9 -> (~ tuple_p Empty X9)))) -> atleast4 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))))))) /\ (~ (Power (binrep (Power (Power Empty)) Empty) :e binrep (Power (Power (Power (Power Empty)))) Empty))) /\ TransSet (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)) /\ (~ set_of_pairs X2))) -> (~ nat_p X8))))) /\ atleast2 X6) -> (atleast6 X7 /\ (~ atleast3 Empty)) -> (~ ordinal X6)) /\ nat_p X0)))) -> ((atleast6 X7 /\ (atleast5 X6 /\ (((TransSet X3 /\ ((~ exactly4 X7) -> ((((~ exactly2 X6) -> (~ exactly4 X7)) /\ set_of_pairs X7) /\ (~ setsum_p X7)))) /\ atleast5 X1) /\ (~ atleast5 X2)))) /\ ((exactly3 X1 -> (~ exactly3 X7)) -> (equip X6 X1 /\ (((~ set_of_pairs X6) -> (~ atleast3 X5)) -> exactly5 X6))))) -> tuple_p X7 X7) -> (setsum_p Empty /\ atleast4 X7) -> (atleast6 X1 /\ (set_of_pairs Empty /\ ((~ set_of_pairs X1) -> exactly3 X3 -> nat_p X6)))) -> (~ atleast3 X1)) -> (((~ set_of_pairs X6) -> (~ nat_p X7)) /\ (~ atleast4 X6)) -> ((~ atleast6 X0) /\ nat_p X7)) -> tuple_p X0 X0) -> (nat_p (binrep (Power (Power (Power Empty))) Empty) /\ ((~ set_of_pairs X5) -> atleast3 (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))))))) /\ (~ ordinal Empty))) /\ (exactly3 (Inj1 X4) -> ((~ nat_p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty))) /\ (~ TransSet (binrep (Power (Power (Power (Power Empty)))) Empty))) -> (~ setsum_p X0))))) -> (~ partialorder_i (fun X6:set => fun X7:set => ordinal X2)) -> ((((~ nat_p X4) /\ ((ordinal X1 -> (~ atleast4 (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty))) /\ (((X2 :e X0) -> setsum_p X5 -> (((~ atleast6 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))) -> (~ atleast2 X5)) /\ (~ atleast5 X5))) /\ SNo X3))) /\ ordinal X4) /\ (atleast2 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) -> (exactly4 X5 /\ eqreln_i (fun X6:set => fun X7:set => (~ stricttotalorder_i (fun X8:set => fun X9:set => atleast4 (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty))) -> (((((~ nat_p X6) /\ (((((~ TransSet Empty) /\ (~ atleast2 X1)) -> ((exactly4 (binrep (Power (Power (Power Empty))) Empty) /\ (~ SNo (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)))) /\ set_of_pairs X7)) /\ (~ ordinal X7)) -> (~ TransSet Empty))) /\ (~ (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)) :e X5))) -> (~ atleast3 X1)) /\ SNoLe (binrep (Power (Power (Power Empty))) Empty) X7))))))) -> ((TransSet X2 /\ ((ordinal X2 -> (~ atleast6 Empty)) /\ (((~ nat_p X4) /\ ((atleast4 X0 -> (~ SNoLe X5 X3)) -> (~ exactly2 X2))) /\ (~ ordinal Empty)))) /\ (((~ exactly2 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty))) -> (((~ ordinal X0) -> (~ exactly2 X4)) /\ ((~ exactly2 Empty) /\ exactly4 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)))) -> ((~ TransSet X4) /\ (~ exactly5 (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty))) -> SNoLt X1 X4) -> nat_p X5)))))).
admit.
Qed.

Theorem conj_Random1_TMKaDL4suFdDiNMUBgGJn3mFnQCnCMwWYrg: forall X0:set, (forall X1 c= Empty, forall X2:set, (~ set_of_pairs X0) -> (forall X3 c= X1, forall X4:set, (~ stricttotalorder_i (fun X5:set => fun X6:set => (~ stricttotalorder_i (fun X7:set => fun X8:set => (exactly4 X8 /\ (((~ atleastp X5 X8) -> ((~ exactly3 Empty) /\ (~ ordinal X8))) -> nat_p X7 -> (~ exactly2 X8))))))) -> ((atleast4 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty) /\ ((~ atleast3 X3) -> TransSet X1 -> (~ exactly3 (binrep (Power (Power (Power Empty))) Empty)))) /\ TransSet X4))) -> (exists X1:set, ((~ nat_p X0) /\ ((forall X2 c= X1, (forall X3 :e X0, (((forall X4 :e X2, ((~ atleast3 X0) /\ ((~ atleast2 X4) /\ (((~ atleast4 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty))) /\ (~ atleast3 (binrep (Power (Power (Power (Power Empty)))) Empty))) /\ inj Empty (binrep (Power (Power (Power Empty))) Empty) (fun X5:set => binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty))))) -> (~ exactly5 X4) -> (~ (X4 :e X0))) /\ (forall X4:set, (((~ exactly4 X4) -> (~ atleast2 (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty))) /\ exactly3 (binrep (Power (Power (Power Empty))) (Power Empty))) -> SNo X2)) /\ ((forall X4 :e Empty, (~ (X4 :e X0))) -> (exists X4:set, ((exactly2 X2 -> (~ reflexive_i (fun X5:set => fun X6:set => TransSet X6))) /\ trichotomous_or_i (fun X5:set => fun X6:set => (~ atleast4 X6))))))) -> (((SNo (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) /\ linear_i (fun X3:set => fun X4:set => (exactly2 X1 /\ SNo (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty)))) /\ ((exists X3 :e X0, (~ ordinal (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty))) /\ (~ atleast5 X1))) /\ (forall X3:set, ((forall X4:set, setsum_p X1) -> ((exists X4:set, setsum_p X0) /\ (forall X4:set, SNo (binrep (Power (Power (Power (Power Empty)))) Empty) -> (exactly4 X3 /\ (((~ ordinal (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)) -> (exactly5 X2 /\ (~ SNo (Sing X3)))) /\ ((~ atleastp X3 X2) /\ (((~ PNo_downc (fun X5:set => fun X6:set -> prop => (~ ordinal X5)) X4 (fun X5:set => totalorder_i (fun X6:set => fun X7:set => (~ exactly5 X3)))) /\ setsum_p X4) /\ ((~ TransSet X4) /\ (exactly4 X0 -> ((atleast5 X4 /\ exactly2 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty)) /\ (((nat_p (Sep2 (Inj1 X3) (fun X5:set => X4) (fun X5:set => fun X6:set => exactly4 X6 -> (((~ atleast2 X6) -> (SNo (proj0 X5) /\ (((~ TransSet X5) /\ ordinal X5) /\ (atleast2 X0 -> ((ordinal X6 -> (~ atleast2 X6)) -> (~ exactly2 X5)) -> exactly3 X5 -> (~ exactly3 (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)))))) /\ (~ atleast5 X5)) -> (atleast6 Empty /\ ((~ TransSet X5) -> (~ exactly5 X0))) -> (~ exactly2 Empty) -> (~ exactly4 Empty))) /\ exactly2 X1) -> (((((~ exactly2 X0) -> exactly2 X3) /\ ((reflexive_i (fun X5:set => fun X6:set => (~ exactly3 X0)) /\ ((~ exactly3 X1) /\ (~ exactly5 X4))) -> exactly3 X4)) /\ (exactly3 X3 -> (~ atleast4 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))))) -> atleast2 X1 -> ((~ TransSet X0) /\ ((~ equip X3 X3) /\ ((TransSet X0 -> ((~ atleast5 X0) -> (~ atleast4 X1)) -> (~ symmetric_i (fun X5:set => fun X6:set => atleast5 X6))) -> (~ stricttotalorder_i (fun X5:set => fun X6:set => exactly2 X6))))) -> (~ atleast6 X4)) -> (~ atleast4 X4)) /\ ((~ SNoEq_ X1 X4 X1) /\ (((SNo X4 /\ (atleast2 X3 /\ ((~ TransSet X4) /\ (~ atleast2 X4)))) -> ((atleast4 X3 /\ ((((inj X3 Empty (fun X5:set => Empty) -> atleast5 X1) -> (~ SNo X3)) /\ (~ exactly2 X4)) -> (((~ atleast5 X4) /\ (~ TransSet X2)) /\ exactly5 X4))) /\ (~ (X4 :e X2)))) -> (exactly3 X1 /\ (exactly4 X1 -> exactly5 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))))))))))))))))) -> (exists X4:set, (exactly3 X4 /\ (atleast3 X4 /\ (atleast4 X3 -> (~ atleast4 X2)))))))) /\ (~ atleast5 (binrep (Power (Power (Power (Power Empty)))) (Power Empty)))))).
admit.
Qed.

Theorem conj_Random1_TMW1vZr4QjbS5TdPp29oCGWVSd7xqdnfns1: exists X0 :e Empty, exists X1 :e X0, ((exists X2 :e X1, forall X3 :e X1, forall X4:set, (((~ exactly2 X2) -> (~ exactly4 X2)) /\ (((~ exactly3 X4) -> nat_p X2) -> exactly5 X2))) /\ (~ reflexive_i (fun X2:set => fun X3:set => exists X4:set, ((~ ordinal X4) /\ ((~ atleast3 X3) /\ (((exactly4 (binunion X2 X3) -> (((atleast4 X3 /\ ((~ exactly3 (V_ (Inj0 X3))) -> atleast5 X4)) -> (((X0 = binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty) /\ (~ atleast4 (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty))) /\ (TransSet (Power (binrep (Power (Power Empty)) Empty)) /\ ((((((((((nat_p X4 -> exactly2 X4) /\ ((~ exactly3 X2) -> ((~ atleast3 X3) /\ (((((~ atleast2 X3) /\ (~ nat_p X2)) -> (~ (X3 :e X3))) -> reflexive_i (fun X5:set => fun X6:set => (~ linear_i (fun X7:set => fun X8:set => atleast5 X7)))) /\ (setsum_p X4 -> atleast6 X3))))) -> (~ exactly2 X3)) -> (((~ atleast5 X0) /\ (exactly5 Empty /\ (~ atleast3 X2))) /\ (~ ordinal X3))) -> (((exactly4 X3 -> (~ exactly2 X4)) /\ (((~ exactly5 (Inj0 X3)) -> ((exactly2 X4 -> setsum_p X4) -> (TransSet X1 /\ atleast6 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))))) -> atleast5 X2) /\ ((~ exactly3 X3) /\ (atleast2 X4 /\ exactly4 Empty)))) -> (((atleast2 (UPair X3 X2) /\ ((((atleast2 X3 /\ atleast5 X1) /\ (atleast2 X3 /\ (~ atleast6 X1))) -> ((exactly5 X1 /\ (atleast4 X4 -> ordinal (Inj1 X4))) -> SNo X2 -> (atleast3 X4 /\ (((((X1 c= X4) /\ (~ exactly2 X4)) -> atleast5 X2) /\ (~ SNo X1)) /\ (~ ordinal (Power (Power (Power (Power Empty)))))))) -> ((~ nat_p X1) /\ ((~ atleast2 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty))) -> ((atleast6 X3 -> (~ TransSet Empty)) /\ (exactly3 X4 /\ atleast5 X3)))) -> (((~ TransSet X3) -> exactly2 X4) /\ (exactly3 Empty -> (~ atleast4 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))))))) /\ ((~ TransSet X3) -> atleast4 X3))) /\ (~ TransSet X4)) -> SNo_ X3 X4) -> (exactly5 X4 /\ (~ atleast6 X4))) -> atleast6 X1) -> ((~ atleast2 X0) /\ (atleast4 (binrep (Power (Power (Power Empty))) (Power Empty)) /\ nat_p X1))) -> exactly3 X3) -> (SNo Empty /\ (~ equip X4 Empty))) -> atleast5 X3) /\ (((~ exactly5 X2) -> (equip (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) (binrep (Power (Power (Power Empty))) (Power Empty)) /\ (exactly4 X0 /\ (((~ ordinal X2) /\ (~ (X2 = X4))) -> ((atleast2 (setminus X4 X3) -> exactly5 X4 -> exactly2 X4 -> atleast3 X4) /\ (((~ atleast3 (Power (binrep (Power (Power Empty)) Empty))) /\ (~ atleast6 X4)) /\ ((~ set_of_pairs X4) /\ (~ exactly3 X0)))))))) -> inj Empty X1 (fun X5:set => X5)))))) -> ((~ atleast4 X2) /\ (~ nat_p (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)))) -> exactly4 X3) /\ (((inj X4 X2 (fun X5:set => X5) /\ (~ nat_p X4)) -> atleast6 (Inj0 (binrep (Power (Power (Power Empty))) Empty))) -> ((~ atleast6 X4) /\ (exactly4 Empty /\ (~ exactly4 Empty))))) /\ (~ ordinal X0))))))).
admit.
Qed.

Theorem conj_Random1_TMVyNJFtYSim3YoDoPQXudCQL8zM9jqUPU9: forall X0 :e binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty), exists X1 :e Empty, ((atleast2 X0 -> (forall X2:set, nat_p X2 -> (forall X3 :e X1, forall X4 c= X0, ((Union (V_ X1) c= Empty) -> (exactly4 X3 /\ ((((X0 c= X2) /\ ((~ atleast5 X3) /\ ((~ atleast5 X3) /\ (~ exactly5 (binrep (Power (Power (Power (Power Empty)))) (Power Empty)))))) /\ ((nat_p X4 /\ atleastp X4 X2) -> set_of_pairs X4)) /\ ((((~ exactly2 (binrep (Power (Power (Power Empty))) Empty)) /\ (~ setsum_p X4)) /\ (setsum_p X3 -> ((~ SNo X4) /\ (~ (Empty :e X3))))) -> ((~ setsum_p X4) -> nat_p X0) -> (((atleast2 (Power (Power (Power (Power Empty)))) -> (~ exactly4 X4)) -> (~ atleast2 X4)) /\ (~ nat_p X4)))))) -> ((~ setsum_p X1) /\ exactly2 X3)) -> (forall X3:set, (forall X4:set, (~ SNo X2)) -> (exists X4 :e X3, (((~ atleast3 (binrep (Power (Power (Power Empty))) (Power Empty))) -> (~ atleast2 X4)) /\ atleast5 X3))) -> (exists X3:set, ((X3 c= X1) /\ atleast6 (binrep (Power (Power (Power Empty))) (Power Empty)))))) /\ (forall X2 :e X1, forall X3:set, ((~ atleast3 X3) /\ atleast5 (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty)) -> ordinal X2)).
admit.
Qed.

Theorem conj_Random1_TMJ59S5uzEhEZ4ZXEUTTBuEnrXu78g5Y6fW: exists X0:set, forall X1 c= X0, exists X2:set, ((X2 c= X0) /\ (forall X3:set, (forall X4:set, ((((SNo X4 -> strictpartialorder_i (fun X5:set => fun X6:set => setsum_p X5)) /\ (((((~ atleast6 (Union X0)) -> (~ exactly4 Empty)) -> setsum_p (If_i ((((~ exactly3 (binrep (Power (Power (Power Empty))) Empty)) /\ atleast5 X4) /\ atleast4 X3) /\ atleast2 X2) (SetAdjoin X0 Empty) (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)))) /\ (atleast2 X3 -> (exactly5 (famunion X2 (fun X5:set => binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))) /\ (~ exactly2 X4)))) /\ (atleast4 X0 /\ (~ exactly2 (Power (Power (Power (Power Empty)))))))) /\ (atleast6 (SNoElts_ X1) -> ((~ atleast2 X4) /\ (((~ atleast6 X2) -> atleast6 (lam X4 (fun X5:set => X2)) -> ((((~ exactly4 X3) -> (~ atleast6 X2)) -> (((((~ atleast3 X0) /\ ((((~ SNo Empty) /\ (~ (X3 = X2))) /\ strictpartialorder_i (fun X5:set => fun X6:set => ordinal X4)) /\ ((((exactly3 X4 /\ ((((~ atleast3 X4) /\ (~ exactly2 X4)) -> (((~ TransSet (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty)) -> ((~ atleast6 (Power (binrep (Power (Power Empty)) Empty))) /\ (((~ setsum_p X0) -> exactly2 X3) /\ (~ SNo X1)))) /\ (~ TransSet X4))) -> (~ ordinal X3))) /\ nat_p (Sing (Inj1 X3))) -> (atleast6 X3 /\ atleast4 X3)) /\ ((~ atleast2 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty)) -> ((~ setsum_p X4) /\ ((((~ exactly3 (Power (Power (Power (Power Empty))))) -> ((~ exactly2 X3) /\ (~ nat_p X4))) -> exactly2 X2) -> (~ exactly4 X2) -> ((~ ordinal Empty) /\ (~ (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty) c= binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)))))))))) /\ atleast4 X3) /\ nat_p X4) /\ SNo (Power (binrep (Power (Power Empty)) Empty)))) /\ exactly3 X2)) -> ((~ exactly3 X0) -> (~ TransSet X3)) -> (((SNo X4 -> atleast2 X3) -> (~ atleast6 X1)) -> ((atleast4 X0 /\ (~ SNo X4)) /\ (~ linear_i (fun X5:set => fun X6:set => (~ atleast6 X5))))) -> (~ atleast2 X4))) -> ((~ TransSet X2) /\ SNo X2))) -> (~ exactly2 X4)) -> (X2 :e Empty) -> (atleast5 X4 /\ (((~ exactly4 X3) /\ (~ exactly3 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)))) -> nat_p X1))) -> (exactly3 X2 /\ setsum_p X2))).
admit.
Qed.

Theorem conj_Random1_TMS3EDbBZFJzgMToBqJSBQHfXgffL8sHP8c: forall X0 c= binrep (Power (Power (Power Empty))) (Power Empty), forall X1:set, (((forall X2:set, ((equip X0 X0 /\ ((~ exactly5 X0) -> (forall X3:set, forall X4 c= X0, (((~ atleast6 X3) /\ (~ exactly4 X2)) /\ atleast4 X1)))) /\ (exists X3:set, ((~ exactly4 X3) /\ (~ atleast4 X3)))) -> (exists X3 :e binrep (Power (Power (Power Empty))) (Power Empty), (~ atleast6 X0))) -> ((exists X2:set, ((X2 c= X1) /\ (~ exactly2 X0))) /\ (forall X2 :e X0, (forall X3 :e X2, forall X4 c= Empty, nat_p X4 -> set_of_pairs X3 -> ordinal X2) -> (forall X3:set, atleast6 X2 -> (exists X4:set, atleast5 X4) -> (exists X4:set, ((X4 c= X3) /\ (~ ordinal Empty))))))) /\ atleast5 X1) -> (~ exactly2 (Power (binrep (Power (Power Empty)) Empty))).
admit.
Qed.

Theorem conj_Random1_TMdWUezaeWNVY2Frq8i7d1NBK5g4kg5Boh9: forall X0 :e binrep (Power (binrep (Power (Power Empty)) Empty)) Empty, exists X1:set, ((forall X2:set, (exists X3:set, ((atleast2 X2 -> (~ atleast3 X3)) /\ (forall X4:set, (atleast3 X4 -> (~ atleast4 X3) -> ((((~ exactly3 Empty) -> ((((~ SNoLt X3 X3) /\ ((((~ exactly5 X3) -> TransSet X3) /\ (~ atleast6 Empty)) /\ (((((~ exactly2 X4) /\ ((((((~ atleast4 (Union (Power (Power (Power (Power Empty)))))) /\ (exactly2 X2 -> ordinal X4)) /\ ((((atleast2 X1 -> (~ exactly3 X3) -> ((~ atleast5 X3) -> atleast2 X4) -> nat_p X4) /\ ((~ reflexive_i (fun X5:set => fun X6:set => (~ (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty = Empty)))) -> ((~ exactly3 (Sing Empty)) -> (~ exactly4 (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty))) -> (~ atleast4 X3) -> (((~ TransSet X2) -> (~ atleast3 X3)) /\ ((~ ordinal Empty) /\ (~ PNo_upc (fun X5:set => fun X6:set -> prop => ((~ X6 X3) /\ nat_p X4)) X0 (fun X5:set => (~ exactly3 X2))))))) /\ (((nat_p X3 /\ (~ atleast2 X4)) /\ ((~ ordinal X2) -> (~ irreflexive_i (fun X5:set => fun X6:set => ((~ TransSet (Sep2 (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty) (fun X7:set => X6) (fun X7:set => fun X8:set => ((exactly3 X0 -> tuple_p X3 X6) /\ exactly2 X2) -> atleast2 X7))) /\ exactly5 X5))))) /\ (((atleast2 X3 /\ (TransSet X4 /\ exactly3 X2)) /\ (PNoLt (binrep (Power (Power (Power Empty))) Empty) (fun X5:set => ((~ exactly1of2 (atleast6 Empty /\ atleastp X4 X5) ((~ atleastp X5 (ordsucc X4)) /\ (~ exactly2 X5))) /\ ((((~ exactly3 X4) /\ nat_p (Power (binrep (Power (Power Empty)) Empty))) /\ (~ exactly4 X5)) -> exactly5 (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)))))) X4 (fun X5:set => (~ TransSet X5)) /\ atleast3 X3)) /\ ((reflexive_i (fun X5:set => fun X6:set => ((atleast3 X0 /\ (~ binop_on X6 (fun X7:set => fun X8:set => Empty))) /\ ((~ SNo_ X0 X5) -> (~ exactly5 X3)))) /\ (~ ordinal X3)) -> atleast6 X0)))) /\ ((((~ exactly1of3 (((~ atleast2 X4) -> (atleast2 X0 /\ ((reflexive_i (fun X5:set => fun X6:set => (~ nat_p X6)) -> (atleast5 X0 -> exactly2 X4 -> TransSet X3 -> (exactly3 X4 /\ (X3 :e X0))) -> (atleast4 X4 /\ (((~ set_of_pairs X3) /\ (~ atleast6 X1)) /\ (atleast2 X3 -> ((~ setsum_p (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty)) /\ exactly5 X3) -> ((exactly5 X4 -> (~ SNo X3)) /\ (~ atleast4 X2)))))) /\ (nat_p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty) /\ atleast6 X1)))) /\ (((~ exactly5 X2) /\ (~ ordinal X4)) -> ((((nat_p X2 -> (exactly2 X2 /\ (((((~ exactly3 X3) /\ ((~ exactly3 X0) /\ ((SNo X4 /\ exactly3 X4) -> ((atleast6 Empty -> ((((exactly5 X3 /\ setsum_p X4) -> ((exactly2 X2 -> exactly3 X4) /\ (~ exactly3 Empty))) -> exactly2 X4 -> ((~ set_of_pairs (SNoElts_ X3)) /\ ((~ exactly2 X3) /\ ordinal X2))) /\ TransSet X4)) /\ PNoLt_ X2 (fun X5:set => (~ SNo Empty)) (fun X5:set => ((~ atleast3 X4) /\ (~ exactly5 (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))))))) -> PNo_upc (fun X5:set => fun X6:set -> prop => ((~ X6 X4) -> X6 (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty)) -> (~ trichotomous_or_i (fun X7:set => fun X8:set => (~ atleast6 X8)))) X4 (fun X5:set => atleast6 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)))))) /\ SNo (ordsucc Empty)) /\ ((~ nat_p X3) -> (~ atleast3 X0) -> (~ setsum_p X4))) /\ (nat_p X4 /\ PNoLt_ (binrep (Power (Power (Power (Power Empty)))) Empty) (fun X5:set => exactly4 Empty) (fun X5:set => atleast6 X4 -> ((atleast3 X4 /\ TransSet X3) /\ (((~ atleast6 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty))) -> ((((~ ordinal X5) -> (~ atleast4 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))))) -> setsum_p X5) /\ (atleast5 X5 /\ SNoLe X5 (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)))))) -> ((~ atleast4 (Inj1 Empty)) /\ (~ atleast4 X2)) -> (~ atleast5 X5)))))))) -> (~ atleast5 X2)) /\ (~ reflexive_i (fun X5:set => fun X6:set => (((~ SNoEq_ X6 X5 (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty)) -> ((exactly4 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty) /\ (~ tuple_p (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))) X5)) /\ atleast6 X6)) -> (atleast6 X6 /\ (~ atleast5 X5))) -> (~ atleast6 X5)))) /\ ((~ trichotomous_or_i (fun X5:set => fun X6:set => exactly3 X0 -> ((X6 = X5) /\ (((~ (X0 c= X5)) /\ ((((~ exactly4 X5) -> exactly2 X5) /\ (atleast5 X6 -> (((((nat_p X0 /\ ((~ atleast3 X6) -> atleast2 X6 -> exactly4 X5)) /\ (atleast5 X6 /\ atleast5 X5)) /\ ((~ atleast6 (binrep (Power (Power (Power Empty))) Empty)) /\ exactly2 X5)) /\ ((~ exactly2 X2) -> ((TransSet X6 /\ (((~ exactly2 X0) -> ordinal X5) /\ (~ atleast3 X4))) /\ set_of_pairs (Sing X6)))) /\ (~ exactly2 X6)))) -> (~ set_of_pairs X4))) -> (~ (X6 :e binrep (Power (Power (Power Empty))) Empty)))) -> ((~ atleast2 X5) /\ nat_p X6) -> (atleast6 X5 /\ ((~ exactly4 X0) /\ exactly3 X6)) -> ((~ TransSet X0) /\ (((~ ordinal X6) /\ (equip X6 X0 -> (atleast4 X6 /\ (~ exactly5 X5)) -> ((~ atleast2 X1) /\ (TransSet X6 /\ ((~ atleastp X5 X3) /\ TransSet X6))) -> TransSet X0)) -> (~ atleast2 (binrep (Power (Power (Power (Power Empty)))) (Power Empty))))))) /\ (tuple_p X4 (binrep (Power (Power (Power Empty))) (Power Empty)) /\ (~ nat_p X0)))))) (~ reflexive_i (fun X5:set => fun X6:set => atleast2 X0 -> ((atleast4 Empty /\ (~ SNoLt X6 X6)) /\ ((((~ atleast2 (Union X6)) -> (~ TransSet Empty)) -> (~ ordinal X5)) -> (((~ set_of_pairs (Union X5)) -> ((reflexive_i (fun X7:set => fun X8:set => exactly4 X7 -> (~ nat_p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))))) -> (~ ordinal Empty) -> exactly4 X5) /\ (atleast2 X0 -> (~ atleast3 X5) -> (~ TransSet X1)))) -> (symmetric_i (fun X7:set => fun X8:set => (ordinal (Power (binrep (Power (Power Empty)) Empty)) /\ atleast4 (SNoLev Empty))) /\ symmetric_i (fun X7:set => fun X8:set => SNoLe (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty))) -> (exactly4 (ReplSep X4 (fun X7:set => ((((((~ reflexive_i (fun X8:set => fun X9:set => ((((((~ ordinal X8) -> ((atleast3 (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty) -> (((~ setsum_p (Power (Power (Power (Power Empty))))) -> ((~ tuple_p X9 X5) /\ (exactly4 X0 -> atleast5 X8))) /\ (((exactly3 X3 /\ (~ ordinal (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))))) /\ nat_p X9) /\ (~ exactly3 X8)))) /\ (reflexive_i (fun X10:set => fun X11:set => (~ atleast6 X11) -> atleast5 X11) /\ ((exactly4 X8 /\ ((~ atleast6 X9) /\ (~ exactly3 X8))) -> atleast3 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)))))) -> (~ exactly2 Empty)) -> (~ exactly4 X9)) /\ (TransSet Empty -> exactly2 X7)) -> (~ atleast2 (binintersect X9 (ReplSep X8 (fun X10:set => ((~ atleast3 X10) /\ TransSet X9)) (fun X10:set => binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty))))) -> atleast6 X9)) /\ (((~ atleast4 (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)) -> (exactly3 (UPair (Power (Power (Power (Power Empty)))) (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty))) /\ exactly5 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)))) /\ ((((~ atleast3 X7) /\ ((~ SNo (Power X6)) /\ inj X6 X7 (fun X8:set => X0))) -> ((~ nat_p X7) /\ exactly4 (UPair X7 X6))) /\ atleast2 X7))) /\ (~ atleast5 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty))) /\ (~ nat_p X7)) -> exactly3 Empty -> atleast6 (Power (binrep (Power (Power Empty)) Empty))) /\ exactly2 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)))) (fun X7:set => X6)) -> ordinal X5) -> (X5 :e X5))))) ((~ nat_p (Power (Power (Power (Power Empty))))) /\ ((reflexive_i (fun X5:set => fun X6:set => ((~ exactly3 X5) /\ PNoLe X0 (fun X7:set => (~ exactly5 (Power (binrep (Power (Power Empty)) Empty)))) X5 (fun X7:set => (((~ TransSet X6) -> (((((~ atleast3 (Inj1 X3)) -> (setsum_p X6 /\ (atleast6 X6 -> SNoLe (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)))) -> (((((~ (X4 :e X1)) /\ (~ setsum_p X4)) /\ atleast4 X6) -> (~ atleast3 X7)) /\ (exactly5 X7 -> (X7 :e Empty)))) /\ (totalorder_i (fun X8:set => fun X9:set => (~ setsum_p X9)) /\ (~ setsum_p X6))) /\ set_of_pairs (binrep (Power (Power (Power Empty))) Empty)) /\ (((~ exactly2 (Power (binrep (Power (Power Empty)) Empty))) /\ (~ ordinal X7)) -> (~ exactly3 X0)))) /\ (((~ set_of_pairs (famunion X6 (fun X8:set => X1))) -> (((binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)) :e X7) /\ ((~ inj Empty X4 (fun X8:set => X7)) -> (~ bij X7 X2 (fun X8:set => X5)))) -> (~ (X6 :e X2))) -> nat_p X6) -> (~ atleast3 X6) -> (atleast3 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty) /\ exactly4 X0) -> (~ atleast3 X1))))) -> atleast6 X6) -> ((trichotomous_or_i (fun X5:set => fun X6:set => (~ stricttotalorder_i (fun X7:set => fun X8:set => ((~ exactly5 X7) /\ (((~ atleast6 (Sing (Inj1 Empty))) -> (~ exactly3 X8) -> ((~ nat_p X7) /\ atleast6 X8)) -> atleast6 X8))))) -> (((ordinal (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty) -> (((exactly3 X3 -> (atleast2 X0 /\ TransSet X4)) -> (~ SNo X3)) /\ set_of_pairs X3)) /\ exactly5 X3) /\ (atleast3 X4 /\ ((~ atleast6 X4) /\ ((~ setsum_p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))) -> (atleast4 X3 /\ equip (Unj (V_ X4)) X3)))))) /\ (((exactly2 X3 -> ((~ atleast4 (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)) /\ (~ setsum_p X4))) -> (~ exactly5 Empty)) -> (((atleast3 Empty -> (((~ nat_p X3) /\ nat_p X3) /\ (~ PNoLt_ Empty (fun X5:set => ordinal X5) (fun X5:set => (~ set_of_pairs X5) -> (~ exactly2 (Power (binrep (Power (Power Empty)) Empty))))))) -> (atleast4 X4 -> (~ ordinal Empty)) -> (atleast6 X4 -> (~ ordinal (binrep (Power (Power (Power Empty))) Empty))) -> (~ exactly2 X4)) /\ exactly2 X3))) -> (~ ordinal X4)) -> (trichotomous_or_i (fun X5:set => fun X6:set => (~ ordinal X0)) /\ (~ exactly3 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))))))) /\ exactly4 X4) -> (~ SNo_ (binrep (Power (Power (Power Empty))) Empty) X2)) /\ (TransSet X1 /\ (~ set_of_pairs X3))))) -> (((~ ordinal (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)) /\ (equip (Sing X4) X4 /\ (~ exactly4 X3))) -> (~ setsum_p X0)) -> (~ ordinal X4)) -> (~ atleast3 X4)) -> (atleast3 X4 /\ (((~ exactly4 X2) /\ (~ (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty) :e X4))) -> (~ SNo X3))))) /\ exactly4 (Power X2)) -> ((~ atleast6 X3) -> atleast4 Empty) -> (((((~ atleast3 X3) -> ((~ exactly5 X0) /\ (((atleast2 X0 /\ (~ setsum_p X4)) -> (~ exactly5 X2)) /\ ((~ nat_p X2) /\ ((atleast5 X1 /\ (reflexive_i (fun X5:set => fun X6:set => ((atleast6 X6 -> nat_p X1) /\ ((((((~ nat_p X6) /\ (((atleast2 X6 -> ((nat_p (Union X6) /\ (ordinal X5 /\ ((((((~ exactly2 X5) -> ((~ atleast2 X5) /\ (set_of_pairs X0 /\ (~ nat_p X3)))) -> ((SNo X1 -> (~ exactly2 (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty))) /\ (X6 :e Power (binrep (Power (Power Empty)) Empty)))) -> (~ atleast2 X2)) -> exactly2 X6) /\ ordinal X4))) -> ((((((TransSet X6 /\ (atleast2 X0 /\ ((X6 :e X6) -> (~ exactly5 X0)))) /\ TransSet X3) -> (~ atleast2 X0)) -> ((~ ordinal X5) /\ SNo X6)) /\ (~ (Empty :e X6))) /\ (~ SNo_ X5 X5))) -> (~ setsum_p X2) -> TransSet (PSNo X5 (fun X7:set => (~ exactly2 X0)))) -> (~ atleast3 X6)) -> ((exactly4 X5 /\ ((((~ atleast2 X5) -> (~ atleast4 X5)) /\ exactly4 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty)) -> (~ atleast2 X6))) /\ ((setsum_p X6 /\ ((((~ SNo_ X5 X6) -> (~ atleast5 X5)) -> (atleast5 X6 /\ ((exactly5 X5 -> linear_i (fun X7:set => fun X8:set => (((ordinal X8 -> (~ ordinal (binrep (Power (Power (Power (Power Empty)))) (Power Empty)))) -> (atleast6 X8 /\ ((((~ atleast4 X7) -> (~ TransSet X8)) /\ SNoEq_ (binrep (Power (Power (Power (Power Empty)))) Empty) X7 X7) /\ (~ setsum_p X2))) -> (((exactly4 (binrep (Power (Power (Power Empty))) (Power Empty)) -> (~ SNo_ X7 Empty)) -> exactly5 Empty) /\ ((~ atleast5 X1) -> atleast6 X7 -> reflexive_i (fun X9:set => fun X10:set => ((exactly4 (Power X9) /\ (atleast2 X9 /\ ((~ TransSet X0) /\ SNoLt Empty X9))) /\ (((((~ ordinal X10) -> (X10 :e X10) -> (((~ equip X9 X9) /\ exactly4 X9) /\ (~ PNoLe X9 (fun X11:set => atleast2 (binrep (Power (Power (Power Empty))) (Power Empty))) X10 (fun X11:set => TransSet X11)))) /\ (atleast2 X10 /\ (atleast6 X10 -> (~ atleast6 X9)))) -> (~ atleast4 X0)) /\ atleast3 X9)))))) /\ ((~ linear_i (fun X9:set => fun X10:set => (~ atleast2 (SNoLev X0)))) /\ ((((((~ atleast3 X6) -> exactly4 X1) /\ (~ exactly3 X7)) /\ atleast2 X6) -> atleast5 X4) -> exactly3 Empty))))) -> (~ TransSet X5)))) -> SNo X6)) -> exactly5 X6 -> strictpartialorder_i (fun X7:set => fun X8:set => ((TransSet X8 /\ (~ atleast3 X7)) /\ atleast5 (binrep (Power (Power (Power Empty))) Empty))))) -> (~ atleast3 X5))) -> ((~ exactly2 (binunion Empty X6)) -> (~ exactly2 X4)) -> ordinal X6 -> (((~ atleast3 (binrep (Power (Power (Power Empty))) Empty)) -> atleast5 X6) /\ (~ set_of_pairs (binrep (Power (Power (Power (Power Empty)))) (Power Empty))))) /\ (atleast4 (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))) /\ atleast3 X4)) /\ ordinal X2) -> (~ ordinal X2)))) /\ (ordinal X2 /\ (~ nat_p X4)))) -> ((~ atleast3 Empty) -> (~ exactly3 X4)) -> atleast4 X3)))) -> (~ atleast3 (proj0 X4)) -> ((~ (X3 :e X0)) /\ ((~ exactly4 X4) -> (~ ordinal X3))) -> exactly5 X2) /\ (~ atleast2 X4)) /\ ((~ SNo (binrep (Power (Power (Power (Power Empty)))) Empty)) /\ ((((~ SNo X2) /\ exactly3 X3) /\ ((atleast4 (SNoElts_ X0) -> (((~ atleast5 (binrep (Power (Power (Power (Power Empty)))) (Power Empty))) -> atleast2 X3) /\ (((~ SNo X3) -> (atleast6 X3 /\ (~ setsum_p X4))) -> (~ exactly5 X4)))) /\ ((X3 :e X4) -> exactly2 X2))) -> (((~ atleast6 X2) /\ (TransSet (Power (Power (Power (Power Empty)))) -> set_of_pairs X3)) /\ ((~ exactly4 X4) /\ eqreln_i (fun X5:set => fun X6:set => (((((reflexive_i (fun X7:set => fun X8:set => (exactly4 X7 /\ atleast3 X7)) /\ exactly5 X6) /\ (((exactly4 X5 /\ ((((~ TransSet X0) /\ (((~ atleast5 X0) /\ (~ atleast3 X0)) -> (~ exactly1of2 (ordinal X5 /\ ((~ ordinal Empty) /\ (exactly5 Empty -> (X4 :e X6)))) (bij X6 X5 (fun X7:set => X7))))) /\ (~ atleast3 (Power (binrep (Power (Power Empty)) Empty)))) -> ((~ exactly5 X6) /\ (~ tuple_p (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty) X0)))) -> ((~ exactly1of3 ((((~ nat_p X5) /\ (~ ordinal X6)) -> (~ exactly4 Empty)) -> (equip X5 X6 /\ exactly2 X3)) (((((~ nat_p X4) -> (~ TransSet (Inj0 X5))) -> ((~ atleast6 X4) /\ exactly5 X3)) -> (nat_p X6 /\ ((~ set_of_pairs X6) -> SNo X1))) /\ TransSet X2) (ordinal X5)) /\ (~ ordinal X0))) /\ (~ exactly3 X1))) /\ ((~ exactly2 X5) /\ TransSet X5)) /\ ((~ exactly4 X2) /\ atleast4 (binrep (Power (Power (Power Empty))) (Power Empty)))) /\ exactly3 X6) -> atleast3 X3)))))) /\ ((~ atleast5 X3) -> ((~ atleast5 X4) /\ (ordinal X3 /\ (((~ exactly4 (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)) -> ((~ eqreln_i (fun X5:set => fun X6:set => (exactly5 X5 -> exactly2 X5 -> (~ equip X6 X5)) -> equip (Power X5) X0)) /\ (~ atleast3 X3))) -> (~ atleast3 X2))))))) -> (~ exactly3 X3)))) /\ setsum_p Empty) /\ (~ atleast5 (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)))) /\ ((~ exactly4 X3) /\ (atleast6 X4 -> ((~ exactly5 Empty) /\ (atleast6 X4 -> ((SNo (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))) -> (~ exactly2 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty))) -> (~ (Power (binrep (Power (Power Empty)) Empty) :e X0))) -> (~ ordinal (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty))))))) /\ (atleast6 (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty) /\ setsum_p X3))) -> SNo_ X4 Empty))) -> (exists X3 :e X0, exists X4:set, (~ exactly5 X3) -> exactly2 (binrep (Power (Power (Power Empty))) (Power Empty)))) /\ (exists X2 :e X1, (~ exactly4 (Sing X0)))).
admit.
Qed.

Theorem conj_Random1_TMMxFuMZ8p3wtyxeQnwJuNFCmsPxdW11TNG: forall X0:set, exists X1:set, ((exists X2:set, (((exists X3:set, ((X3 c= X2) /\ (forall X4 c= X3, exactly4 X3))) /\ (atleast5 X1 -> (exists X3:set, exists X4:set, ((X4 c= X3) /\ nat_p X3)))) /\ (~ setsum_p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty))))) /\ (~ TransSet (Power (Power (Power (Power Empty)))))).
admit.
Qed.

Theorem conj_Random1_TMNrc2KCLxTd3yiUGAs56oZUEsPV1EYTR6Y: exists X0:set, forall X1 :e binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty, forall X2:set, ((exists X3:set, ((X3 c= Unj Empty) /\ (exists X4 :e X0, exactly3 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty) -> (~ nat_p (Unj X3))))) /\ (forall X3 :e binrep (Power (Power (Power Empty))) (Power Empty), (((exists X4:set, (((~ atleast2 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty))) /\ set_of_pairs X0) /\ (((~ exactly3 X3) /\ (atleast4 (Power X2) /\ ((~ exactly2 X2) -> (~ atleast3 X1)))) /\ ((~ atleast5 X2) -> atleast4 X3)))) /\ (forall X4 c= combine_funcs (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))) X0 (fun X5:set => X1) (fun X5:set => X0) X3, atleastp Empty (binrep (Power (Power (Power Empty))) Empty))) /\ (exists X4:set, (atleast5 X3 /\ nat_p Empty))))).
admit.
Qed.

Theorem conj_Random1_TMRX9PjGutHoE4dx51GKvGBQ3Tb5QadGwhM: forall X0:set, (exists X1:set, ((~ atleast4 X0) /\ (nat_p X1 /\ (exists X2 :e X0, ((((~ exactly2 Empty) -> (exists X3:set, (((exists X4 :e X2, (~ tuple_p X2 X4)) /\ (forall X4:set, (~ exactly4 X4) -> (((~ exactly2 X3) /\ ((~ exactly4 X4) /\ ((~ exactly4 (If_i ((~ atleast2 X3) /\ ((~ atleast6 X3) -> (SNo X2 -> (~ nat_p (binrep (Power (Power (Power Empty))) (Power Empty)))) -> ((~ atleast6 X3) /\ SNo_ X2 X3))) X3 X3)) -> (TransSet X1 /\ SNo X4) -> (((~ exactly2 X1) -> reflexive_i (fun X5:set => fun X6:set => atleast5 Empty)) /\ ((~ atleast6 X4) -> (~ exactly4 (Power (Power (Power (Power Empty)))))))))) /\ exactly5 X3))) /\ (exists X4:set, ((X4 c= X0) /\ (~ atleast3 (binrep (Power (Power (Power (Power Empty)))) Empty))))))) /\ (forall X3:set, exists X4:set, ((~ atleast5 X3) /\ (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty :e binrep (Power (Power (Power (Power Empty)))) Empty)))) /\ (exists X3:set, setsum_p X1)))))) -> (forall X1:set, exactly2 X1).
admit.
Qed.

Theorem conj_Random1_TMcpceQpQNqYrFSdTcmp9eocBpjej63CHBi: forall X0 c= setprod (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty, forall X1 c= Empty, forall X2 c= Union X0, ((forall X3 :e X1, forall X4:set, ((PNoLe X3 (fun X5:set => (((~ atleast5 X4) /\ (set_of_pairs X1 /\ ((~ exactly4 (V_ Empty)) /\ ((atleast4 X1 /\ exactly2 X4) /\ (~ exactly4 X2))))) /\ (~ atleast4 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty))))) (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))) (fun X5:set => exactly5 Empty) -> (~ nat_p X2)) /\ atleast5 X3)) /\ (ordinal Empty -> ordinal (SetAdjoin X1 X0))).
admit.
Qed.

Theorem conj_Random1_TMPncFFKDBfyAiv3xiPJaCwBjeHmqB2fhpz: exists X0:set, forall X1:set, (forall X2:set, (forall X3 :e X2, (~ ordinal X2)) -> (exists X3:set, (exactly2 X2 /\ ((((forall X4:set, (exactly4 X3 /\ (((~ exactly4 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty)) /\ (((atleast6 X2 -> (~ nat_p X2)) /\ ordinal X2) /\ (((~ atleast6 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))) /\ (~ atleast6 X2)) /\ ((~ exactly4 Empty) -> (((~ atleast2 (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)) /\ (((~ exactly3 Empty) /\ ((~ atleast2 X4) /\ (~ exactly4 X1))) -> atleast2 (binrep (Power (Power (Power (Power Empty)))) (Power Empty)))) /\ (~ setsum_p (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty))))))) -> (~ exactly2 X3)))) -> (~ atleast2 Empty)) -> (forall X4:set, (~ atleast3 Empty) -> ((~ TransSet X3) -> exactly5 X3 -> setsum_p (In_rec_i (fun X5:set => fun X6:set -> set => X5) X3)) -> exactly2 X4 -> ordinal (binrep (Power (Power (Power (Power Empty)))) Empty))) /\ (forall X4:set, (~ (X4 :e X2))))))) -> (forall X2:set, atleast6 X1 -> ((exactly5 X0 -> (exists X3:set, ((X3 c= X2) /\ (~ (X3 c= X3))))) /\ atleast3 X1)).
admit.
Qed.

Theorem conj_Random1_TMKGg6bjyafH3UEZ9AVdDgdKtDs2o3L2K5M: exists X0:set, ((X0 c= binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty) /\ (exists X1:set, ((exists X2:set, ((exists X3 :e X1, (~ ordinal (binrep (Power (Power (Power Empty))) Empty))) /\ (exists X3:set, ((forall X4 :e X3, ((~ nat_p X3) /\ (~ atleast5 X0))) /\ (forall X4 c= ordsucc X3, ((~ TransSet (ordsucc X4)) /\ (((((~ atleast2 X4) -> atleast2 (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty)) -> atleast3 (Inj0 X2)) /\ (~ SNo X4)) -> exactly2 (Power (binrep (Power (Power Empty)) Empty)) -> (set_of_pairs Empty -> (~ reflexive_i (fun X5:set => fun X6:set => atleast2 X0))) -> (((atleast4 X0 -> (X4 :e X4)) -> (((X1 :e X3) -> ordinal X3) /\ (~ atleast4 X3))) -> (((((~ exactly4 (Inj1 (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))))) -> exactly3 Empty) -> ordinal X3) -> atleast5 (Power X4)) -> ((nat_p Empty /\ SNo (binrep (Power (Power (Power (Power Empty)))) Empty)) -> ((nat_p X4 /\ (~ exactly5 X1)) -> SNo_ X3 X2) -> exactly4 X2) -> exactly5 X2 -> (TransSet X3 /\ (exactly2 X0 /\ (~ exactly3 X4)))) -> exactly4 X3) -> ((reflexive_i (fun X5:set => fun X6:set => TransSet X6) /\ ((~ TransSet X4) /\ (atleast2 X2 /\ exactly2 X4))) /\ (~ exactly4 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))))))))))) /\ ((forall X2 :e X1, atleast2 X2) /\ (exactly3 X1 /\ exactly3 X1))))).
admit.
Qed.

Theorem conj_Random1_TMHHNhV8Kf4qQtiRNYhHucq3HF6gAE2ZmxL: forall X0:set, forall X1:set, ((exists X2 :e X0, forall X3:set, exists X4:set, (~ setsum_p X0)) -> (forall X2 c= Empty, (((exists X3:set, (~ atleast5 X3)) -> (exists X3:set, ((X3 c= Power X1) /\ ((exists X4 :e X3, ((totalorder_i (fun X5:set => fun X6:set => (~ TransSet X6)) -> TransSet X3) /\ ((~ ordinal (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty)) /\ exactly2 Empty))) -> (~ set_of_pairs X2))))) /\ (~ atleast4 X1)))) -> (~ SNo X1).
admit.
Qed.

Theorem conj_Random1_TMJqB1iZtcmcnmmj4zHkt6tvjHWaRRjgcAf: exists X0:set, ((X0 c= Sing (Inj1 Empty)) /\ (exists X1:set, (atleast6 (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty) /\ (forall X2 :e X1, ((exists X3 :e X2, exists X4:set, ((X4 c= X2) /\ (~ TransSet X4))) /\ (forall X3:set, forall X4:set, (~ TransSet (Sing X3)) -> ((~ exactly3 X3) /\ ((~ exactly5 X3) -> (atleast6 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) /\ ((((~ PNoLt X1 (fun X5:set => SNoLt X4 X1 -> atleast2 X1) X4 (fun X5:set => ((SNo_ X4 X5 /\ (((((((reflexive_i (fun X6:set => fun X7:set => (~ SNoLt (setsum X6 Empty) Empty)) -> (((((nat_p (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))) /\ (((ordinal X4 /\ (((exactly4 X5 -> bij X4 X5 (fun X6:set => Empty)) /\ ((~ atleast6 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))) -> (~ SNoEq_ X5 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) X5))) /\ (ordinal X4 -> (Power (Power (Power (Power Empty))) = binrep (Power (Power (Power Empty))) (Power Empty))))) /\ (~ atleast5 X2)) /\ (((atleast4 X2 -> reflexive_i (fun X6:set => fun X7:set => (~ ordinal X6)) -> (~ (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty :e X4))) -> nat_p Empty) /\ ((ordinal (binrep (Power (Power (Power Empty))) Empty) -> TransSet X2) -> ((~ nat_p X4) /\ atleast4 X4) -> (~ exactly5 X4))))) -> atleast4 X0 -> ordinal X5) /\ ((exactly4 X2 -> (~ ordinal X5)) /\ (~ atleast6 (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)))) -> exactly4 X2) /\ ((~ exactly4 X2) -> set_of_pairs X4))) /\ ((~ atleast3 X4) /\ ((((exactly5 X4 -> atleastp X4 Empty) -> (~ setsum_p X1)) /\ (~ (X5 = Empty))) /\ atleast6 X5))) -> ordinal X0) -> (~ exactly5 X3)) -> ((~ atleast2 X5) -> (~ exactly2 X0) -> (atleast2 X2 /\ (~ exactly5 (binrep (Power (Power (Power Empty))) Empty)))) -> (~ binop_on X5 (fun X6:set => fun X7:set => X3))) /\ (atleast6 X0 /\ (Power (Power (Power (Power Empty))) :e X5))) -> ((X4 :e X5) -> (~ exactly3 X3) -> exactly2 X5 -> binop_on (add_nat X5 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty)) (fun X6:set => fun X7:set => X6) -> (~ atleast5 X4)) -> atleast5 X5 -> (~ exactly5 X3))) /\ (~ exactly4 X3)))) -> (~ exactly3 (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty))) -> (exactly4 X4 -> exactly5 X3 -> (~ TransSet X3)) -> exactly2 X3) /\ (~ atleast4 X4))))))))))).
admit.
Qed.

Theorem conj_Random1_TMcgdaBGfKewahqjhbs8MKT1m34UvK9z6qw: forall X0 :e binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty, exists X1 :e X0, (((forall X2:set, PNoEq_ X0 (fun X3:set => exactly4 Empty -> (exists X4:set, ((X4 c= X2) /\ (~ atleast4 X0)))) (fun X3:set => forall X4:set, ((~ atleast3 (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)))) /\ (~ ordinal X0)))) /\ (exists X2 :e setprod X1 X1, (~ trichotomous_or_i (fun X3:set => fun X4:set => (~ atleast3 (Union X2)))))) /\ (forall X2 :e X1, forall X3:set, forall X4:set, ((((atleast3 X4 /\ (((~ nat_p Empty) -> nat_p X3) /\ (~ TransSet X2))) -> PNoLt X3 (fun X5:set => (~ atleast5 X5)) X0 (fun X5:set => atleast6 X5)) /\ ((exactly2 X2 -> (atleast5 X2 /\ ((~ atleast4 X0) /\ exactly4 X3))) -> (ordinal X3 /\ exactly5 X4))) -> (~ nat_p X1) -> (X4 :e X3)) -> atleast6 X4)).
admit.
Qed.

Theorem conj_Random1_TMUxAi7EPPgnsqda19SBVyQ3cQAg3Uo2gZ4: exists X0:set, exists X1:set, ((X1 c= X0) /\ ((((forall X2 c= X1, forall X3:set, atleast4 X3 -> ((forall X4 c= binrep (Power (Power (Power (Power Empty)))) Empty, (~ exactly2 (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty))) /\ (((forall X4:set, ((~ SNoLt X3 X4) /\ (~ atleast6 Empty))) /\ (exists X4:set, ((((~ nat_p X0) -> (~ exactly5 (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty))) -> ((((binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty :e X0) /\ set_of_pairs X4) /\ (~ TransSet (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty))) -> ((~ TransSet X4) /\ (~ atleast6 X4))) -> ((~ exactly5 X3) -> (X1 c= X3)) -> (~ atleast6 X4)) /\ atleast5 X1))) -> (~ SNo X1)))) /\ (exists X2:set, ((X2 c= X1) /\ (exists X3:set, forall X4:set, (~ tuple_p X3 (Power (Power (Power (Power Empty))))) -> (((~ exactly5 X4) -> ((~ exactly5 X3) /\ (~ exactly4 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))))) /\ ((((exactly3 X4 /\ atleast4 X2) /\ (~ set_of_pairs X0)) -> ((~ atleast6 X3) /\ ((~ atleast3 (Sing Empty)) -> ((SNo X3 /\ (~ atleast3 Empty)) /\ ((((exactly3 X4 /\ (~ atleast2 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)))) /\ ((~ exactly4 X3) /\ (~ SNoLt X4 X2))) /\ (atleast2 X2 -> ((~ exactly5 X0) /\ atleast2 X3))) /\ (~ atleast3 X0))))) -> (~ atleast5 X2)) -> ((~ atleast6 X4) /\ (~ atleast6 X1)) -> atleast4 X4)))))) /\ (forall X2:set, forall X3 :e X1, exists X4:set, ((X4 c= X1) /\ exactly2 X1))) -> (atleast5 (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))) /\ PNo_upc (fun X2:set => fun X3:set -> prop => exists X4 :e X1, atleast5 X2) X1 (fun X2:set => forall X3:set, ((forall X4:set, ((~ exactly4 X2) /\ (atleast3 X4 -> ((eqreln_i (fun X5:set => fun X6:set => atleast4 Empty) /\ ((~ SNo X3) /\ ((~ TransSet X4) -> (~ SNo X3)))) /\ ((~ ordinal X0) -> TransSet Empty))))) /\ (forall X4:set, ((SNoLe X2 X3 -> exactly2 X4) /\ (~ nat_p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))))) -> (~ exactly4 X4))) -> ordinal X2)))).
admit.
Qed.

Theorem conj_Random1_TMMUXeTzGW9gXMcuaxMwUt9HxP8AY9gruzX: forall X0 :e binrep (Power (binrep (Power (Power Empty)) Empty)) Empty, forall X1:set, forall X2:set, (~ atleast5 X0) -> (exists X3:set, ((~ setsum_p X1) /\ (exists X4:set, ((~ SNo X2) /\ ((atleast4 X3 -> ((exactly2 X2 -> (~ (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty :e Empty))) -> stricttotalorder_i (fun X5:set => fun X6:set => ((~ (X3 :e X1)) /\ (((atleast2 (V_ Empty) /\ (atleast2 X5 -> (nat_p Empty /\ SNo Empty))) /\ (~ trichotomous_or_i (fun X7:set => fun X8:set => ordinal X7))) /\ ((~ (X6 :e X5)) /\ (atleast2 X0 /\ atleast6 X0)))))) -> (~ setsum_p X3)) -> (~ nat_p (Power (Power (Power (Power Empty))))) -> (~ exactly4 X2)))))).
admit.
Qed.

Theorem conj_Random1_TMbm9FVPoEuMHStK2svKxfNPrLvo31K3vt4: forall X0 c= Empty, exists X1:set, ((X1 c= Empty) /\ ((exists X2 :e X1, exactly5 X2) /\ (forall X2:set, forall X3 c= X2, (((atleast2 X1 /\ (exists X4:set, ((~ atleast2 Empty) /\ ordinal Empty))) /\ (exactly3 X2 -> ((X0 :e X2) /\ (exists X4 :e binrep (Power (binrep (Power (Power Empty)) Empty)) Empty, SNo X0)))) /\ (forall X4 c= X2, ((((exactly4 X4 -> (~ exactly4 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)))) /\ ((~ TransSet X4) /\ exactly2 X4)) -> exactly5 X2) -> (atleast5 X4 /\ ((~ atleast4 X4) /\ (atleast6 X0 -> (~ TransSet (binrep (Power (Power (Power (Power Empty)))) (Power Empty))))))) -> (~ TransSet (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty))))))).
admit.
Qed.

Theorem conj_Random1_TMMYD3CSnpkbzApiFyit1txz8qx4n3XG3ni: forall X0 :e binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)), forall X1 :e binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty), exists X2 :e binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty, forall X3:set, ((~ atleast2 X3) /\ (exists X4:set, (((~ nat_p X1) -> (((~ TransSet X2) /\ (exactly2 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty) -> (~ atleast5 X2))) /\ ((~ ordinal X3) /\ (~ ordinal X1)))) /\ (nat_p Empty -> atleast4 X4)))) -> atleast4 X3.
admit.
Qed.

Theorem conj_Random1_TMLfTshnBYQKMWxMNiKKbnmVivnKDX39hDj: exists X0 :e Union Empty, forall X1 :e binrep (Power (Power (Power Empty))) (Power Empty), forall X2 c= Inj0 X0, forall X3:set, (~ PNoLt X1 (fun X4:set => (~ bij X2 X1 (fun X5:set => X4)) -> ((((((atleast2 (binrep (Power (Power (Power Empty))) Empty) /\ ((~ atleast4 X3) /\ ((~ atleast6 X2) /\ ((TransSet Empty -> ((((bij X2 X3 (fun X5:set => X4) -> (~ exactly5 X1) -> (~ nat_p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)))) -> atleast3 (binrep (Power (Power (Power (Power Empty)))) Empty)) -> ordinal X3) -> (~ TransSet X3)) -> (atleast2 Empty /\ (set_of_pairs X3 /\ atleast3 (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)))) -> atleast3 X3)))) -> exactly2 X2) /\ atleast2 (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)))) /\ (((atleast2 X3 /\ (((~ atleast3 X0) -> (((((((~ atleast4 X3) -> (ordinal Empty /\ (~ atleast5 (binrep (Power (Power (Power (Power Empty)))) Empty)))) /\ ((~ (Sing X2 :e X1)) /\ ((~ exactly2 X3) /\ ((~ exactly5 (binrep (Power (Power (Power Empty))) Empty)) -> (~ (X3 = X4)))))) -> atleast3 X4 -> atleast6 X1) -> (~ atleast6 X3)) -> nat_p X3) /\ ((~ atleast6 Empty) -> (~ exactly2 X1)))) /\ ((~ atleast3 (binrep (Power (Power (Power Empty))) (Power Empty))) -> symmetric_i (fun X5:set => fun X6:set => (~ atleast5 X5) -> (((atleast3 X6 -> ((~ reflexive_i (fun X7:set => fun X8:set => atleast4 X7)) -> (~ exactly4 X6)) -> (~ exactly5 X0) -> TransSet (setminus X2 X5)) -> (((~ exactly5 X5) -> ((~ atleastp (Power (Power (Power (Power Empty)))) X6) /\ (((((~ nat_p X4) -> (~ SNoLt X6 X6)) -> ordinal Empty) -> (~ atleast3 X6)) /\ (~ ordinal X5)))) /\ (((((exactly4 (UPair X6 X5) -> (TransSet X3 /\ (setsum_p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) -> (((((~ (X5 = SetAdjoin X3 X4)) -> exactly5 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) -> (((atleast6 X0 -> (exactly3 X6 /\ (nat_p X6 /\ ((((((((~ atleast4 Empty) -> atleast5 X5) /\ (antisymmetric_i (fun X7:set => fun X8:set => ((exactly5 X7 -> (~ exactly3 X8) -> (~ nat_p X7)) /\ (~ (X2 :e X7)))) -> (~ atleast5 X6))) /\ (~ atleast6 X5)) /\ (((((~ exactly4 X6) /\ (set_of_pairs X5 /\ (~ TransSet X6))) /\ ((SNo X2 -> (((~ tuple_p X6 X5) /\ ((~ exactly4 X1) -> ((atleast3 X5 /\ (atleast5 X6 /\ ((exactly5 X0 -> ((~ nat_p X5) /\ (~ SNoLt X6 X0))) -> atleast4 X0))) /\ TransSet X0))) /\ exactly3 Empty)) -> (((~ atleast2 (Inj1 X3)) -> ordinal Empty -> (TransSet X6 /\ (exactly4 X6 -> (~ SNoLt X1 Empty)))) -> ((((~ atleast5 X6) -> exactly4 X5) /\ ((~ nat_p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty)) -> setsum_p X5)) /\ (exactly2 X0 /\ (atleast4 X0 /\ ((~ exactly3 X5) /\ (((((~ atleast6 X1) /\ atleast6 X6) -> (~ ordinal (ordsucc X6))) /\ ((exactly2 X6 /\ (~ nat_p X1)) /\ atleast5 X5)) -> (((~ atleast6 X0) -> (atleast5 X5 /\ ((~ ordinal Empty) -> exactly5 X5 -> (((((~ atleast3 X2) -> (TransSet X6 /\ (~ ordinal X4))) -> (((~ exactly3 X6) -> (~ exactly2 (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty))) /\ (atleast6 X0 /\ SNoEq_ X6 X5 X3))) /\ ((~ atleast2 (SNoLev X5)) -> (~ tuple_p X6 X6))) /\ ((((~ SNoLt X6 X0) -> ((((((~ ordinal X6) -> (((exactly4 X5 /\ (~ exactly3 X5)) /\ ((setsum_p X5 /\ ((((~ atleast4 (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty)) -> (((((exactly5 X6 /\ ((~ set_of_pairs X6) /\ ((~ exactly3 X3) /\ (~ TransSet X5)))) -> bij X5 X6 (fun X7:set => binrep (Power (Power (Power (Power Empty)))) Empty)) /\ (~ atleast4 X5)) -> atleast4 X0) /\ (~ exactly4 X3))) /\ ((~ tuple_p X2 (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty)) -> (~ setsum_p X5))) /\ (nat_p X5 -> (~ atleast5 X1)))) /\ TransSet X0)) /\ PNoLt X5 (fun X7:set => (~ atleast6 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty))) -> (((~ TransSet Empty) -> (((((~ TransSet X7) /\ (((~ TransSet X1) -> ((~ atleast6 X7) /\ (atleast3 X7 -> (atleast2 X7 -> (~ atleast2 X2) -> SNo X7) -> (exactly2 X7 -> (~ exactly5 (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty))) -> ((~ exactly4 X7) /\ (~ SNo X0))))) /\ (((nat_p Empty -> atleast5 (ordsucc X6)) -> SNo_ X3 X7) -> (~ exactly2 X1)))) /\ atleast4 (Inj0 (Inj1 X7))) -> (((SNo X1 /\ atleast5 Empty) /\ atleast6 X6) /\ ((X0 c= X0) -> ((~ exactly3 X4) /\ (~ exactly2 X6))))) -> (((((atleast4 X6 /\ ((~ exactly5 X6) /\ partialorder_i (fun X8:set => fun X9:set => exactly3 X3))) /\ ((~ SNoEq_ X2 X6 Empty) -> (~ atleast3 X7))) /\ exactly4 X6) -> (TransSet X7 /\ ((~ linear_i (fun X8:set => fun X9:set => ((~ irreflexive_i (fun X10:set => fun X11:set => setsum_p X11)) /\ (((((X8 :e Union X9) /\ ((~ exactly4 X0) /\ ((~ exactly3 X3) -> (atleast6 X2 /\ ((((~ atleast5 X5) -> nat_p X1) /\ (~ nat_p X0)) /\ (~ exactly5 (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty)))) -> (~ strictpartialorder_i (fun X10:set => fun X11:set => ((atleast2 Empty -> (~ atleast2 (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty))) /\ exactly5 Empty)))))) /\ atleast4 X9) -> ((((~ atleast3 X8) /\ (~ atleast6 X9)) -> atleast5 X8) /\ (~ TransSet X8))) /\ (((~ nat_p X6) -> (~ TransSet X0)) -> ordinal X8 -> ((atleast2 X6 -> nat_p Empty -> TransSet X9) /\ (~ ordinal X9))))))) /\ (~ atleast2 X6))) -> (~ tuple_p (Inj0 X6) X6)) /\ atleast3 X2) -> ordinal X5) -> (~ ordinal X0)) -> ((X1 c= binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty) /\ ((~ atleast4 X3) /\ (~ SNoLt (binrep (Power (Power (Power Empty))) Empty) X6)))) -> ((((~ nat_p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty))) -> ((~ setsum_p X2) /\ (~ atleast6 X7))) -> ((exactly3 X7 -> ((~ reflexive_i (fun X8:set => fun X9:set => (((((((~ exactly3 X8) /\ (((X8 :e X4) /\ TransSet X4) -> (((SNo X1 -> ((~ SNo X4) -> (~ atleast6 X9)) -> atleast6 X9) -> (~ setsum_p X2)) /\ ((atleast4 Empty -> (~ atleast3 (Power X9))) -> atleast2 X9)))) -> (~ atleastp X9 X8)) -> exactly4 X9) -> exactly3 X9) -> ((((~ nat_p X9) -> (~ exactly4 X0)) -> (((~ setsum_p X9) /\ exactly2 X9) /\ ((((~ setsum_p X9) -> exactly2 Empty) -> ((~ atleast2 X8) /\ (~ exactly3 X4))) -> (~ exactly5 X1)))) /\ ((((ordinal X8 /\ (~ setsum_p X8)) /\ (~ atleast6 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty))) /\ (~ atleast6 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)))) /\ exactly2 X1))) /\ atleast6 X9))) /\ (TransSet X7 -> (~ setsum_p (binrep (Power (Power (Power (Power Empty)))) (Power Empty)))))) -> atleast6 X1) -> (~ transitive_i (fun X8:set => fun X9:set => (~ atleast6 X4) -> (atleast6 X9 /\ setsum_p X0) -> reflexive_i (fun X10:set => fun X11:set => atleast2 X9) -> ((~ atleast5 X6) /\ (~ atleast2 X8))))) /\ ((((TransSet X7 /\ atleast3 X0) -> (~ atleast6 X6)) -> (~ TransSet X7)) -> exactly4 X7))) X5 (fun X7:set => (exactly3 X7 /\ (atleast2 X6 /\ (~ setsum_p X0)))))) /\ (((~ atleast6 X5) /\ (~ exactly3 (add_nat Empty X0))) -> exactly5 X0 -> (~ exactly2 X6))) -> atleast6 X5) -> (X6 :e X6)) /\ ((~ exactly5 X6) /\ (~ SNo X6))) -> (~ ordinal X5) -> (~ atleast2 X5) -> (((~ SNo X0) /\ (((~ (X0 :e Power (binrep (Power (Power Empty)) Empty))) -> atleast3 X6) /\ ((~ atleast2 X4) -> binop_on X6 (fun X7:set => fun X8:set => binrep (Power (Power (Power (Power Empty)))) (Power Empty))))) /\ (exactly3 (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty) -> (SNo X5 -> setsum_p X5 -> (~ set_of_pairs (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty))) -> trichotomous_or_i (fun X7:set => fun X8:set => (~ exactly4 X6))))) /\ (~ atleast2 Empty)) -> (~ atleast6 X0))))) -> ((set_of_pairs X5 /\ ((~ TransSet X5) -> atleast6 X0)) /\ ((((((~ PNoEq_ X3 (fun X7:set => (~ exactly4 (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty))) (fun X7:set => SNo_ Empty (binrep (Power (Power (Power (Power Empty)))) Empty))) -> SNoLt X6 X4) /\ (~ atleast2 X6)) -> exactly3 (Inj0 X5)) -> ((atleast4 (proj1 X4) /\ (~ (X5 :e X5))) /\ (~ atleast4 X5))) -> exactly2 (setminus X5 X3)))) /\ (~ (X6 :e X1))))))))) -> (~ atleast5 X5))) -> (~ atleast3 X5)) /\ exactly2 X0)) /\ (X3 c= X5)) -> SNo X1) /\ atleast3 X6)))) -> tuple_p X6 X6) /\ (equip X0 X6 /\ ((~ atleast2 X0) /\ (((~ nat_p X5) -> TransSet X6) -> (~ (X5 :e X2))))))) -> ((~ atleast3 (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)) /\ (~ atleast5 Empty))) /\ (((((~ tuple_p X5 X5) /\ (~ ordinal X6)) /\ exactly5 X5) -> set_of_pairs (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty))) -> (atleast3 X5 /\ (atleast6 X6 -> (~ atleast5 X6))) -> setsum_p X5 -> (~ exactly2 X5) -> exactly2 (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty) -> (~ atleast6 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty)) -> atleast4 X6)) /\ (~ atleast6 X6))))) /\ (~ exactly2 X6)) /\ (~ atleast5 (binunion X1 X2))) /\ atleast2 X0) -> ((((((~ ordinal X5) -> (~ atleast4 X5)) /\ (TransSet X6 -> (~ setsum_p X5))) /\ ((((~ (X6 :e X1)) -> exactly5 (setprod X4 X3) -> exactly5 X5 -> PNoEq_ (Inj0 (binintersect (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty))) (fun X7:set => nat_p (Union X6)) (fun X7:set => (~ exactly5 X6))) -> (~ atleast6 X6)) /\ (~ exactly5 X5))) -> (~ atleast3 X0)) /\ ((~ atleastp X5 (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty)) /\ (~ atleast3 X4)))))) /\ exactly5 X2)) -> (Empty :e X2)))) -> nat_p X4) /\ (~ atleast2 X3))) /\ ((~ exactly2 (Power (Power (Power (Power Empty))))) -> (~ exactly4 X3))) -> (exactly2 X3 -> (~ nat_p X3)) -> exactly3 X4) -> (bij X3 X4 (fun X5:set => X5) /\ (((((((nat_p X2 -> (~ exactly2 X3)) -> (~ atleast3 X4) -> (~ ordinal X4)) /\ ((exactly4 X3 -> exactly4 X4) -> setsum_p X1 -> (((atleast3 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty) -> (~ atleast4 X4)) /\ (((((~ exactly3 X2) /\ (~ atleast2 (binrep (Power (Power (Power Empty))) Empty))) -> (atleast4 Empty /\ (~ atleast4 X0))) -> reflexive_i (fun X5:set => fun X6:set => (~ ordinal (binunion X5 X0)))) -> (~ exactly3 X3))) /\ (atleast3 (UPair X4 X2) /\ (exactly5 X3 /\ (atleast5 X1 -> (~ TransSet X3))))))) /\ (~ SNo X4)) -> (Union (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) = X4)) /\ (~ exactly2 (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))))) -> (X4 :e X2) -> (~ atleast2 X2)))) (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) (fun X4:set => atleast3 X2)).
admit.
Qed.

Theorem conj_Random1_TMcECSsBjuKKHaiVUngwnNXxHPbv584cXv5: exists X0:set, forall X1:set, ((forall X2:set, exactly5 X0 -> (exists X3:set, ((X3 c= Empty) /\ (atleast5 X1 -> transitive_i (fun X4:set => fun X5:set => ((~ TransSet (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty)) -> atleast4 X5) -> ((SNo_ (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty) X2 -> (((~ exactly2 (V_ X4)) /\ atleast2 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty))) /\ atleast3 X1)) /\ atleast4 X0)))))) -> (~ SNo_ X1 X0)) -> (~ exactly1of2 (((forall X2:set, exists X3 :e ordsucc X0, (forall X4:set, ((~ atleast3 (Power (Power (Power (Power Empty))))) /\ (SNoEq_ X4 X4 X0 /\ (~ setsum_p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)))))) -> (~ atleast5 X3)) /\ (exists X2:set, exists X3:set, (~ atleast3 X3))) /\ (forall X2 c= X0, TransSet X2 -> (forall X3 :e X0, exists X4:set, ((X4 c= X3) /\ (~ ordinal X4))))) (forall X2:set, (~ exactly2 X2) -> (exists X3:set, exists X4:set, ((SNo Empty -> atleast6 X4) /\ exactly3 X3)))).
admit.
Qed.

End Random1.
