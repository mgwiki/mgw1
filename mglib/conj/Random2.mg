(** $T hf **)
(** $I sig/PfgPreambleSep2020.mgs **)

Section Random2.

Variable p:set -> prop.
Variable f:set -> set.

Theorem conj_Random2_TMWv3SVbM3eZ31azmqFc5rufdMCwpaCexpQ: forall X2 c= f (f (f (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))))), ((exists X3 :e f (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))), exists X4:set, atleast5 X4) /\ ((forall X3 c= X2, ((~ atleast5 X3) /\ ((~ atleast6 (f X3)) -> (~ p X3)))) -> (forall X3 :e X2, forall X4 c= Empty, ((((~ atleast4 X4) /\ (~ p (ordsucc X2))) -> ((p (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) -> ((p (Power (binrep (Power (Power Empty)) Empty)) -> atleast3 Empty) -> (~ equip X4 X4) -> (((~ p Empty) -> (p X4 /\ exactly3 X3)) /\ (((~ set_of_pairs (Power (Power (Power (Power Empty))))) -> ((((p X3 -> (((~ p Empty) -> ((~ exactly4 X2) /\ ((p (f Empty) /\ (~ p X2)) /\ per_i (fun X5:set => fun X6:set => setsum_p X3)))) /\ (~ p X3)) -> (~ p X4)) /\ ((symmetric_i (fun X5:set => fun X6:set => p X6 -> (~ p (Power X6))) /\ ordinal Empty) -> (~ atleast6 X4))) /\ atleast5 X3) -> (~ p X4) -> (exactly5 X2 -> ((~ SNo (Union (f X3))) /\ atleast5 X4)) -> p X3) -> ((~ eqreln_i (fun X5:set => fun X6:set => ((SNoLt (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty) X5 -> (((SNo X5 /\ (((~ p X6) -> totalorder_i (fun X7:set => fun X8:set => exactly5 X8) -> p Empty) -> (((~ p Empty) -> (~ ordinal X5)) /\ ((~ p (binrep (Power (Power (Power (Power Empty)))) Empty)) -> exactly2 X5)))) -> (((p X6 -> (~ exactly5 (binrep (Power (Power (Power (Power Empty)))) Empty))) -> (~ p X5)) /\ ((~ exactly5 X2) -> (((~ p X5) /\ (p X5 -> (((~ p X6) /\ p X6) /\ ((~ setsum_p (f X6)) -> p (binrep (Power (Power (Power Empty))) Empty))))) /\ PNo_downc (fun X7:set => fun X8:set -> prop => (((~ exactly2 X6) /\ ((~ set_of_pairs (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty))) -> X8 (f X6))) /\ (~ X8 Empty)) -> ((~ p X7) /\ (atleast5 X4 /\ X8 (f (ordsucc X7))))) X4 (fun X7:set => atleast3 (binrep (Power (Power (Power (Power Empty)))) (Power Empty))))))) /\ ((~ exactly3 (binrep (Power (Power (Power Empty))) Empty)) -> ((exactly5 X5 /\ (((p X6 -> (~ p (f (Power (Power (Power (Power Empty))))))) /\ (X4 :e If_i (exactly4 X3 /\ ((p X5 /\ (Empty :e Sing (Power (Power (Power (Power Empty)))))) -> reflexive_i (fun X7:set => fun X8:set => (exactly3 X7 /\ (~ atleast6 X8))))) X5 X2)) /\ (~ p X6))) /\ ((p X5 -> (~ p X5)) -> exactly5 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty))))))) /\ SNo_ (f X3) X6))) /\ (((~ p X4) -> (~ p X2)) /\ (((((((exactly3 X3 /\ TransSet (f (f (f X4)))) /\ atleast6 X3) -> (~ atleast3 (binrep (Power (Power (Power Empty))) (Power Empty)))) -> atleast4 X3 -> (~ exactly3 (ap X4 Empty))) /\ ((~ p (f X3)) /\ atleast2 X2)) -> ((~ atleast4 X3) /\ exactly4 X3)) -> (((nat_p X3 -> (((~ p X3) -> (((~ atleast4 Empty) /\ (p (binrep (Power (Power (Power Empty))) Empty) -> ((~ exactly4 (f X3)) /\ PNoLe (proj1 X3) (fun X5:set => ((((~ p X5) /\ atleast4 Empty) /\ (((~ p X4) -> (~ nat_p X4)) /\ ((~ p X4) -> (~ p Empty)))) -> ((~ p (f X3)) /\ (~ atleast2 X4))) -> p (ordsucc X3) -> (~ TransSet X3)) X4 (fun X5:set => ((~ p X4) /\ (p X3 /\ ((~ nat_p X2) /\ atleast2 (Inj0 Empty)))))))) /\ (((~ atleast4 X4) /\ ((~ p X3) -> ((TransSet X3 /\ (~ p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)))) /\ ((((~ p X4) -> exactly4 (f (binrep (Power (Power (Power Empty))) Empty))) -> atleast3 X3) /\ (~ p X2))))) -> exactly2 X3 -> ((p (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty) -> (p (UPair X4 X3) /\ ((~ SNoLe X4 X4) -> (~ exactly3 X4)))) /\ ((~ p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty))) /\ set_of_pairs X3))))) /\ (~ p X3)) -> (~ p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))))) /\ p X3) /\ (atleast6 X4 /\ (((~ reflexive_i (fun X5:set => fun X6:set => (((~ nat_p X5) -> (~ p (binrep (Power (Power (Power Empty))) (Power Empty)))) /\ ((~ set_of_pairs (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)) /\ nat_p (binrep (Power (Power (Power Empty))) (Power Empty)))))) /\ (p X4 -> (~ p X3))) -> (~ p X4)))))))) -> (p (f X3) /\ (~ p X4)) -> p (f (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)))) -> (~ nat_p X4) -> nat_p X4))) -> (p (f X3) /\ ((~ exactly4 X3) /\ (~ p (f (f X3)))))) -> (~ atleast6 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)))) -> (~ exactly3 (f X4))) /\ (~ p X2)) -> (~ atleast2 Empty) -> p X4))).
admit.
Qed.

Theorem conj_Random2_TMPfGfGzourdwkEihmiHC8moc9ao7wdjb8m: exists X2:set, ((((exists X3:set, ((X3 c= Unj (Power (binrep (Power (Power Empty)) Empty))) /\ (forall X4:set, p X3 -> (exactly4 X4 /\ (((~ atleast5 (f (f X4))) /\ (p X3 -> p X3 -> (~ p (f X3)))) /\ (p X4 -> ((((((~ atleast4 (ap X3 (f X4))) -> (~ p X4) -> (((((~ p (Power (Power (Power (Power Empty))))) -> atleast4 (Inj0 X3)) /\ atleast4 X3) /\ TransSet (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty)) /\ atleast3 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty))) /\ atleast2 X4) -> (~ atleast4 X3) -> SNo_ X4 X3) -> (~ atleast5 X3) -> (((~ p (f (Power (binrep (Power (Power Empty)) Empty)))) /\ (PNoLt (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty) (fun X5:set => (((~ SNoLe X4 X5) -> (~ p X2)) /\ p Empty)) X2 (fun X5:set => setsum_p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))) -> exactly3 X4)) /\ nat_p X2)) -> atleast6 X3) -> (p X3 /\ (~ ordinal X3)))))))) /\ (~ tuple_p (f X2) (f (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)))))) -> (forall X3:set, (((~ p X2) /\ (forall X4:set, ((PNo_downc (fun X5:set => fun X6:set -> prop => ((((((equip Empty (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))) /\ atleast5 X5) /\ ((((~ p (f X3)) /\ (~ exactly2 X4)) /\ X6 X5) /\ (((X6 X4 /\ (~ p X4)) -> ((X6 X2 /\ (((exactly2 X3 -> atleast2 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty))) /\ (((((~ TransSet Empty) /\ (PNoLt X5 (fun X7:set => TransSet Empty -> p X5) X5 (fun X7:set => exactly3 X4) /\ X6 X4)) /\ (atleast4 X5 /\ ((~ p Empty) -> p X3))) /\ p (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty)) /\ X6 X5)) /\ (atleast2 X3 -> (~ p X5)))) /\ atleast5 X4)) -> (~ X6 Empty)))) -> exactly4 X5) /\ ((p X5 /\ (~ atleast2 X3)) -> (~ ordinal X4))) /\ p X3) /\ X6 X3) -> X6 X4) (Power (binrep (Power (Power Empty)) Empty)) (fun X5:set => TransSet X2) -> (~ atleast4 X4)) /\ (((~ p (f X4)) /\ ((~ p X3) /\ (~ SNo (f Empty)))) /\ (~ p X4))) -> (~ exactly2 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))) -> ((~ p X3) /\ (p (f X4) -> ((((~ p X3) -> (p X4 /\ reflexive_i (fun X5:set => fun X6:set => (~ exactly5 Empty)))) -> nat_p X4) -> (p X4 /\ ((((p X4 -> atleast4 (f (binunion X4 X2)) -> p X4) -> (~ p X3)) /\ ((p X4 /\ p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty))) -> (((~ atleast6 X3) -> ((((((~ p (Power (binrep (Power (Power Empty)) Empty))) -> p (f Empty) -> ((~ p X3) /\ (((p X4 /\ (ordinal (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) -> ((p X4 -> (~ p (binrep (Power (Power (Power Empty))) Empty)) -> set_of_pairs X3 -> (~ p Empty)) /\ (~ exactly3 (binrep (Power (Power (Power Empty))) Empty))))) -> (setsum_p X4 /\ p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty))) /\ (~ p X3)))) /\ ((p X3 /\ (p Empty /\ (~ p Empty))) -> p (f X3))) -> (~ setsum_p X2)) -> p X4) -> exactly4 X4) -> ((((~ (X4 c= X3)) -> (p X3 -> atleast3 (f (f (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty)))) -> (PNoEq_ X4 (fun X5:set => exactly4 (f (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty))) (fun X5:set => (p X5 /\ p X4) -> reflexive_i (fun X6:set => fun X7:set => exactly4 (Unj X7))) /\ ((eqreln_i (fun X5:set => fun X6:set => p (f (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)))) /\ (exactly4 X4 -> atleast6 (f X2))) /\ (~ atleast3 X2)))) /\ (((p X3 /\ p (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) X4)) -> ((~ set_of_pairs X4) /\ (TransSet X2 /\ ((~ nat_p (f (f Empty))) -> setsum_p X4))) -> (~ p (binrep (Power (Power (Power Empty))) Empty))) -> (~ p X3) -> ((((((((atleast5 X3 -> (~ p X2) -> (~ nat_p X3)) /\ ((((~ atleast3 X3) /\ (exactly2 X3 -> (((exactly5 Empty -> ((((~ atleast3 X3) /\ (~ p X3)) /\ ((~ exactly2 X4) -> (~ atleast2 X4))) /\ p X4)) -> p X4) -> p X4) -> (p X4 /\ (~ TransSet X4)))) -> p X3) -> exactly4 X3)) /\ p X3) -> (~ p (f (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty))))) -> (p X4 -> exactly4 X2) -> (~ SNoLt X2 X3)) /\ (p (f (f X3)) -> (~ p Empty))) /\ (~ p (f (binrep (Power (Power (Power (Power Empty)))) (Power Empty))))) /\ (~ p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))))))) /\ (atleast2 (binrep (Power (Power (Power Empty))) Empty) -> (p X3 /\ (~ p X3))))) /\ exactly2 X3))) -> p X2 -> (atleast3 X4 /\ exactly2 X2)))) -> (p X4 /\ exactly2 X2) -> atleast3 X4)))) -> (exists X4 :e X3, TransSet (f X4))) -> (p (binrep X2 X3) /\ (~ exactly4 X2))) -> (exists X3:set, ((X3 c= f X2) /\ (exists X4:set, ((X4 c= X3) /\ (((((~ p X4) -> ((~ p (binunion (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty) X3)) -> (((((((~ atleast4 Empty) -> exactly3 X4 -> (((((atleast5 X3 /\ ((~ tuple_p X2 X4) -> p (f X4))) /\ (~ exactly4 X4)) /\ p X2) /\ ((p X4 /\ ((~ p X4) -> (~ p X3))) -> ((p X4 /\ (p (binrep (Power (Power (Power (Power Empty)))) Empty) /\ ((~ p X2) -> ((~ exactly2 X3) /\ nat_p X3)))) /\ (~ atleast4 (f X3))))) /\ p X2)) /\ p X4) -> ((~ p (setexp (f X2) Empty)) /\ (~ atleast4 (ReplSep X2 (fun X5:set => ((~ p X4) /\ atleast5 X4)) (fun X5:set => X5)))) -> ((p X4 /\ (nat_p X3 -> (~ p X4))) /\ ((~ p X4) -> (((~ p X2) -> ((~ set_of_pairs X3) -> p (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty)) -> p (Union X4)) /\ (~ p X4))))) /\ (~ TransSet X3)) /\ p (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty)) /\ (((~ p X3) -> ((((f Empty :e X4) -> (~ exactly2 (Power (binrep (Power (Power Empty)) Empty))) -> p (f X2) -> ((((nat_p X4 /\ ((((~ setsum_p (binrep (Power (Power (Power Empty))) Empty)) /\ exactly4 (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty)) /\ (~ exactly3 X3)) /\ p X3)) /\ ((~ SNo X3) /\ (((p X2 -> (~ atleast3 X3)) -> set_of_pairs (binrep (Power (Power (Power Empty))) (Power Empty))) /\ (~ p (Sing X3))))) -> p X3 -> (~ trichotomous_or_i (fun X5:set => fun X6:set => ((atleast6 X6 /\ (p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) /\ exactly3 X5)) /\ p X6)))) /\ (~ (f X4 :e X4)))) -> exactly5 Empty) /\ (~ set_of_pairs X4))) /\ ((p (Power (binrep (Power (Power Empty)) Empty)) /\ (~ p (f X4))) -> (~ p X3))))) -> (TransSet X4 /\ ((~ p X4) /\ (~ p X4)))) /\ (((~ PNo_upc (fun X5:set => fun X6:set -> prop => (((((X6 X4 -> (~ p (f X5))) -> X6 X4) /\ exactly4 X3) /\ ((~ exactly5 X5) -> (~ p X2))) /\ (~ X6 (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty)))) X4 (fun X5:set => ((~ p X4) /\ (p Empty /\ p X3)))) /\ ((p Empty -> atleastp (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) (f X3)) -> (~ SNo (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)))) -> p X2)) -> p (binrep (Power (Power (Power (Power Empty)))) Empty)) /\ atleast6 X3)))))) /\ (forall X3:set, (~ SNo (f (f Empty))) -> (~ (X3 :e X3)))).
admit.
Qed.

Theorem conj_Random2_TML9chQ7pBnmLnJnGW5vSgHh8BXUM622Aqi: (((exists X2:set, (TransSet (Power (binrep (Power (Power Empty)) Empty)) /\ ((forall X3:set, (exists X4:set, ((((~ p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty)) /\ (((((~ p X3) -> p X3) /\ p X4) /\ ((~ atleast2 (Power (binrep (Power (Power Empty)) Empty))) -> (~ atleast4 X3))) /\ (((((~ exactly3 (f X4)) /\ (~ p X4)) -> p X3 -> ((((~ p Empty) /\ (~ p X3)) -> (p X4 -> (~ p X4)) -> atleast3 X3 -> TransSet (f X2)) -> ((~ p X4) /\ ((~ p (UPair (If_i ((~ p (f X2)) -> nat_p Empty) X2 (f (f Empty))) X3)) -> (~ exactly5 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)))))) -> p X3) /\ (p X3 -> ((~ p X3) /\ (((((((~ p (f Empty)) -> p (f (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty))) /\ (~ p (binrep (Power (Power (Power (Power Empty)))) (Power Empty)))) /\ (~ p (binrep (Power (Power (Power Empty))) Empty))) /\ p X4) /\ atleast4 X2) -> p X2)))) -> (((~ atleast3 X4) /\ ((exactly2 X3 /\ ((((~ exactly5 Empty) -> p X3) /\ (~ atleast4 (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty))) -> (~ atleast4 X4))) -> (~ p X3))) /\ exactly4 X3)))) -> ((~ p X4) /\ setsum_p X3)) /\ (~ p X4))) -> exactly3 (f (f X3))) /\ (exists X3:set, (forall X4:set, (((atleast3 X4 /\ p X4) -> setsum_p X3 -> atleast3 X3) /\ atleast4 (Power X4)) -> ((~ p (f (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty))) /\ ((~ exactly5 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty)) /\ ((~ p (ordsucc X3)) -> ((~ atleast2 (Power (binrep (Power (Power Empty)) Empty))) /\ (((p (f (Pi X4 (fun X5:set => proj0 (Inj0 X4)))) /\ (~ ordinal X4)) /\ ((((~ SNo (f (f (f X3)))) -> (((((~ (X3 = X2)) -> ((((~ p X2) /\ (~ atleast4 (lam (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (fun X5:set => X5)))) -> (~ p (ReplSep (Inj1 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty)) (fun X5:set => TransSet (f (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty))) (fun X5:set => X2)))) /\ (~ p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty))))) /\ p X4) -> (((p (f X2) -> atleast6 X3) /\ p (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty)) /\ ((p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) /\ p (binunion (Sing Empty) X3)) /\ SNo (SNoLev Empty))) -> exactly4 (f X4) -> PNoLt X3 (fun X5:set => (exactly4 X5 /\ atleast4 Empty)) (Power (Power (Power (Power Empty)))) (fun X5:set => (p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) /\ (((~ p (f X3)) -> SNo X3) /\ (~ atleast2 X5))) -> (~ p X3))) /\ (((SNo X3 -> (((p X3 -> TransSet X3 -> p X3 -> ((~ p X2) /\ (~ exactly5 (f X2)))) -> (~ exactly5 X3)) /\ (exactly5 X2 /\ ((~ setsum_p X3) -> (((~ setsum_p X4) /\ (~ (Empty = X2))) /\ p X4))))) -> (~ ordinal X4)) /\ ((~ p (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty)) /\ atleast6 X3)))) -> (~ p X2) -> (((~ p (Power X3)) /\ ((p X3 -> ordinal X3) /\ ((p X4 -> (equip X2 X4 -> (~ p (ordsucc X3))) -> ((~ p X3) /\ (X3 c= X4))) -> (~ atleast4 (SetAdjoin X3 X2))))) -> (((~ p X3) /\ (~ p X2)) /\ ((((~ atleast6 X4) -> (~ p X4) -> ((~ nat_p (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty)) /\ p X2)) -> (~ exactly3 (f (f X4)))) -> (X3 :e X4)))) -> TransSet (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty)) -> (~ atleast2 X3))) -> ((p X3 /\ ((~ atleast2 (Inj1 X3)) /\ ((((((~ atleast3 X4) /\ (p Empty /\ (~ p X3))) -> PNo_downc (fun X5:set => fun X6:set -> prop => (atleast6 X4 /\ (~ exactly5 X3))) X3 (fun X5:set => ((~ p X3) /\ (~ p X3)))) /\ (((exactly4 X4 -> ((setsum_p (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty) /\ p (f X4)) -> (atleast4 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty) /\ (atleast5 X4 /\ (~ p Empty)))) -> ((p X3 -> (~ irreflexive_i (fun X5:set => fun X6:set => ((((~ p X3) -> ((((~ p X5) /\ atleast6 X5) -> (((~ p X5) /\ (X4 :e X5)) /\ (PNoLt X4 (fun X7:set => (~ p (f (f X7)))) X5 (fun X7:set => (~ p Empty)) /\ (~ p X6))) -> (((~ exactly4 X5) -> (~ p X3)) /\ ((((~ p X5) -> (p X5 /\ (~ atleast5 X5)) -> SNo_ X5 X2 -> p X5) /\ (~ set_of_pairs X5)) -> equip X5 X6))) -> (~ p X3)) -> (~ p X5) -> p X5) -> (~ SNo X6) -> (Power (Power (Power (Power Empty))) = X6)) -> exactly2 X4) -> p X5))) /\ (p X2 -> (~ atleast5 X2)))) -> p Empty) /\ p X4)) -> (~ p X4)) /\ (~ exactly4 (binunion X4 X3))))) /\ p X3))))))) -> p X3)))) -> ((((exists X2:set, ((forall X3:set, (exists X4:set, ((X4 c= X3) /\ ((~ p (binrep (Power (Power (Power (Power Empty)))) (Power Empty))) -> (~ p X2)))) -> (forall X4:set, (((((~ atleast5 X3) -> setsum_p X4) /\ (~ exactly4 X3)) -> ((~ atleast3 X2) /\ (exactly5 X3 -> ((atleast2 X2 /\ (~ p (Union Empty))) /\ atleast4 X2))) -> p X3 -> (~ p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)))) /\ ordinal (Power (Power (Power (Power Empty))))))) /\ (~ p (f (Power (binrep (Power (Power Empty)) Empty)))))) /\ p (f (f (f (f Empty))))) -> ((exists X2 :e f (f Empty), forall X3:set, exists X4:set, ((X4 c= Empty) /\ (~ tuple_p X3 X3))) /\ (forall X2:set, exists X3 :e X2, exists X4 :e f X3, (p (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))) /\ exactly4 (f X2))))) /\ ((forall X2:set, exists X3:set, ((forall X4:set, (~ p (binrep (Power (Power (Power (Power Empty)))) (Power Empty))) -> p Empty -> (~ nat_p X2)) /\ (~ reflexive_i (fun X4:set => fun X5:set => (~ nat_p X5) -> (p (f (f X4)) /\ TransSet X5))))) /\ (forall X2 :e binrep (Power (Power (Power Empty))) (Power Empty), exists X3:set, ((forall X4:set, p X4 -> (~ atleast3 X4)) /\ (exists X4:set, (~ p X3))))))) /\ (p (f Empty) -> (forall X2 c= f (f (SetAdjoin (Power (Power (Power (Power Empty)))) (f Empty))), exists X3:set, (((forall X4 c= X2, p (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)) /\ (forall X4 :e X3, (~ atleast2 X4))) /\ (exists X4 :e f (f X3), ((~ p X2) /\ (~ p (f X4)))))))).
admit.
Qed.

Theorem conj_Random2_TMdoopWoA9jfqVyB2wh3mJFCWBhMvSh8fgP: ((forall X2:set, (exists X3:set, ((exists X4:set, ((~ exactly3 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty)) /\ (~ set_of_pairs X3))) /\ (((exists X4:set, ((X4 c= X3) /\ ((~ ordinal X2) /\ (~ set_of_pairs X3)))) /\ ((p X2 -> (exists X4:set, (exactly5 X3 /\ ((p X3 -> p X4) -> (~ TransSet X4)))) -> (forall X4:set, ((~ p (binrep (Power (Power (Power (Power Empty)))) (Power Empty))) /\ (~ p (Power (Power (Power (Power Empty)))))))) -> (p X3 /\ (forall X4 c= f (Sing Empty), ((p (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty) -> p X3) /\ ((((((~ exactly3 X3) /\ (~ p X2)) -> (((exactly3 X4 /\ (~ p X4)) /\ atleast4 X4) /\ (((~ p (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty)) -> tuple_p X4 X4) /\ atleast5 X4))) -> (~ atleast5 (binrep (Power (Power (Power Empty))) Empty))) /\ ((((atleast5 X2 -> (((p X4 -> (((~ exactly5 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))) -> p X4) /\ p X4) -> p X3) /\ ((atleastp (Power X4) X3 /\ (~ p (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty))) -> atleast3 X3 -> reflexive_i (fun X5:set => fun X6:set => (~ p (nat_primrec X5 (fun X7:set => fun X8:set => X8) X3))) -> ((~ p X3) /\ (SNo_ X3 X4 /\ (exactly3 Empty /\ ((((((p (f (SNoElts_ (f (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))))) -> atleast4 (binrep (Power (Power (Power (Power Empty)))) Empty) -> ((p X4 /\ (exactly3 (f X4) -> (equip X3 X4 /\ (p (V_ X2) /\ (((p X4 -> (~ p X4) -> set_of_pairs X4 -> ((atleast2 X2 -> exactly2 X3) /\ p X4)) /\ (((~ exactly2 Empty) /\ ((~ p X3) -> (~ SNo X3))) -> (~ SNo X3))) /\ (exactly3 X4 -> p (f Empty))))))) -> (~ p X2)) -> ((((~ exactly1of2 (p X4 /\ p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))) (~ atleast3 (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty))) -> p X4) -> (~ exactly2 (f X3))) /\ (p (V_ (f (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty))) -> ((~ atleast2 X3) /\ ((((~ p X4) /\ (strictpartialorder_i (fun X5:set => fun X6:set => (atleast3 X6 -> (((~ p X2) /\ (((p X5 -> exactly5 X6) /\ ((atleast4 X4 -> (((~ p X6) /\ ((~ atleast6 (Power (f X6))) /\ ((((((((~ p X5) /\ ((exactly2 X6 -> p (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)) /\ p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty))) -> (((((p X5 -> (~ exactly3 X2) -> (~ p (binrep (Power (Power (Power Empty))) (Power Empty))) -> (~ p X2) -> p X6) -> ((~ exactly5 X4) /\ (~ p X6)) -> atleast6 X6) -> p X6 -> (~ atleast3 X4)) /\ stricttotalorder_i (fun X7:set => fun X8:set => (((((p X4 /\ (set_of_pairs X2 /\ ((~ atleast3 (Sing X7)) /\ (p X8 -> (~ p X6))))) /\ (p X8 -> (p (V_ X7) /\ (~ (X8 c= X7))))) /\ ((~ exactly3 (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)))) -> (nat_p Empty /\ (~ nat_p X5)))) /\ ((~ p X8) -> ((~ atleast2 X2) /\ ((~ atleast2 X7) /\ (((((((((ordinal (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty) -> (p X8 /\ p (Union X3))) -> (((~ nat_p (f (f X5))) /\ (((setsum_p X7 -> atleast6 X7) -> p X5) /\ (~ p X7))) /\ nat_p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty))) -> ((SNo Empty -> nat_p X8) /\ ((~ p X8) -> (nat_p (f X7) /\ p X5)))) -> (p X7 -> (~ p X7)) -> ((~ ordinal Empty) -> p (binrep (Power (Power (Power Empty))) (Power Empty))) -> (~ p X8)) /\ atleast6 X4) /\ (~ p X4)) -> p (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty)) /\ (((atleast6 (Union X7) /\ (((~ exactly5 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty)) -> atleast4 X2) /\ (p X8 /\ p X7))) /\ (~ p X7)) -> atleast4 X4)) /\ ((~ p X8) /\ (~ equip X8 X8))) /\ exactly3 X6))))) /\ (p (f (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty))) /\ atleast5 (binrep (Power (Power (Power Empty))) Empty))))) /\ ((~ p (V_ X6)) -> ((setsum_p X6 /\ (TransSet (ordsucc X5) /\ p (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))))) -> p X5) -> atleast3 X6))) -> (~ exactly5 X6)) /\ ordinal X6) -> (~ nat_p Empty)) -> (~ set_of_pairs X6) -> (p X6 /\ (p X5 -> (p X2 /\ ((~ p X2) /\ (((((~ atleast6 X5) -> p X5) /\ (~ atleast5 (f (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty)))) /\ (~ p X3)) -> (~ p Empty)))) -> (~ exactly5 X5) -> (~ p X5))) -> trichotomous_or_i (fun X7:set => fun X8:set => p X8)) -> p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty)))) /\ (((exactly5 X6 /\ ((~ p X6) /\ (TransSet X6 /\ (((((((X6 c= X5) /\ (p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty) -> (exactly5 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty) /\ ((~ atleast5 X6) -> atleast6 (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty))) -> (~ p (ordsucc X3)) -> ((~ atleast3 (Power (binrep (Power (Power Empty)) Empty))) /\ ((atleast5 X6 /\ ((p X6 /\ ((~ p X5) /\ (p X6 /\ (~ p X3)))) -> (~ p X5) -> (~ p X2) -> exactly4 X6)) /\ p (Power (Power (Power (Power Empty)))))))) -> (exactly2 X4 /\ p X6)) /\ (~ SNo (proj0 X6))) /\ ((~ p X4) /\ ((~ p X5) -> (~ atleast2 (binrep (Power (Power (Power (Power Empty)))) Empty))))) -> (((~ ordinal (Power (binrep (Power (Power Empty)) Empty))) /\ (p X6 /\ ((atleast6 X5 -> (~ p (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))))) /\ (~ p X6)))) /\ (((~ atleast3 X5) /\ p X4) /\ (f X4 c= X5)))) /\ (~ atleast6 (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty)))))) /\ ((~ atleast3 X5) -> ((~ exactly4 X6) /\ p X4) -> (p X6 /\ (nat_p X6 /\ (~ p X5))))) -> ((~ p X5) /\ (~ p X6))))) -> (setsum_p (f X2) /\ ((~ atleast5 X6) -> p X5)))) -> (~ SNoLt X2 (PSNo X6 (fun X7:set => ((((~ p X6) /\ ((((~ exactly3 X2) /\ atleast5 X6) -> (~ p X7)) -> (((p X6 -> exactly5 (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty) -> ((~ SNoLe (ap X6 (f X2)) X6) /\ (X3 :e X6))) -> p X6) /\ (~ atleast6 (f (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)))))))) -> (~ p X6)) /\ (((p X6 -> p X7) -> (~ exactly3 (f X6))) /\ (~ p X7)))))))) /\ (~ exactly4 (f (Power X6))))) -> (~ p X5)) -> (~ p X3))) /\ (p Empty /\ (~ p (f Empty)))) /\ (p X2 /\ exactly4 X2)))))) /\ (p X3 /\ p X4)) -> (~ p X3)) -> p Empty) /\ ordinal X4) -> ((p X2 -> ((((~ p X3) /\ ((~ p X3) /\ (p (Sing X4) -> (((~ p X3) -> (p X3 /\ (p X3 /\ (~ p X4)))) /\ ordinal Empty)))) -> p (f X4)) /\ (~ p X3))) /\ (~ exactly2 X4)))))) -> (~ p X3))) /\ (~ set_of_pairs X4))) -> (p (binrep (Power (Power (Power (Power Empty)))) Empty) /\ ((p X3 -> atleast2 X2) /\ (p X3 /\ (irreflexive_i (fun X5:set => fun X6:set => (p X2 /\ (nat_p Empty -> ((p (f X6) /\ SNo X5) /\ nat_p X5))) -> (~ equip (Power (binrep (Power (Power Empty)) Empty)) X6)) /\ (~ atleast3 (setminus (f (ap X3 X3)) X4))))))) -> SNo_ X3 X3) -> atleast2 X4)) /\ (~ p Empty))))))) -> (forall X4:set, (atleast5 X3 -> (~ p X3)) -> (p X2 /\ ((~ p (binrep (Power (Power (Power (Power Empty)))) Empty)) -> ((~ SNo_ Empty (binintersect X4 X3)) /\ (~ atleast3 (UPair (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty) X3))) -> (~ p (f X3)))))))) -> (forall X3 c= X2, exists X4:set, ((X4 c= Empty) /\ ((~ TransSet X4) /\ atleast3 Empty)))) /\ ((exists X2 :e V_ Empty, p (f (setprod (binrep (Power (Power (Power Empty))) Empty) X2))) /\ (~ p (f (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty))))).
admit.
Qed.

Theorem conj_Random2_TMXqWqqXzQ3NLxWJhTMG2iUtcQLWocMTLhX: exists X2:set, (((forall X3 c= setexp (f X2) X2, forall X4 c= X3, (p X3 /\ (~ p X4))) /\ (exists X3:set, (p (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty) /\ (forall X4:set, ((((((X4 = Empty) -> exactly3 (f X4) -> (exactly3 X2 /\ (((~ atleast6 Empty) -> p (f (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)))) /\ atleast3 (f (f X3))))) -> (~ exactly5 Empty)) -> (p (Power X2) /\ p X3) -> ((((((~ nat_p Empty) /\ ((~ (X3 = X4)) -> (~ p X3))) -> atleast4 (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty)) -> SNo X3) -> exactly4 (f X2) -> ((((exactly5 X3 /\ (~ p (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))))) /\ (~ ordinal X4)) -> (~ reflexive_i (fun X5:set => fun X6:set => (~ p X5)))) /\ (((~ ordinal (binrep (Power (Power (Power (Power Empty)))) (Power Empty))) /\ (SNo X3 /\ p X2)) -> ((atleast4 X3 /\ (exactly4 (ordsucc X3) /\ (p (f X4) -> ((~ p (f (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))))) /\ p X4)))) /\ ((~ p X3) -> ((p X4 -> p X3) /\ (p (proj0 X4) -> (~ exactly3 X4)))))))) /\ (((((((p (binrep (Power (Power (Power Empty))) (Power Empty)) /\ ((((~ p X3) -> p X4 -> (~ atleast5 X3)) -> (~ setsum_p (f X2)) -> SNo X2) /\ exactly4 X4)) -> p X2) -> (~ atleast3 (f (f X4))) -> atleast2 (UPair (f (f (f X3))) X2) -> (p (Repl X3 (fun X5:set => X4)) /\ (~ ordinal X2))) /\ (((~ atleast2 X3) /\ ((~ p X3) -> (~ p X2))) /\ p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty))) /\ ((((~ exactly3 X4) -> ((~ p X2) /\ p X3)) -> ((p Empty -> ((~ p X4) /\ ((((~ p Empty) -> atleast4 X2) -> (((p X2 -> p X3) -> ((~ ordinal X4) /\ ((~ p (f (f (f X3)))) /\ set_of_pairs X2))) /\ ((~ (X4 :e X3)) -> exactly3 X4))) -> ((~ p X4) -> (~ p Empty) -> (~ p X3)) -> (~ atleast5 X4)))) /\ ((TransSet X3 /\ (((nat_p X4 /\ atleastp X2 X3) -> ((~ p (setprod X2 X2)) /\ atleast2 Empty)) -> (((p (f X4) /\ (~ exactly4 X3)) -> ((p (UPair X3 (Inj1 (f X2))) -> ((~ p X4) /\ (~ p X3)) -> (exactly4 X4 -> (p (Power (Power (Power (Power Empty)))) /\ ((~ exactly3 X3) -> ((~ atleast3 X3) /\ (~ nat_p X3)) -> (~ stricttotalorder_i (fun X5:set => fun X6:set => (binrep (Power (Power (Power (Power Empty)))) Empty c= X5)))))) -> p X2 -> (SNo X4 -> (~ SNo X3)) -> ((~ p (V_ X3)) /\ (atleast4 X4 /\ ((~ p (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty)) -> (~ atleast6 X2) -> (~ p X2))))) /\ p (f X3))) /\ (~ atleast4 X3)))) /\ ((~ atleast4 X2) /\ ((atleast2 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty) /\ (((~ set_of_pairs X3) -> ((~ reflexive_i (fun X5:set => fun X6:set => exactly3 X5 -> (~ atleast6 X6))) /\ TransSet (f X4))) -> p X3)) /\ p X2)))) -> (atleast6 X3 /\ (~ TransSet X4))) -> (~ atleast5 (f X3)))) /\ (~ atleast3 X3)) -> atleast3 (binrep (Power (Power (Power Empty))) (Power Empty)))) -> (~ atleast6 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)))) -> (~ p (Power (binrep (Power (Power Empty)) Empty)))) /\ p X4))))) /\ (~ p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)))).
admit.
Qed.

Theorem conj_Random2_TMaGoYyR7LEEd8ArrJUuTmxecbNsSK2fHm8: (exists X2:set, ((X2 c= f (Inj1 (f (f (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))))))) /\ (exists X3 :e X2, exists X4:set, (SNoEq_ (f X2) (V_ X4) X3 /\ p X3)))) -> (exists X2:set, forall X3:set, exists X4 :e f X3, (~ exactly2 X2)).
admit.
Qed.

Theorem conj_Random2_TMFLEHTibZT6RqZDfZoy9ciqK8Lk8uqXkgz: exists X2:set, ((~ p (f (f (f (f (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)))))))) /\ ((exists X3 :e f (f (setminus (f (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))) X2)), atleast2 X2) -> ((~ exactly3 (f (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))))) /\ (exists X3:set, exists X4 :e X3, (~ exactly2 (SNoLev Empty)))))).
admit.
Qed.

Theorem conj_Random2_TMWNJVuZuRma9t57rxUSbiyo2ox4uUs44Fy: ((forall X2 c= Empty, (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)) c= f X2)) /\ (forall X2:set, ((forall X3 :e f (f (f (f X2))), atleast5 (Power (binrep (Power (Power Empty)) Empty))) /\ (~ p X2)) -> (forall X3:set, (exists X4:set, ((((~ p Empty) /\ atleast5 X3) -> (~ exactly3 (f (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)))))) /\ (~ p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty)))) -> (forall X4 :e X2, p X3 -> atleast3 X2)))).
admit.
Qed.

Theorem conj_Random2_TMPECRKSuiQJGFYQBiYhwR3RemMX5fhNwtQ: forall X2 c= binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)), (TransSet Empty /\ (exactly3 Empty -> (exists X3:set, (((forall X4 c= binrep (Power (binrep (Power (Power Empty)) Empty)) Empty, ((~ atleast6 (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)) /\ (~ atleast3 X4))) /\ (exists X4:set, ((p X4 -> (p (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty) /\ atleast2 Empty)) /\ ((~ atleast5 X4) /\ (f X3 = X4))))) /\ (forall X4 :e X3, (~ p X4)))))).
admit.
Qed.

Theorem conj_Random2_TMXDSQpwAARbtWZzbcFckfwWxvYgsnQnqFq: forall X2:set, exists X3:set, ((exists X4 :e X3, ((~ exactly5 X4) /\ (~ set_of_pairs X2)) -> (~ p (f Empty)) -> (atleast2 X4 /\ exactly4 (f X4))) /\ (~ p X2)).
admit.
Qed.

Theorem conj_Random2_TMH8STG7VZvR7VRBA85rZy5Z71WRmLD5oEK: ((forall X2:set, (((~ exactly5 (mul_nat (f (binrep (Power (Power (Power Empty))) Empty)) Empty)) /\ (exists X3:set, (((exists X4:set, (p X4 /\ (((p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty) /\ (((p (Unj X3) -> p (binrep (Power (Power (Power (Power Empty)))) (Power Empty))) /\ ((~ atleast4 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty))) /\ (p X2 -> p X4))) /\ ((~ TransSet X3) -> (~ setsum_p X3) -> (~ p X3)))) -> (~ p Empty)) -> ((p X4 /\ (~ setsum_p (Power (binrep (Power (Power Empty)) Empty)))) /\ (p X4 /\ (~ p X3)))))) /\ (p X3 -> (exists X4:set, exactly5 X4))) /\ (((exists X4:set, ((((~ p (f (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty))) -> p X2) -> ((((((~ totalorder_i (fun X5:set => fun X6:set => (~ p X2))) -> ordinal Empty) -> (~ p X2)) -> ((((((~ atleast4 X4) -> (~ p X3)) /\ ((~ p X4) /\ (p X4 -> ((ordinal X4 /\ atleast4 (f X2)) /\ (((~ TransSet X4) -> TransSet X4) /\ (~ p X3)))))) -> (~ p X4)) /\ atleast6 X2) /\ atleast3 X4)) /\ (~ SNo X3)) /\ ((~ atleast6 X3) -> (~ p X4)))) /\ (p X4 -> (((((((~ (X2 :e f X4)) /\ (~ exactly5 X2)) /\ (~ ordinal (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty))) /\ ((((((atleast3 X3 /\ atleast2 (Power (Power (Power (Power Empty))))) -> (((~ p X2) /\ ((((X2 :e binrep (Power (Power (Power (Power Empty)))) (Power Empty)) -> nat_p (f X4) -> (((PNoLt X3 (fun X5:set => (X4 :e X5)) X4 (fun X5:set => (atleast4 X5 /\ (((exactly2 (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty) -> ((~ p X4) /\ (p X4 -> p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))))) -> ((atleast4 X3 -> ordinal X4) /\ (TransSet X5 /\ (((~ exactly4 X3) -> p X4) /\ (~ ordinal X3))))) /\ (~ exactly3 X4))) -> trichotomous_or_i (fun X6:set => fun X7:set => (~ atleast4 X6))) -> p X4) -> (~ p X3)) -> exactly3 Empty) -> nat_p X2) /\ (~ exactly3 X4)) -> (~ p (f X4)))) /\ ((~ atleast2 X3) /\ (set_of_pairs X3 /\ (((~ set_of_pairs X4) /\ (p X4 /\ ((((~ p X4) /\ ((~ exactly4 X2) -> (~ TransSet X3))) /\ ((~ p X4) /\ atleast6 Empty)) -> (~ nat_p (binrep (Power (Power (Power Empty))) Empty))))) /\ (atleast2 X4 -> atleast6 (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))))))))) -> p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty)) -> (((~ p (f X2)) -> (~ TransSet X3)) /\ ((((atleast4 X4 /\ p X3) /\ p X3) /\ (((((p (mul_nat (proj1 Empty) (f X4)) -> ((~ TransSet (UPair (f X3) X4)) /\ (~ p X3))) /\ (p (f (f X2)) -> TransSet X4 -> (((~ exactly3 (f (Union X3))) -> exactly4 X3) /\ ((((atleastp X3 X4 -> (~ atleast5 (binrep (Power (Power (Power (Power Empty)))) (Power Empty))) -> atleast3 (f X4)) -> (~ atleast2 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty))) /\ (((~ atleast2 X4) -> p X2) -> ((~ p X3) /\ (~ p X2)))) -> p Empty)))) /\ (p (f X3) -> p (f (binrep (Power (Power (Power (Power Empty)))) Empty)))) /\ (~ ordinal (f X4))) /\ (p X3 -> (~ TransSet X3) -> exactly5 X4))) /\ p X2))) /\ (p X4 /\ ((~ p (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty)) /\ (((~ exactly4 X4) /\ (p X4 /\ (~ p (f X3)))) -> ((~ p X4) /\ ordinal X2))))) /\ (~ atleast5 X4))) -> p X4) -> (((((SNo (f (f (f (f (f (Inj1 X4)))))) -> p X3 -> (~ (X4 :e binrep (Power (Power (Power Empty))) Empty)) -> p (Inj0 (f X4))) /\ (~ TransSet X3)) -> ((~ p (V_ (Power (Power (Power (Power Empty)))))) /\ (((~ p X4) -> (~ nat_p X2)) /\ (((exactly2 X4 -> ((((p X4 /\ (~ p (f X4))) -> (((~ exactly4 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty)) -> ordinal (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty))) -> (X2 :e binrep X4 X3)) -> (~ p X4)) -> (~ tuple_p Empty X3)) /\ (nat_p Empty /\ ((~ atleast4 X4) -> TransSet (Union Empty))))) -> atleast2 X3 -> ((~ ordinal (setminus Empty (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty))) /\ exactly5 X4)) /\ (p X3 -> (~ p X4))))) -> (~ p X2)) /\ exactly4 (f X3)) /\ (p X4 /\ (~ p X3)))) /\ (~ p (binrep (Power (Power (Power Empty))) (Power Empty))))))) /\ (forall X4:set, (p X3 /\ exactly5 (f X4)) -> (SNoLe X2 X4 /\ (((~ p X3) /\ (atleast3 X3 -> (~ atleast3 X4))) -> p X4)))) -> (forall X4 :e Empty, (~ exactly3 X4)))))) /\ (forall X3:set, (forall X4 c= f X2, (((~ (X3 :e X3)) -> (~ p X3)) /\ exactly5 X3)) -> (forall X4 c= f (f X3), (SNo X3 /\ ((~ atleast2 X3) -> p X3))))) -> (exists X3:set, ((exists X4:set, ((X4 c= f (f X2)) /\ ((~ p X3) /\ ((~ p X4) -> p X3)))) /\ (forall X4:set, (((((((~ p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty))) -> (((p X3 /\ (((~ atleast4 X4) /\ ((((p X3 -> atleast5 X3) /\ ((exactly3 (binrep X3 (f (f X4))) -> ((((X2 = binrep (Power (Power (Power Empty))) (Power Empty)) /\ exactly5 X3) -> ((~ TransSet (f X4)) -> (atleast3 X3 /\ (~ exactly2 (binrep (Power (Power (Power Empty))) (Power Empty))))) -> ((((~ exactly2 (binrep (Power (Power (Power (Power Empty)))) (Power Empty))) /\ atleast2 (binrep (Power (Power (Power Empty))) (Power Empty))) -> (~ p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))) -> p X2) /\ ((atleast6 Empty -> (~ TransSet (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty))) -> (exactly5 (f (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty)) -> (~ p X2)) -> (~ p X4)))) /\ ((~ p (f X3)) -> p X4 -> p X3))) -> (~ p X4))) -> (~ exactly5 (binrep (Power (Power (Power Empty))) Empty)) -> ((~ ordinal (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))) /\ set_of_pairs X4)) /\ ((atleast4 X3 /\ (~ p X4)) /\ p (f X4)))) /\ (~ p (binrep (Power (Power (Power (Power Empty)))) Empty)))) /\ (((p X3 /\ SNo X4) -> p X4 -> (((TransSet X4 /\ p X4) -> TransSet (f Empty)) /\ (~ p X4)) -> atleast2 X3) -> TransSet (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty))) /\ p (f (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty))) -> (~ p (f Empty)) -> p X3) -> (~ atleast5 X3)) /\ ordinal (f X4)) /\ (p Empty /\ ((p (f (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty)) /\ (~ p (Power (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty)))) /\ (~ atleast4 X3)))) -> (atleast6 X3 -> ((((setsum_p X3 -> ordinal Empty) /\ (~ p X4)) /\ (~ p X2)) /\ (((~ exactly3 Empty) -> ((~ p X3) /\ (exactly4 X3 -> p (f Empty)))) /\ exactly3 X4)) -> (~ setsum_p X4)) -> (~ SNo (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))))) /\ (((ordinal Empty /\ ((~ p (f (f (binrep (Power (Power (Power (Power Empty)))) Empty)))) -> ((p (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))) -> (~ atleast2 X4)) /\ (~ p (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty))))) /\ p (Power (binrep (Power (Power Empty)) Empty))) /\ (((((~ exactly4 X2) /\ atleast4 X3) -> (p (f (f X3)) /\ (~ exactly4 X3))) -> p X3) /\ (~ atleast3 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)))))) -> (~ atleast3 X3)))) -> (exists X3:set, ((forall X4 :e f (f X2), exactly3 (f (binrep (Power (Power (Power Empty))) (Power Empty)))) /\ exactly2 (f X3)))) /\ (exists X2:set, (((forall X3:set, forall X4:set, (p (Sing X4) /\ (exactly2 X4 -> ((~ p X4) /\ atleast2 X2))) -> p X4) -> ((~ exactly2 (f (ordsucc X2))) /\ (forall X3 :e Empty, forall X4 :e X3, ((~ setsum_p X2) /\ setsum_p (f X3))))) /\ atleast5 (Power (binrep (Power (Power Empty)) Empty))))).
admit.
Qed.

Theorem conj_Random2_TMQyr8o3y2w5QoAGzcUxkoxTtxPrh1jgxAV: ((exists X2:set, ((~ atleast6 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty))) /\ (exists X3:set, ((X3 c= f (f (f X2))) /\ (exists X4:set, p (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty) -> ((~ exactly2 X3) /\ p (f X3))))))) -> (exists X2:set, nat_p (f X2))) -> (exists X2:set, ((X2 c= binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty) /\ p X2)).
admit.
Qed.

Theorem conj_Random2_TMcHib4bK6yeTxFVGKF7Ppr7CdEqAsFa51a: ((((~ p (binrep (Power (Power (Power Empty))) (Power Empty))) /\ (exists X2:set, ((forall X3 :e X2, exists X4 :e binrep (Power (Power (Power (Power Empty)))) Empty, ((~ nat_p X4) /\ ((~ nat_p (Power (binrep (Power (Power Empty)) Empty))) /\ ((~ (Empty :e X3)) /\ ((~ atleast2 X4) -> ((~ atleast2 X3) /\ (~ p X2)) -> (~ setsum_p X4)))))) /\ (exists X3:set, (exists X4:set, ((X4 c= Empty) /\ p (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty))) -> (forall X4:set, exactly4 X4))))) /\ p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty))) -> p (Power (Power (Power (Power Empty))))) -> (exists X2:set, (~ atleast3 (f X2))) -> (forall X2:set, forall X3:set, (exists X4:set, p X4) -> (exists X4 :e X2, ((~ p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty)) /\ ordinal X2))).
admit.
Qed.

Theorem conj_Random2_TMQ1tQnas4fj59K9UafaJbvBtZPtvAbaNiF: ((forall X2:set, (forall X3:set, ((exists X4:set, ((((~ p (SetAdjoin X4 X4)) -> atleast3 X4) /\ (~ p (f X3))) /\ (p X4 -> ((~ p X4) /\ (p X2 -> ((((atleast5 X4 -> exactly4 X3) -> (((((~ exactly2 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty))) -> p X3 -> (TransSet (setexp (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) (ordsucc (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty))) /\ (~ ordinal Empty))) -> ((~ p X4) /\ (((~ nat_p (f (f X2))) /\ atleast4 X3) /\ ((~ p X4) -> (~ exactly2 X2))))) -> ((~ p X3) /\ (((~ p Empty) -> (~ atleast3 (binrep (Power (Power (Power Empty))) (Power Empty)))) /\ (~ p (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty)))) -> (((atleast2 (f X3) /\ (SNo X3 -> exactly4 (combine_funcs X2 X3 (fun X5:set => X5) (fun X5:set => X5) X3) -> (((TransSet X4 /\ (~ p X2)) -> (~ p (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty)) -> (~ p (binintersect (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) X4))) /\ ((p (f (f X2)) -> (~ p X4)) /\ (~ SNo_ X3 (proj0 (f X3))))))) /\ p X4) /\ (((((~ exactly3 X3) -> (((p X4 -> (((~ nat_p X3) /\ (~ atleast5 X3)) /\ (~ exactly5 X3))) -> (~ exactly4 X4)) /\ (~ atleast5 (Power X3)))) /\ ((atleast6 (f (Sep Empty (fun X5:set => (~ p X4)))) /\ ((((p X4 -> atleast6 X2 -> ordinal X2) /\ ((p Empty -> (~ exactly4 Empty)) -> ((((((~ atleast4 (f X2)) -> (~ (X3 :e X2))) /\ tuple_p X3 X3) -> (exactly4 Empty /\ (atleast2 X4 /\ (~ p (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))))))) /\ (~ exactly2 X3)) /\ (p X4 -> (~ atleast2 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty))))) -> nat_p (f X4) -> (~ p (f (Power Empty))))) -> (((~ exactly2 (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)) -> ((~ PNoLt X2 (fun X5:set => p (Union X3)) X2 (fun X5:set => (((~ p X4) /\ ordinal X2) /\ (~ exactly4 X4)) -> p X5)) /\ (((((((~ p X2) /\ ((~ p X2) /\ ((~ p (f (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))))) /\ (atleast2 (f X4) -> p X3 -> ((((~ atleastp X3 X4) -> (~ p (f (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty))))) -> (~ p (Inj0 Empty))) /\ ((~ TransSet (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)) -> (atleast3 X3 /\ ((p X4 -> (((exactly3 X4 /\ ((((~ exactly4 X2) -> SNo (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty) -> ((~ p X2) -> ((p X4 -> ((((exactly4 X2 -> ((((X3 c= X3) /\ (((~ p X2) -> (~ p X3)) /\ ((((exactly4 X2 -> (~ SNo (f (f (f X3))))) /\ ((~ atleastp X4 X4) /\ p (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty))) /\ (~ p X3)) -> nat_p (Power X4) -> SNo_ Empty X3))) /\ (~ p X3)) /\ setsum_p Empty)) /\ (atleast4 X2 /\ ((((~ exactly3 X3) /\ (~ exactly2 X2)) -> (~ p (f X4))) /\ (((((~ p X3) -> p X4) -> (((~ atleast2 (Power (Power (Power (Power Empty))))) -> (~ p X4)) /\ (set_of_pairs X2 /\ PNoLt X4 (fun X5:set => setsum_p X5) X3 (fun X5:set => nat_p Empty -> (((~ atleast4 (f (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty))) -> ((~ p (binrep (Power (Power (Power (Power Empty)))) Empty)) /\ (~ p X4)) -> (~ exactly5 Empty)) /\ p X4))))) /\ (((~ p X4) -> p (f (f X4))) /\ atleast4 X4)) -> (~ exactly3 (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)))) -> p X4)))) /\ ((X4 :e X4) -> p (f X3))) /\ (~ p (SNoElts_ (Union X3))))) /\ ((~ p X3) /\ p (f (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty))))) -> p (binrep (Power (Power (Power Empty))) (Power Empty))) -> (nat_p (binrep (Power (Power (Power (Power Empty)))) Empty) /\ p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)))) -> (~ atleast3 (binrep (Power (Power (Power Empty))) Empty))) /\ p (binintersect (f (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty)) (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)))))) /\ p Empty) /\ exactly5 X3)) -> ((p X2 -> atleast6 X4) /\ (~ ordinal (f X2))))) -> ((~ p X4) /\ (p (f (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty)) /\ (~ atleast6 (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)))))))))) /\ exactly3 X2) /\ p X2) /\ ((~ atleast4 X2) -> (~ atleast4 (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)))))) -> ((((~ nat_p X3) /\ (~ p X4)) /\ atleast6 X2) /\ (~ p X3))) -> (~ p (f (f X4)))))) /\ ((~ atleast5 (Sep2 X4 (fun X5:set => nat_primrec Empty (fun X6:set => fun X7:set => Empty) X4) (fun X5:set => fun X6:set => (~ p X6)))) -> p (f X3)))) -> ordinal X4)) /\ p (f (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))))) /\ ((((~ atleast2 (Inj1 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty))) -> (((p X2 /\ p (f Empty)) /\ ((p (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))) /\ (~ nat_p (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty))) -> p Empty)) /\ (~ ordinal (f X2)))) -> (~ exactly4 (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty))) -> ((~ atleast5 (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty)) -> (~ p X4)) -> (~ p X2))) -> (~ p (Power (binrep (Power (Power Empty)) Empty))))) -> (~ p X4)) /\ exactly5 (f (V_ X3)))) /\ (set_of_pairs (Power (Power (Power (Power Empty)))) /\ (((~ exactly2 X4) -> (~ exactly4 X4)) -> atleast5 X4))) /\ (exactly2 X3 /\ (~ p X3))) -> ((~ set_of_pairs X2) /\ (~ exactly5 (binrep X4 X3))) -> p (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)))))))) /\ (exists X4 :e f (Inj0 X3), p X2)) -> (forall X4 :e X2, atleast4 X4)) -> (((forall X3 c= X2, (exists X4:set, ((X4 c= X3) /\ (~ atleast6 (f (Power (binrep (Power (Power Empty)) Empty)))))) -> (exists X4 :e SetAdjoin (f X2) Empty, (((~ atleast2 (f (Union X3))) -> (~ p X3)) /\ (((~ p X3) /\ p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))) /\ ((TransSet Empty -> SNoLe X4 (f X3)) /\ ((~ p X3) -> (~ atleast4 X2))))))) -> (exists X3:set, ((X3 c= X2) /\ (exists X4:set, atleast6 X3)))) /\ (forall X3:set, (~ ordinal Empty) -> (forall X4:set, (~ exactly3 (f Empty)))))) /\ p (f (Inj0 (f (f (f (f (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))))))))).
admit.
Qed.

Theorem conj_Random2_TMaZmszyn66iEaEB4toUDe9E3L2sSmqMd2R: (forall X2:set, (~ setsum_p X2) -> (~ p (Power (binrep (Power (Power Empty)) Empty)))) -> (exists X2:set, ((exists X3:set, ((~ nat_p (f X2)) /\ (exists X4:set, (~ p X4)))) /\ (forall X3:set, (((exists X4 :e binrep (Power (Power (Power (Power Empty)))) Empty, ((((~ exactly4 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty)) /\ (~ atleast3 (Inj1 (binrep (Power (Power (Power Empty))) (Power Empty))))) -> (((~ p X3) -> (~ p (Union X4))) /\ (((p X3 /\ ((((((~ p X4) -> (~ SNo (SetAdjoin X4 X4))) /\ (~ atleast4 X4)) /\ (~ p X4)) -> p X3) /\ ((p X2 -> p X3) /\ (~ p (f (f (f (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)))))))) /\ (setsum_p X4 /\ p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty))) /\ (p X4 -> p (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))))))) /\ (((~ p X3) /\ ((setsum_p X3 /\ (~ PNoLt_ X4 (fun X5:set => ((p (UPair X5 X4) /\ (~ p X4)) /\ (~ p (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty)))) (fun X5:set => (~ p X4)))) /\ ordinal X4)) /\ (p (f X4) -> (((~ exactly3 Empty) -> nat_p X3) /\ exactly4 (f X3))))) -> exactly3 X3) -> (forall X4 c= X3, TransSet X3) -> (forall X4 c= f (f X2), p X2)) /\ (forall X4 c= f Empty, ((~ TransSet X2) /\ (((~ nat_p (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty)) /\ nat_p X2) /\ TransSet X4))))))).
admit.
Qed.

Theorem conj_Random2_TMR4V4zxWLyk9hr24obt2fZA1ZLXxYDQzPc: forall X2:set, (~ exactly5 (f X2)) -> (exists X3:set, ((exists X4:set, ((X4 c= X3) /\ ((((nat_p X4 /\ (((nat_p X4 /\ ((((((~ p X2) -> exactly4 (lam2 (f X3) (fun X5:set => X4) (fun X5:set => fun X6:set => X6))) -> (((((((((~ atleast5 X2) -> (~ reflexive_i (fun X5:set => fun X6:set => ((exactly3 X5 -> ((~ p X6) /\ p X5)) -> (~ p X4) -> (~ nat_p X2)) -> reflexive_i (fun X7:set => fun X8:set => (exactly5 X8 /\ (~ p (f (lam X7 (fun X9:set => Empty))))))))) -> (~ nat_p X3)) /\ ordinal X3) /\ ((p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty) /\ (p X4 -> p X3 -> p X3)) /\ ((~ p X4) -> (~ p Empty) -> (~ (X3 :e X3)) -> (atleast6 X4 /\ p (f X3)) -> p X4))) /\ p (f X4)) /\ p X2) -> (~ p X4)) /\ (~ atleast6 X4)) -> atleast2 (f (f X4))) -> p Empty) -> SNo X4) /\ ((~ inj X4 X4 (fun X5:set => X3)) -> ((((p X3 -> (~ atleast6 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty)) -> (~ nat_p (f X4))) -> (((~ atleast5 X3) -> p Empty) /\ ((p (mul_nat (f X3) (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty)) -> ((~ exactly2 X2) -> (~ atleast3 (f (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))))) -> exactly2 X3) -> (~ TransSet X2)))) -> ((~ atleast5 X4) /\ (linear_i (fun X5:set => fun X6:set => (p Empty /\ (p X5 /\ (p Empty /\ (~ p Empty))))) /\ p X4))) /\ (~ setsum_p (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty)))))) -> ((~ p X4) /\ p X3)) -> (atleast6 Empty /\ (p (Power (Power (Power (Power Empty)))) -> (~ exactly2 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))))))) /\ p X4) /\ (~ p X4)) /\ ((((((p X2 -> atleast6 X2) /\ (~ exactly4 (f X3))) -> ((p X3 -> (~ p X3)) /\ (p (SNoLev X4) /\ ((((~ exactly4 X4) -> ((atleast2 X4 /\ (~ p X3)) /\ (~ p (f X3)))) /\ equip X2 X4) /\ (exactly3 Empty -> p (f Empty)))))) -> (~ p (binrep (Power (Power (Power Empty))) Empty))) /\ (~ atleast6 (In_rec_i (fun X5:set => fun X6:set -> set => Empty) (f X4)))) /\ ((~ exactly3 X4) /\ p X2))))) /\ (~ SNo (f X2)))).
admit.
Qed.

Theorem conj_Random2_TMVX3aLbsURiES9rip6Kpcy3wMgYJpzL6n5: p (f (f (f (f (f (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty)))))) -> ((forall X2 :e binrep (Power (Power (Power Empty))) (Power Empty), (((~ exactly3 (f X2)) /\ (forall X3:set, p X2)) /\ (exists X3:set, ((exists X4:set, ((set_of_pairs X3 -> (~ atleast4 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty))) /\ p X3)) /\ (forall X4:set, atleast6 X3 -> (~ TransSet (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))))))))) /\ (exists X2:set, (((forall X3 c= f X2, exists X4:set, ((X4 c= X3) /\ (~ p (V_ (setminus (f (ordsucc X3)) (f (f X4))))))) -> (forall X3:set, (forall X4:set, (((~ p X4) /\ (~ atleast4 X2)) /\ (~ ordinal X3)) -> exactly2 X3) -> (~ atleast5 Empty))) /\ ((exists X3:set, (~ p X3)) -> exactly2 (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty))))).
admit.
Qed.

Theorem conj_Random2_TMPrvfQbYpDnCoA5i3J3zHJrznWZh1mCkfL: forall X2 :e binrep (Power (Power (Power Empty))) Empty, forall X3:set, nat_p X3 -> (~ reflexive_i (fun X4:set => fun X5:set => ((~ PNo_downc (fun X6:set => fun X7:set -> prop => nat_p X3) (f X3) (fun X6:set => (((~ p (binrep (Power (Power (Power (Power Empty)))) (Power Empty))) /\ ((exactly3 X6 -> (((((((((~ p X2) /\ (p X6 -> (~ atleast2 X3))) /\ ((((~ p Empty) -> exactly4 X2) /\ p (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)) /\ (((p X5 -> (((((((p X4 /\ (p X5 /\ ((~ p X4) -> per_i (fun X7:set => fun X8:set => (~ p X2))))) /\ (~ atleast6 (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty))) /\ (((~ p (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)))) -> (((~ p (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)))) -> (~ p (Union (f X6))) -> atleast6 X6) -> p X3) -> ((~ (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty :e X2)) /\ (p (Power (Power (Power (Power Empty)))) -> atleast6 X6)) -> (((~ p X5) /\ (p X3 /\ (p X5 -> p X6))) /\ ((~ p X5) -> atleast4 (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty) -> p Empty -> (((~ exactly5 X6) /\ (atleast5 (Unj X5) /\ (p X5 -> (~ trichotomous_or_i (fun X7:set => fun X8:set => atleast2 (f X8))) -> nat_p X5))) /\ ((atleast4 X5 -> (~ exactly4 X6) -> (((p X2 /\ TransSet X5) /\ p Empty) /\ (~ p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty))))) -> (((~ p X5) /\ (~ p Empty)) /\ (~ TransSet X5))))))) -> (~ p X5))) -> ((~ exactly3 X2) -> (~ exactly3 X6)) -> atleastp (Power (binrep (Power (Power Empty)) Empty)) X6) /\ (((TransSet (f (f X6)) -> ((~ atleast3 X3) /\ (~ exactly5 Empty))) -> p X5) -> (~ (X6 c= Power (Power (Power (Power Empty))))))) -> ((((p X6 /\ (p X4 -> p X2)) /\ (~ (Empty :e Empty))) -> (exactly2 (f X6) /\ (((~ p (Power (binrep (Power (Power Empty)) Empty))) /\ (~ p Empty)) -> exactly5 X5 -> (~ TransSet X5) -> p (binrep (Power (Power (Power (Power Empty)))) (Power Empty))))) /\ (~ p (binrep (Power (Power (Power (Power Empty)))) Empty))) -> p X5) /\ ((p X6 /\ ((~ p X5) /\ (~ p Empty))) /\ (p Empty /\ p X5)))) /\ ((p Empty -> (~ p X3)) /\ reflexive_i (fun X7:set => fun X8:set => p (binunion (f X8) X8) -> (atleast6 X7 -> ((~ exactly4 X8) /\ p X6)) -> ((~ p X7) /\ set_of_pairs Empty)))) /\ (exactly4 X5 -> p X3 -> (strictpartialorder_i (fun X7:set => fun X8:set => (~ atleast4 X7)) /\ (~ (X3 :e X4))))))) -> (p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty) /\ ((~ exactly4 X5) -> (~ exactly2 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)))))) -> (~ atleast5 (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty))) -> (~ p (f X5))) /\ p X6) /\ ((((((((((~ atleast3 X4) -> ((((~ p (binrep (Power (Power (Power Empty))) (Power Empty))) -> (~ SNo_ (Inj0 X6) X6)) -> (~ SNo X5)) /\ ((ordinal X5 /\ p X6) /\ (p (f (Power (binrep (Power (Power Empty)) Empty))) /\ ((((~ nat_p X6) -> p X5) /\ (((p X5 -> (~ SNoLe X6 X5)) -> p (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)))) /\ p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)))) /\ (exactly3 X5 -> p X2)))))) -> ((SNoLe X4 X6 -> p X3) /\ (~ p X6))) -> SNo X5) /\ exactly5 X5) -> (~ p X6) -> (f X6 :e Power (Power (Power (Power Empty))))) -> (~ p X6)) /\ (~ p (f X4))) /\ ((((~ p X6) -> ((~ p X5) /\ ((binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty = X6) -> (~ atleast3 X6) -> tuple_p (binrep (Power (Power (Power (Power Empty)))) Empty) X6)) -> atleast4 X6 -> ordinal X6) /\ ((atleast5 X5 -> p (binrep (Power (Power (Power Empty))) (Power Empty))) -> ((p Empty /\ exactly4 (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty)) /\ ((~ p X3) -> ((p X3 /\ p (f (binrep (Power (Power (Power Empty))) Empty))) /\ p (proj1 X3)))))) -> ((~ p X6) /\ ((exactly4 (binrep (Power (Power (Power Empty))) Empty) /\ p X6) /\ PNoLe X6 (fun X7:set => ((p (f X7) /\ p X7) /\ ((atleast4 X7 /\ ((~ p X7) -> ((p (proj1 (f (Inj0 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty))))) -> TransSet (f (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty)) -> ((~ atleast5 (Power (binrep (Power (Power Empty)) Empty))) /\ (~ p X6))) /\ ((((~ p X7) -> p (Power (binrep (Power (Power Empty)) Empty))) -> ((~ atleast4 X7) -> (p X4 /\ (~ atleast4 (Sep2 (UPair (f X6) X7) (fun X8:set => X3) (fun X8:set => fun X9:set => (X7 :e X9) -> p (binrep (Power (Power (Power Empty))) Empty))))) -> p Empty) -> partialorder_i (fun X8:set => fun X9:set => atleast4 X8)) /\ ((~ atleast6 X7) /\ (((((~ p (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)) /\ PNoLe X7 (fun X8:set => (~ exactly3 X8)) X6 (fun X8:set => atleast5 Empty)) /\ (~ exactly3 (f X7))) -> (~ p X6)) -> (~ p (f Empty)) -> (~ ordinal (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty)))))))) -> (~ p X2)))) Empty (fun X7:set => ((p X6 -> ((((((~ exactly3 Empty) -> (~ p X6)) /\ ((((((~ SNo X6) -> ((~ p (f X2)) -> p X6) -> ((~ atleast6 (f X7)) -> (p (binrep (Power (Power (Power Empty))) Empty) -> atleast3 (SNoLev Empty) -> setsum_p (Power (Power (Power (Power Empty))))) -> ((atleast3 (proj1 Empty) -> p X4) /\ (~ p (Power (Power (Power (Power Empty))))))) -> (~ p Empty)) -> (inj X7 (binrep (Power (Power (Power Empty))) (Power Empty)) (fun X8:set => binrep (Power (Power (Power (Power Empty)))) Empty) /\ (p X7 -> (~ exactly3 Empty) -> (((~ nat_p X6) /\ (~ p X7)) /\ p X6) -> (((~ exactly2 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))) /\ atleast3 Empty) -> (((~ atleast2 (ordsucc (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty))) -> p (Power (Power (Power (Power Empty))))) /\ (~ PNoLe (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty) (fun X8:set => (~ atleast3 X7)) (f X6) (fun X8:set => (~ p X7))))) -> (~ exactly3 X6)))) /\ (~ atleast5 X5)) -> (~ atleast5 X6)) -> ordinal X7)) -> (~ p X3)) /\ ((~ atleast6 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty))) /\ ((~ (f X7 :e X6)) /\ atleast4 X7))) /\ (~ p X7))) -> (nat_p (f Empty) -> ordinal X7) -> (~ atleast4 X6)) -> (((~ atleast6 X7) /\ ((((~ SNo (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty)) /\ (p (ordsucc X6) -> (~ TransSet X5) -> (~ atleast2 X6))) -> ((~ TransSet (f X7)) /\ (~ exactly5 (f (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty))))) /\ p X7)) /\ (~ exactly4 Empty))))))) /\ exactly5 (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))))) /\ (p (famunion X6 (fun X7:set => binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)))) /\ SNoLe X3 X6)) -> (~ p X2)) -> (((p X5 -> (~ p Empty)) -> TransSet X3) /\ ((SNo X6 -> (((((((((~ p X5) /\ (~ p X5)) -> (~ p X5)) -> (~ p (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))))) /\ (~ nat_p (Sep2 X6 (fun X7:set => binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty) (fun X7:set => fun X8:set => atleast3 X5)))) /\ equip X4 X5) /\ ((((~ SNoLt X5 X6) /\ ((~ p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty)) -> (~ p X6))) /\ ordinal X5) /\ (~ p X4))) -> (~ SNoLt X5 X5)) /\ p X5)) /\ ((~ p X5) /\ TransSet (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty)))) -> p X3)) /\ (p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) -> (~ equip X5 (binrep (Power (Power (Power Empty))) Empty)) -> (~ reflexive_i (fun X7:set => fun X8:set => atleast2 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty))) -> (((~ p X2) /\ ((((((~ strictpartialorder_i (fun X7:set => fun X8:set => (p (Inj0 X4) /\ ((~ atleast6 X4) -> ((~ p X8) /\ (~ atleast5 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))))))))) -> (((~ p (f (f X6))) -> (~ p (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty))) /\ (~ atleast2 (binrep (Power (Power (Power Empty))) Empty)))) /\ p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty))) -> (~ p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty))) /\ (((p X5 /\ (~ p X6)) -> (~ p Empty)) -> p Empty -> ((~ p X5) -> (~ ordinal X5) -> (~ p X2)) -> (~ p (add_nat X5 X5)))) -> (~ p X5))) /\ exactly2 X3))))) /\ atleast4 (Unj X4)))).
admit.
Qed.

Theorem conj_Random2_TMLaAketNmGRoYKwURuF5Zgute9715hWJCX: forall X2:set, (((exists X3:set, ((exists X4 :e f (f (f (f X3))), (exactly5 (f X3) /\ p (f X3)) -> p X4) /\ ((~ p (f X2)) -> (exists X4:set, ((X4 c= X2) /\ ((antisymmetric_i (fun X5:set => fun X6:set => (~ nat_p X5)) -> exactly4 (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)) /\ TransSet X3)))))) /\ (~ p (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))))) /\ (forall X3 :e binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)), forall X4 c= X3, (((~ p (Inj1 (f X2))) /\ exactly3 (setexp (Inj1 (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty)) X2)) /\ p X3))).
admit.
Qed.

Theorem conj_Random2_TMWLLDvpuWN2oCWVjoR9DN4ayrdXLykgyWr: forall X2:set, (((forall X3 c= X2, p X2) /\ (~ atleastp (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) X2)) -> (~ p X2)) -> PNoLt X2 (fun X3:set => forall X4 c= binrep (Power (binrep (Power (Power Empty)) Empty)) Empty, (p X3 /\ (((p X4 -> (~ p (Power (Power (Power (Power Empty)))))) /\ (((~ exactly5 X2) /\ atleast3 (lam2 (f X3) (fun X5:set => X4) (fun X5:set => fun X6:set => X4))) -> p X3)) /\ (~ exactly5 X4)))) X2 (fun X3:set => forall X4 c= X3, (((~ p X3) /\ ((~ equip X2 (f X2)) /\ ((~ ordinal X4) -> exactly5 X2))) /\ p (f X3))).
admit.
Qed.

Theorem conj_Random2_TMWTB6hz7fpvZeU9nnH6ccjUEmLokkpHp8N: exists X2 :e famunion (SetAdjoin (binintersect (f (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty)) (Inj1 (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty))) Empty) (fun X3:set => X3), exists X3:set, ((~ p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty))) /\ p (f (binrep (Power (Power (Power (Power Empty)))) (Power Empty)))).
admit.
Qed.

Theorem conj_Random2_TMJY61Xne5gMsT2R6SoGE1dZ1G381nR7ybe: ((forall X2:set, (forall X3 :e X2, ordinal (Inj1 X2)) -> (exists X3:set, ((~ atleast5 (Inj1 (f (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty))))) /\ (exists X4:set, ((~ exactly5 X3) /\ totalorder_i (fun X5:set => fun X6:set => ((~ nat_p X4) -> (~ p X5)) -> exactly3 X5)))))) -> ((forall X2:set, exists X3:set, (((p (f X3) -> (forall X4 c= X3, (~ ordinal X2) -> (~ atleast2 X3))) -> ((~ exactly5 (f (f X3))) -> (exists X4:set, p X3)) -> p X2) /\ ((forall X4:set, (~ TransSet (Inj1 X3)) -> p X3) -> (exists X4:set, (((~ exactly3 X4) -> (p (f Empty) /\ (~ p Empty))) /\ (p (f X2) /\ (((~ p (binrep (UPair (f Empty) (Power (Power (Power (Power Empty))))) (Union X4))) /\ (~ atleast6 (f (binrep (Power (Power (Power Empty))) Empty)))) /\ exactly2 X2))))))) /\ (exists X2:set, forall X3:set, (~ atleast5 X3) -> (((exists X4:set, ((~ atleast3 X3) /\ (~ p X4))) /\ (exists X4 :e Inj0 (f (f X3)), p X2)) /\ (~ atleast2 X2))))) -> exactly2 (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty).
admit.
Qed.

Theorem conj_Random2_TMFrw98Z9CKJ33Bmkpg3GVQiCs3CuAQnyyx: (atleast3 (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))) /\ (forall X2:set, forall X3 c= X2, forall X4 :e X3, ((((~ set_of_pairs X2) /\ ((~ exactly2 X4) -> (~ p X3))) /\ (~ p X3)) /\ (((~ p X4) /\ p X4) /\ (~ (Empty :e Empty)))) -> exactly5 X3)).
admit.
Qed.

Theorem conj_Random2_TMVD8ZHapwQ4grnEca8ak4dzaBe3FaQvdsq: ((exists X2 :e f (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty), exists X3:set, ((~ p (f (f (Power (f X3))))) /\ (exists X4:set, (p X4 -> p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty))) -> (TransSet X3 /\ (((~ p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty)) -> (~ exactly5 X3)) /\ exactly4 X4))))) -> atleast6 (Power (binrep (Power (Power Empty)) Empty))) -> (forall X2:set, (exists X3:set, forall X4:set, (~ atleast3 X3) -> (~ p X3)) -> exactly4 X2).
admit.
Qed.

Theorem conj_Random2_TMTUFamLkk9shVFirwRp3rmxtApAA81krcp: (exists X2:set, ((X2 c= Sing (Power (binrep (Power (Power Empty)) Empty))) /\ (forall X3:set, exactly3 X2 -> ((exists X4 :e binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty), (((((p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) -> p (f X4)) -> (((((((~ p X4) -> ((((~ SNo (f X2)) -> ((set_of_pairs X4 /\ ((p (binrep (Power (Power (Power (Power Empty)))) Empty) /\ (~ p (f X4))) /\ (p X4 /\ (((p (f Empty) /\ ((((Empty = X3) -> ((exactly4 X3 -> (~ exactly2 X3)) /\ (atleast5 (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty) /\ (~ p X4)))) /\ ((((p X3 /\ atleast6 X4) /\ (((exactly5 Empty /\ ((~ p X3) -> (~ exactly3 X3) -> (~ ordinal (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty)))) /\ ((((atleast5 X4 /\ (((((~ ordinal Empty) /\ p X2) /\ (p (Union X3) -> ((~ exactly5 (f (f X3))) /\ ((binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty :e X2) /\ (~ p X3))) -> (p Empty /\ p X3))) -> (((exactly4 X2 /\ p X3) /\ p (f X3)) /\ p X3)) -> p X3)) -> ((((X3 :e X3) /\ (atleast2 X3 /\ p X4)) /\ (~ p X4)) /\ ((p X4 -> (p (f X3) /\ (~ p X3)) -> (((~ p (f (binrep (Power (Power (Power Empty))) Empty))) /\ ((~ p (f X4)) /\ (~ p X2))) /\ (~ p Empty))) /\ ((~ p (Power (Power (Power (Power Empty))))) -> (~ p Empty))))) /\ (~ p X2)) -> p X2)) -> (~ exactly3 (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)))) -> (set_of_pairs Empty -> ((((~ atleast5 X4) /\ ((X4 = binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty) /\ (~ p X2))) /\ ((X3 :e binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty) -> ((~ p (f X4)) /\ p (Sing (binrep (Power (Power (Power (Power Empty)))) Empty))))) /\ ((p X4 -> (p X4 /\ (~ p Empty))) -> (~ p (setminus X4 X3))))) -> (~ atleast5 X4)) -> atleast6 Empty -> (~ p (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty)))) -> (~ p X3))) /\ (exactly5 X3 -> (~ exactly2 (f X3)) -> ((~ atleast5 X3) /\ (~ ordinal X3)))) /\ (((p X3 /\ (((p X4 /\ (~ atleast3 X3)) /\ ((~ tuple_p X4 X4) /\ (nat_p X4 -> (p X4 /\ (~ exactly4 (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty)))))) -> (~ atleast4 X3))) /\ (ordinal X2 -> (~ p X3))) -> ((~ exactly5 Empty) -> atleast4 X4) -> p (combine_funcs (f (f X4)) X4 (fun X5:set => X3) (fun X5:set => SetAdjoin X3 X5) (add_nat (binrep (Unj (f (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)))) (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)) X4)) -> ((((~ p X4) /\ (reflexive_i (fun X5:set => fun X6:set => (~ atleast2 X2)) /\ (~ exactly3 (f X4)))) -> p X4) /\ ((((p X3 -> (~ p X3)) -> (((((exactly3 X3 /\ ((p X4 -> SNo X3) -> (X2 :e f X2))) -> ((set_of_pairs X3 /\ (~ atleast3 X4)) /\ (~ p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))))) -> exactly4 X4) /\ (((~ nat_p Empty) /\ p X4) /\ (((exactly2 X2 -> p X3) /\ ((~ atleast6 X4) -> (((((((~ atleast5 X3) /\ (exactly3 Empty /\ ordinal (proj1 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty)))) /\ (~ exactly3 X3)) /\ p (f X4)) /\ ((p X3 /\ ((p (f X4) /\ (p X3 /\ ((~ p Empty) -> p X3))) -> exactly3 X2)) /\ (~ atleast6 X4))) -> (~ ordinal X3) -> nat_p X3 -> (~ p (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty))) /\ (~ p X4)))) /\ ((~ p X3) -> p (binrep (Power (Power (Power (Power Empty)))) Empty) -> (atleast2 (f X3) /\ (((atleast3 X4 -> (~ TransSet X3)) -> ((exactly5 (f X4) -> (~ p X3)) -> (~ p X3)) -> (~ p X3)) -> atleast2 Empty)))))) /\ exactly5 (Power (binrep (Power (Power Empty)) Empty)))) /\ exactly2 Empty) /\ p X2))))))) /\ p (f Empty))) -> p (f (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty))) /\ (((((((~ p (f X4)) -> atleast2 X3 -> p X4 -> setsum_p X3) /\ ((((~ p (binrep (Power (Power (Power (Power Empty)))) Empty)) /\ ((p X4 -> (~ p X4)) /\ (~ p X3))) -> p X4 -> (set_of_pairs X4 /\ p X3)) -> ((~ p (f (Unj (f (Power (Power (Power (Power Empty)))))))) /\ ((~ p X3) /\ (((exactly2 X4 /\ (~ p (f X2))) /\ ((~ p (f X4)) -> ((((~ reflexive_i (fun X5:set => fun X6:set => (~ TransSet X6))) -> (~ nat_p X3)) /\ (((p (binrep (Power (Power (Power Empty))) Empty) -> (~ set_of_pairs (Inj1 X2))) /\ ordinal X3) /\ binop_on X2 (fun X5:set => fun X6:set => X5))) /\ (((~ setsum_p X3) /\ (~ atleast4 X3)) -> (~ p X3))))) /\ ((p X3 /\ (~ p (f X4))) -> ((p X2 /\ (~ tuple_p X4 X4)) /\ ((~ p (f X2)) -> (~ p X3) -> (~ p X4))))))) -> (~ p X2))) -> eqreln_i (fun X5:set => fun X6:set => p X6 -> atleast2 X6 -> (~ p X6))) -> (p X3 /\ ((~ exactly2 (V_ X3)) /\ (~ atleast5 (Union (f Empty)))))) /\ TransSet X3) -> transitive_i (fun X5:set => fun X6:set => (atleastp X2 Empty -> ((~ atleast2 X6) /\ p X5)) -> (~ p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))))) -> (~ p X3)))) /\ (~ p X4)) /\ (((((~ TransSet (f X4)) /\ ((~ atleast4 X2) -> (((atleast2 (binrep (Power (Power (Power (Power Empty)))) Empty) -> p X3) -> (((exactly4 (f X3) -> p (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty)) /\ p X4) /\ p X3)) /\ setsum_p X4) -> (~ nat_p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty)))) -> (p (f (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty)) /\ ((~ p X4) /\ (~ p X4)))) -> p X4 -> (((~ p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))) /\ (~ p X3)) /\ (~ p X3))) /\ p X4)) /\ setsum_p X4) /\ (~ p X3)) -> ((((p X3 -> (atleast5 X2 /\ ((~ TransSet X3) -> exactly5 X4))) /\ (~ SNo X2)) /\ (~ exactly5 (Union X3))) /\ p X4)) -> (~ p (binrep (Power (Power (Power Empty))) Empty))) -> p X2 -> ((~ p X3) /\ ((((atleast5 X3 -> (((~ p X3) -> (~ exactly2 X3)) /\ (p (proj1 X4) -> (~ exactly3 X4)))) /\ p X2) /\ (~ atleast5 Empty)) /\ ((~ p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty)) /\ ((~ ordinal (f Empty)) -> (~ p (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty))))))) -> (p Empty /\ (p X3 /\ TransSet Empty))) /\ ((~ nat_p X4) -> (~ p Empty)))) -> (exists X4:set, ((X4 c= binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty) /\ (~ atleast2 (f X2))))) -> (forall X4 c= Empty, (~ p X3))))) -> ordinal (Inj0 Empty).
admit.
Qed.

Theorem conj_Random2_TMUi6PEigN1f7kSQiHvZw7SoL8Qnt9Szn6o: forall X2 c= Sing (SNoLev (f (Union (f (Power (Power (Power (Power Empty)))))))), (forall X3 :e X2, forall X4:set, ((~ atleast3 (f (f (f (binrep (Power (Power (Power Empty))) Empty))))) -> (nat_p X3 /\ (~ (X3 = binrep (Power (Power (Power (Power Empty)))) (Power Empty))))) -> p (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty) -> ((((((((~ p X4) -> p X3) /\ atleast3 (f X2)) -> atleast2 X3) -> ((~ setsum_p X3) /\ ((~ p X3) -> p (proj1 X3)))) -> (~ atleast4 X3) -> atleast2 X3) -> ((((~ exactly4 X2) /\ (~ antisymmetric_i (fun X5:set => fun X6:set => (((((SNo X5 -> atleast2 X6) /\ (~ p (f X5))) -> ((~ p X5) /\ p (binrep (Power (Power (Power Empty))) (Power Empty)))) /\ (((((((~ exactly4 (Inj1 X6)) -> (~ p X4)) /\ ((~ p (Power (Power (Power (Power Empty))))) /\ p X4)) -> (~ p (nat_primrec X6 (fun X7:set => fun X8:set => X8) X6)) -> (~ p X6)) /\ (((~ ordinal X4) -> (exactly3 X6 -> (~ p X5)) -> (p X6 /\ ((((~ exactly2 X4) /\ ((~ p X5) -> p X6)) /\ p (setsum Empty X6)) /\ (~ nat_p X2)))) -> (p (binrep (Power (Power (Power Empty))) Empty) -> ((((~ p X3) /\ (p (Power (Power (Power (Power Empty)))) -> (p X4 /\ (~ atleast4 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty))))) /\ (p X6 -> atleast4 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))))) /\ ((((~ atleast2 X5) -> ((((~ p X6) -> exactly4 (Power (binrep (Power (Power Empty)) Empty))) /\ ((((((~ exactly4 X6) -> p X6) /\ (~ p X3)) -> SNo X4) -> atleast4 X6) -> (~ nat_p X6))) /\ ((~ exactly2 X2) -> set_of_pairs Empty -> ((p Empty /\ (~ atleast6 X5)) /\ ((~ p X6) /\ (~ set_of_pairs X6)))))) -> atleast3 X6) /\ (atleast3 X5 /\ ((~ setsum_p X6) -> (~ TransSet X6))))) -> atleast2 X3) -> p X6)) /\ ((p X3 /\ (((~ exactly3 X5) -> ((p (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty) -> ((~ p X5) /\ (~ p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty)))) /\ (~ p X6))) /\ ((((~ atleast4 X5) /\ ((atleast5 X5 /\ (((~ p X6) -> (~ nat_p X6) -> p (If_i ((p X5 /\ ((~ p X2) -> (((p X6 /\ (~ exactly3 (binrep (Power (Power (Power (Power Empty)))) (Power Empty)))) -> p X6) -> (~ SNo (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)) -> (~ atleast2 (f Empty))) -> (atleastp (f X6) X5 /\ (~ p X6)))) -> p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty))) Empty X5)) -> (~ p X6) -> p X2)) -> (atleast6 X5 /\ p (f (Pi X5 (fun X7:set => binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty)))))) /\ (~ (SNoLev X2 = X6))) -> p (Inj0 X5)))) /\ ((~ p X5) -> (~ p X5)))) -> (~ (X5 :e UPair Empty (Inj1 X5))))) /\ (p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty) /\ p Empty))))) /\ p X2) /\ (p (f X3) -> (~ p X3)))) /\ (~ p (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)))) -> ((exists X3:set, ((exists X4 :e f (f X2), (~ ordinal (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty))) /\ ((((forall X4:set, (p X3 /\ p (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty)) -> (~ exactly5 X4) -> (p (f (f (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty))) /\ (p X4 -> atleast4 Empty))) -> (exists X4:set, (atleast2 Empty /\ SNoLt (Power (binrep (Power (Power Empty)) Empty)) X4)) -> (~ p X2)) -> p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) -> (forall X4 c= f (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty), (~ reflexive_i (fun X5:set => fun X6:set => (~ p X2) -> (~ atleast6 X5))))) /\ (exists X4:set, ((~ equip Empty X3) /\ (~ exactly2 (f X4))))))) -> (exists X3:set, ((exists X4 :e X3, (nat_p Empty /\ ((~ exactly2 X4) /\ (((((p X4 -> p X4) -> (((p X4 -> (~ ordinal X4) -> p X3) /\ (((~ atleast5 X3) /\ ((((p X3 -> (((((~ exactly5 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty))) /\ (~ p (SNoLev X2))) -> ((~ p X4) /\ (p X4 -> (((~ p X2) /\ (~ p Empty)) /\ (~ atleast4 (Sing X4)))))) /\ p X3) /\ ((p Empty -> (~ ordinal X4)) -> (~ tuple_p X2 X3)))) /\ ((~ p X3) /\ p X3)) -> p (f X3)) /\ (~ TransSet (binrep (Power (Power (Power Empty))) Empty)))) -> p X4)) /\ (~ nat_p X2)) -> (~ (X2 c= X3))) /\ ((((~ SNo_ Empty (f (f X3))) /\ (X3 c= X3)) /\ (((~ TransSet Empty) -> p Empty) -> p Empty)) -> TransSet X2)) /\ (~ ordinal X3)) /\ (~ setsum_p X4))))) /\ (exists X4:set, ((X4 c= X2) /\ (ordinal X2 /\ p X4)))))) -> (forall X3:set, forall X4 c= X3, ((p X4 -> (~ p (binrep (Power (Power (Power (Power Empty)))) Empty))) /\ p (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty))).
admit.
Qed.

Theorem conj_Random2_TMPCiuyy6Tv8QvQxbcPbj2DcuYQjjRRhatc: exists X2:set, ((X2 c= f (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty)) /\ (((exists X3:set, (((exists X4 :e f (f (f Empty)), p X3) -> (~ p X3)) /\ ((~ p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty))) /\ (~ p (f X2))))) -> (~ exactly2 (ordsucc (f (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty))))) /\ (forall X3:set, (exists X4 :e binrep (Power (Power (Power (Power Empty)))) (Power Empty), ((p (f (binrep (Power (Power (Power (Power Empty)))) (Power Empty))) /\ (~ p X4)) /\ (atleast6 X4 -> nat_p (f Empty))) -> (~ p X4)) -> p X2))).
admit.
Qed.

Theorem conj_Random2_TMP7zpTxFP9DDvFw3a4Nh61KhRi99NyBCdH: exists X2:set, forall X3 :e f (f X2), ((exists X4 :e In_rec_i (fun X5:set => fun X6:set -> set => X3) (f X3), p X4) -> (forall X4 :e X3, (~ p X4))) -> (exists X4 :e binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty) X2, (((((((exactly2 X3 /\ (~ atleast4 (f X4))) -> exactly3 X4) -> ((~ p X2) /\ p (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty))) -> (exactly5 X2 /\ ((~ (X2 c= X4)) -> p X3))) /\ (((((~ p X4) /\ (ordinal (f X2) -> ((p X3 -> exactly3 Empty) /\ p X3))) -> (((((~ atleast2 X2) /\ exactly5 X3) -> (~ atleast4 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty))) /\ (~ (f (binrep (Power (Power (Power Empty))) Empty) :e ordsucc (binrep (Power (Power (Power (Power Empty)))) Empty)))) /\ p (f Empty))) /\ ((~ atleast3 (f X4)) -> setsum_p X4 -> (~ exactly2 X4))) -> nat_p X2)) /\ ((p X3 /\ (~ exactly4 X2)) -> p (binrep (Power (Power (Power (Power Empty)))) Empty))) /\ ((~ p X2) /\ exactly4 X3))).
admit.
Qed.

Theorem conj_Random2_TMaTZuCoTx1hfdPahzXbWdvfDKa4LcwuhHF: exists X2 :e f (f (f (Power (binrep (Power (Power Empty)) Empty)))), ((~ p X2) /\ (forall X3 :e X2, forall X4 c= X2, (p X3 -> ((~ p X3) /\ p X2) -> (exactly5 X4 -> (~ ordinal (f X4)) -> exactly3 (f X4)) -> (~ exactly5 X3) -> (~ set_of_pairs Empty)) -> exactly2 X2)).
admit.
Qed.

Theorem conj_Random2_TMZXRW7zibDFmC6NZuJKGwJxkcAGMAKd3ER: (exactly3 (f Empty) /\ (exists X2:set, forall X3:set, (exists X4:set, (((p X3 -> atleast3 X4 -> (~ p X4)) -> exactly5 X3 -> ((((p (f (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty)) -> p X3) -> p Empty) -> p X4) /\ ((p X2 /\ nat_p Empty) /\ (exactly2 (SNoElts_ (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))) -> (~ p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty))) -> p X3)))) /\ (ordinal Empty -> atleast4 X3))) -> ((TransSet (f (Inj0 Empty)) /\ exactly5 X2) /\ ((forall X4:set, ((~ ordinal Empty) /\ (((~ p (binrep (Power (Power (Power (Power Empty)))) Empty)) -> ((~ atleast5 X3) /\ ((p X3 /\ p X3) /\ (~ (X3 = X2))))) -> (~ (X3 = X4))))) -> (forall X4 :e f X2, p X4) -> atleast3 (Power (Power (Power (Power Empty)))) -> (forall X4 :e f X3, ((PNo_upc (fun X5:set => fun X6:set -> prop => (((X6 X3 /\ p (f Empty)) /\ atleast2 (binrep (Power (Power (Power Empty))) (Power Empty))) /\ ((p X5 /\ X6 X5) -> nat_p X4))) X3 (fun X5:set => p X3) -> (~ p X3) -> p X3 -> p (f X2) -> (~ p Empty)) /\ exactly3 (binrep (Power (Power (Power Empty))) (Power Empty)))))))).
admit.
Qed.

Theorem conj_Random2_TMFsvdcRLDCSVfJPfGxxAKDnme8ppV7NWB4: exists X2 :e f (Inj0 (f (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty))), forall X3 :e f X2, ((~ p X3) /\ (forall X4:set, p (UPair Empty X4) -> (X4 :e Empty) -> (~ exactly3 X2))).
admit.
Qed.

Theorem conj_Random2_TMW6eLRc5zbuwV3GcNosifHXyMRAtZqP9RT: exists X2:set, ((exists X3 :e binrep (Power (Power (Power (Power Empty)))) (Power Empty), exists X4:set, (((p Empty /\ (~ exactly2 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))))) /\ ((~ (X3 :e X4)) /\ (((((setsum_p X3 /\ ordinal (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)))) -> atleast6 (f (f X3))) -> (equip X3 (f X2) /\ (~ PNoEq_ X2 (fun X5:set => ((p (f X5) /\ ((((~ atleast2 X3) /\ ((((atleast5 X3 /\ p X4) -> (~ p X5)) /\ exactly2 X3) -> (~ exactly3 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty))))) /\ (((~ exactly4 X5) -> atleast2 X5) /\ ((~ ordinal (Inj0 X5)) /\ atleast3 Empty))) /\ (p X3 -> ((((~ tuple_p X5 (binrep (Power (Power (Power Empty))) (Power Empty))) -> (((~ atleast4 (V_ (f X5))) -> (~ nat_p Empty)) -> (~ exactly4 X4)) -> (~ p X3)) /\ p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty))) /\ (((((p X4 /\ p X3) /\ p (Sep X4 (fun X6:set => ((~ TransSet X5) /\ p X6)))) -> (((((((~ p (UPair X4 X4)) -> (~ p Empty)) /\ p X4) -> (~ SNo_ X4 Empty) -> (~ p X5) -> (~ p X3) -> (p X4 /\ ((((((~ exactly4 X5) -> p X4 -> (~ p X5)) -> (~ p X4)) /\ ((~ p Empty) /\ ((((((((atleast5 X4 /\ p X5) /\ (((~ exactly2 X5) /\ (((~ p (binrep (Power (Power (Power (Power Empty)))) Empty)) -> (((~ p X5) /\ (~ p X5)) /\ exactly5 X4)) /\ (exactly2 Empty /\ exactly5 X5))) /\ (((((((~ ordinal Empty) -> (((((p X4 -> ((exactly2 X4 /\ (p X5 /\ ((~ p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty)) -> (~ p (setsum (binrep (Power (Power (Power Empty))) Empty) X5))))) -> (~ p X4)) -> atleast4 (Union X4)) -> atleast5 X5) -> (~ p (f Empty))) -> set_of_pairs X5 -> atleast3 (f Empty)) /\ atleast6 X5)) /\ ((~ p X4) /\ (SNo (Power (binrep (Power (Power Empty)) Empty)) /\ (((~ p X3) -> ((exactly4 (f (binrep (Power (Power (Power (Power Empty)))) Empty)) -> ((p X4 /\ ((~ ordinal Empty) -> ((~ p X4) /\ (~ p X5)) -> atleast4 (binrep (Power (Power (Power (Power Empty)))) (Power Empty)))) /\ (~ TransSet X3))) /\ p X3)) /\ ((~ p X5) /\ ((~ p (Power (binrep (Power (Power Empty)) Empty))) /\ (p X5 /\ p X5))))))) -> (~ atleast6 (binrep (Power (Power (Power Empty))) (Power Empty))) -> p X4) -> ((p X3 /\ TransSet X5) /\ ((~ nat_p X5) /\ (atleast4 X5 /\ (~ p X5))))) /\ p X2) /\ ((((p X5 -> (~ eqreln_i (fun X6:set => fun X7:set => p X6 -> p (setsum X7 X7))) -> (~ nat_p X4)) /\ p X4) -> (p X4 -> ((~ reflexive_i (fun X6:set => fun X7:set => (~ atleast2 X5))) /\ ((exactly4 X5 -> (~ p X3) -> atleast6 X3) /\ p X4))) -> (~ PNoLt_ (f (f X5)) (fun X6:set => ((TransSet X5 -> (~ p Empty)) /\ (SNo X6 /\ (~ ordinal X5)))) (fun X6:set => (~ exactly3 X4))) -> atleast6 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty))) -> p X5)))) -> ((p X4 -> p X4) /\ (((((~ p (f X5)) /\ (~ atleast2 (Power (Power (Power (Power Empty)))))) -> nat_p (f X5)) -> (~ p X3)) /\ ((((p X3 /\ (~ atleast5 X5)) -> (((~ p X5) /\ (~ exactly1of3 (p X4) (~ ordinal X4) (p (Sing (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty)) /\ (p (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty) /\ (~ ordinal (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty)))))) /\ (((~ strictpartialorder_i (fun X6:set => fun X7:set => p (Power (Power (Power (Power Empty)))))) -> p X3) /\ (((((~ nat_p X5) /\ ((p X4 /\ (strictpartialorder_i (fun X6:set => fun X7:set => p X7) -> ((((~ (X2 :e f (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty))) /\ (((~ exactly2 X5) /\ (((~ p X3) /\ (((((~ (X4 :e X4)) /\ (ordinal X5 -> (((~ exactly5 Empty) -> exactly3 X5) /\ atleast6 X5))) -> p X3 -> atleast4 X5) -> ((((~ p X3) -> (~ p Empty) -> (X3 c= f (Power X3))) /\ ((~ p (binrep (Power (Power (Power Empty))) Empty)) -> ((~ ordinal X5) /\ (nat_p X5 -> setsum_p X4)))) /\ (((((((~ p X3) -> exactly2 X5) /\ nat_p Empty) /\ (((~ ordinal (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty)) /\ (((~ p X5) /\ (~ TransSet X3)) /\ ((~ p Empty) -> ((((~ exactly2 X4) -> nat_p X4 -> (~ TransSet X4)) -> (~ exactly5 X3)) /\ ((~ p X5) -> (~ exactly2 (f (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty))))))))) /\ p X4)) /\ ((p X5 /\ (~ p X2)) /\ (p (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty) /\ (p (f (f X4)) -> ((~ p X5) -> (~ atleast4 X5)) -> ((~ TransSet X5) /\ (atleast5 Empty -> (((~ p X4) -> (~ p X4)) /\ ((((~ exactly4 X2) -> p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty))) /\ ((~ SNo (binrep (Power (Power (Power Empty))) Empty)) /\ ((((SNo X5 -> (p X4 /\ (~ p X4))) -> (~ reflexive_i (fun X6:set => fun X7:set => p X6))) -> (~ exactly3 X4)) -> ((((~ nat_p (Sep X4 (fun X6:set => ((~ p X6) /\ (exactly1of2 (exactly2 X2) (exactly3 X5 -> ((((~ atleast2 X5) /\ ((p X6 /\ p X5) -> p X5)) /\ (((p X6 -> (((~ exactly3 X6) -> (~ atleast2 X3) -> ((~ stricttotalorder_i (fun X7:set => fun X8:set => ((p X5 -> atleast2 X8) /\ (((((~ atleast5 (ap X8 X7)) -> atleast6 X7) /\ ((p X8 /\ ((~ p Empty) -> (~ SNo X7))) /\ atleast2 (Sing X7))) /\ (~ p X7)) -> p (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty))))) /\ ((~ atleast6 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty))) /\ p X5))) -> (~ atleast5 X6)) -> ordinal X5) -> p (f X2)) /\ ((((((p X5 /\ (~ exactly3 (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))))) -> atleast4 X4) /\ ((p (Inj0 (f (f X6))) /\ (((~ p X5) /\ ((((~ nat_p Empty) /\ (~ p X2)) -> (~ p X5)) /\ (~ TransSet X5))) /\ exactly2 X6)) -> (~ p (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty)))) -> p X5) /\ (((((~ ordinal X3) -> (~ p X6)) -> p X5) /\ ((~ p (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty)) -> ((atleast5 X4 -> ((p X6 -> (~ p X5)) /\ (~ set_of_pairs X5)) -> (~ exactly2 (Inj0 X6))) /\ (~ p X5)))) /\ (~ SNo X5))) /\ (~ exactly2 (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))))))) /\ (~ atleast6 X5))) /\ (~ p X5)))))) /\ ((p X4 -> PNoLt_ X5 (fun X6:set => (atleast2 X5 /\ (atleast6 X3 -> (~ p Empty)))) (fun X6:set => (X5 :e X6))) -> p X5)) /\ (SNo X5 /\ (~ set_of_pairs X4))) /\ ((~ exactly2 (f (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)))) -> exactly2 (Sing X2) -> (((~ p X2) -> exactly4 X4) -> ((~ setsum_p (setminus (f Empty) X4)) /\ ((~ p X4) -> (~ p Empty)))) -> (~ atleast4 (Sing (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty)))))))) /\ ((~ TransSet X2) -> (atleast4 X4 /\ (~ setsum_p X4))))))) -> (((~ atleast5 X4) /\ (~ p X4)) /\ ((~ equip (proj0 (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty)) (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty))) /\ (~ atleast3 X4))))))) /\ p X3) /\ (~ atleast4 Empty))) -> ((p X4 /\ exactly2 X5) /\ (p X5 -> atleast4 X3)) -> (~ atleast6 (f X4))) -> atleast5 (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty) -> p X2)) /\ (((((p X5 -> atleast3 X3) -> (~ trichotomous_or_i (fun X6:set => fun X7:set => (((~ exactly2 X6) /\ (~ p X7)) /\ ((((atleast4 X4 /\ (~ atleast6 (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty))) -> (~ p Empty) -> (~ p (f (f X7)))) -> (((~ exactly5 X6) /\ (~ TransSet X6)) /\ (~ p X7))) -> (~ p X7))))) -> (p X3 -> p (setminus X2 X4)) -> ((~ exactly5 X3) /\ p X4)) /\ (~ p X3)) -> ((p (binrep (Power (Power (Power Empty))) Empty) -> (~ p X4)) /\ atleast4 X5) -> ((~ exactly5 X4) /\ exactly4 X5)) /\ (nat_p X5 -> ((TransSet (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) /\ ((SNo Empty /\ p X3) /\ ((((~ TransSet (lam2 (f Empty) (fun X6:set => X6) (fun X6:set => fun X7:set => X6))) /\ (((((~ p (binrep (Power (Power (Power Empty))) Empty)) -> (~ p X4)) -> (~ p X4)) -> ((((((((~ atleast4 X4) /\ ((~ p Empty) /\ exactly2 X5)) -> exactly5 X5) /\ (((~ p X5) -> ((p X4 /\ (atleast3 (binrep (Power (Power (Power Empty))) (Power Empty)) /\ ((~ p X5) /\ ((((~ ordinal X2) /\ (((p X4 -> p X5 -> ((p (setsum X4 X3) /\ ((((((p (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty) /\ (~ atleast5 X5)) /\ (((p (f (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty)) -> ((((exactly5 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty) /\ ((~ p X4) /\ p X2)) -> (~ atleast2 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)))) -> exactly3 X4 -> p X4) -> (((p (Sing X5) -> ((((~ p X4) -> (~ p X5)) -> (~ p (f (Power (Power (Power (Power Empty))))))) /\ (((~ TransSet X5) /\ atleast2 X5) /\ (p X4 /\ p X4)))) -> (((((p X4 /\ (~ p Empty)) -> ((ordinal X5 /\ (((p X5 /\ (((~ TransSet (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty)) -> (~ p (f (Power (Power (Power (Power Empty))))))) /\ transitive_i (fun X6:set => fun X7:set => SNo (f (V_ X7))))) -> (TransSet (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) /\ (~ p Empty))) /\ p (f X5))) /\ p Empty)) -> (~ p X5)) /\ p X5) /\ ((~ p X4) /\ (ordinal X5 /\ ((~ exactly2 (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)) -> p (binrep X3 (binrep X5 X2)) -> (~ ordinal X4) -> (~ p X5)))))) /\ ((~ p X4) -> (~ exactly4 (f Empty))))) -> trichotomous_or_i (fun X6:set => fun X7:set => atleast2 X6)) /\ atleast3 X3) -> (~ exactly3 X4))) /\ ((~ exactly3 X5) /\ (((~ atleast3 X4) /\ (((~ p (f X3)) /\ p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty)) -> ((exactly4 X4 -> (~ reflexive_i (fun X6:set => fun X7:set => (~ p X6)))) /\ ((p X4 /\ (~ p X5)) /\ p (f X3))) -> (~ exactly5 X3))) /\ ((~ ordinal X2) /\ ((exactly3 (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) /\ ((~ totalorder_i (fun X6:set => fun X7:set => atleast4 (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty))) /\ ((p X4 -> (((~ p X4) -> atleast3 X4) -> (PNoLt (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty) (fun X6:set => ((~ exactly2 X3) /\ (~ exactly3 (Power (Power (Power (Power Empty)))))) -> (((((((((((((~ atleast5 X2) -> (~ p X3) -> (~ p X5)) -> (~ p X5)) /\ p X4) /\ (((((equip X6 (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty) /\ (exactly2 (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) /\ ((TransSet X6 /\ ((~ atleast4 X4) /\ (~ nat_p X2))) -> (p (combine_funcs X4 X2 (fun X7:set => binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (fun X7:set => X7) X6) /\ (exactly3 (Sing Empty) -> (~ p X5)))))) -> (~ exactly3 X5)) -> (~ exactly3 X5)) /\ (~ p X6)) -> ((~ setsum_p X5) /\ ordinal (binrep (Power (Power (Power (Power Empty)))) Empty)))) -> exactly5 X4 -> (~ atleast4 (f X5))) /\ (~ atleast4 (f X5))) -> (((p (Power (Power (Power (Power Empty)))) -> ((~ binop_on X6 (fun X7:set => fun X8:set => Empty)) /\ ((atleast2 X5 -> TransSet X6) -> p X2))) -> ((~ exactly5 X5) -> ((~ p X6) /\ (~ atleast3 X5))) -> ((p X6 /\ (ordinal X4 /\ (((p X3 /\ (~ PNo_upc (fun X7:set => fun X8:set -> prop => (~ atleast2 (Power (binrep (Power (Power Empty)) Empty)))) X2 (fun X7:set => atleast5 X5))) -> TransSet Empty) /\ (p X3 /\ exactly4 X5)))) /\ (p Empty -> (~ p Empty) -> atleast4 X5 -> p X6))) -> ((~ atleast3 X5) /\ ((~ p X4) -> p X4))) -> (((p X6 -> ((~ atleast4 X6) /\ (((set_of_pairs (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty) /\ p X5) -> (~ p X5)) /\ atleast4 (f Empty))) -> ((~ p (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)))) /\ nat_p X6)) /\ (p X3 /\ ((~ trichotomous_or_i (fun X7:set => fun X8:set => p (f Empty) -> (~ SNoLe X8 (f X8)))) -> atleast6 X5))) /\ (((((((~ p X5) -> p X6) -> ordinal X5 -> (~ atleastp X5 X5)) /\ (p X6 -> PNoLt X3 (fun X7:set => (((Empty :e X7) -> ((atleast6 X7 /\ atleast3 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty))) /\ (~ p X6))) -> (~ p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)))) -> p Empty) X6 (fun X7:set => (~ p X4)) -> (~ exactly5 X4))) -> trichotomous_or_i (fun X7:set => fun X8:set => p X7)) /\ (~ exactly2 (Sing (Inj0 X5)))) -> (~ atleast5 X4) -> p X6))) /\ p X5) /\ SNo_ (f Empty) (Power (binrep (Power (Power Empty)) Empty))) /\ ((((~ atleast6 X5) -> (~ p X6)) /\ ((((atleast5 X6 -> ((((((set_of_pairs X4 -> p X5) -> p X6) /\ atleast2 (f X5)) -> p (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)))) -> ((~ p X2) /\ p X5) -> atleast3 X6) /\ (~ TransSet X3))) -> (~ p (f X6))) -> (p X5 /\ ((X6 :e X5) /\ (((~ p X5) /\ exactly3 X6) -> ((~ p X6) /\ (p X6 /\ p (f (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)))))) -> (~ p X5))))) /\ ((p X6 /\ (~ exactly4 X6)) -> ((((~ atleast2 X5) -> p X6) -> (~ p (Sep2 (f X5) (fun X7:set => X7) (fun X7:set => fun X8:set => (exactly3 X7 /\ (p X7 /\ ((~ p X8) -> (~ exactly2 X6)))))))) /\ atleastp X5 X5)))) -> (exactly2 X6 /\ (((X6 :e X6) /\ (((~ p X4) -> (p X6 /\ atleast2 (f X6)) -> (~ setsum_p X3)) /\ (~ p X4))) -> (~ atleast5 X6))) -> ((((atleast2 (f (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty))) -> (~ p X6)) /\ p (binrep (Power (Power (Power Empty))) Empty)) -> (~ setsum_p X5)) -> p X6 -> p (f X5)) -> (~ (f X3 :e binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty))))) /\ (~ exactly2 X2)) /\ (ordinal (binunion X3 X2) /\ (~ exactly4 X6))) -> ((((~ p (V_ X6)) -> (((~ p X6) /\ ((((~ atleast6 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty)) -> (~ ordinal X5)) -> (~ atleast5 X6)) /\ exactly1of3 (nat_p X6) (atleast4 X5) (p X5))) /\ ((~ transitive_i (fun X7:set => fun X8:set => (p X7 /\ (((p (f X3) -> atleast6 Empty) -> (~ p (lam X8 (fun X9:set => X5)))) /\ p Empty)))) /\ exactly4 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty)))) /\ (~ p X5)) /\ exactly3 X5)) X5 (fun X6:set => p X6) /\ (~ set_of_pairs X4))) -> (~ exactly2 (binrep (Power (Power (Power (Power Empty)))) (Power Empty)))) /\ (~ atleast5 X4)))) /\ ordinal X4))))) /\ ((p Empty /\ p X5) -> p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty))) /\ p (f X5)) /\ p Empty)) /\ (((~ p X2) -> p (SNoElts_ (Inj0 X4))) -> ((~ p Empty) /\ (exactly5 Empty -> (((~ atleast3 X3) /\ atleast3 X4) /\ (~ p X4)))))) -> atleast5 (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)) -> (p X3 /\ ((~ atleast5 X3) -> atleast4 X3 -> ((~ SNo X5) /\ exactly4 X2)))) /\ ((p X5 -> (~ p Empty)) -> ((~ p X2) /\ ((p X4 -> nat_p X5) /\ (~ ordinal Empty)))))) /\ p X3) -> exactly4 X5)))) /\ exactly5 X5)) -> atleast4 Empty)) /\ (p X4 -> (p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) /\ (~ exactly2 X4)))) -> p X5 -> ((~ p X4) /\ p X5) -> ((((~ atleast5 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty)) /\ (((((atleast3 X4 -> SNo (binrep (Power (Power (Power (Power Empty)))) Empty) -> ((~ p X3) /\ p X3)) -> p X4) -> p X4) -> (~ p X4)) -> (~ p X5))) -> exactly5 X5) /\ ((~ p X3) -> (((p (proj1 (Inj1 X5)) -> ordinal X3) -> p (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty)) /\ (((~ atleast5 X3) /\ (((~ p X3) /\ (~ p X5)) /\ ((~ ordinal (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty)) /\ atleast2 X3))) /\ (((~ exactly5 X2) /\ (~ exactly5 (binrep (Power (Power (Power (Power Empty)))) Empty))) /\ ((((~ exactly3 Empty) -> exactly3 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))) /\ (p X3 -> atleast2 X3)) -> (~ atleast4 (proj0 Empty)))))))) -> p X4) /\ (((((~ atleast5 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty)) -> p X4) -> atleast4 X5) -> (~ p X5)) /\ ((~ p X4) /\ (((((((~ p (binrep (Power (Power (Power (Power Empty)))) (Power Empty))) /\ exactly3 (f X5)) -> (~ p X5)) /\ p X5) /\ ((((~ ordinal X5) /\ (~ atleast3 (setminus X3 Empty))) -> ((~ atleast6 X5) /\ (~ p X4))) /\ (~ p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty))))) /\ (~ atleast2 X4)) /\ (((~ p X3) /\ (~ p X4)) /\ (~ p X4)))))) -> (~ exactly4 X3)) -> p X4) -> (p X5 -> atleast4 (binrep X4 (Union (Union X5)))) -> (~ p X5))) -> nat_p Empty) /\ (atleast3 X5 /\ (((~ TransSet X4) -> (((~ exactly3 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty))) /\ (~ atleast3 X5)) /\ (~ atleast4 X5))) /\ ((~ atleast4 Empty) -> (TransSet Empty /\ (ordinal X4 -> ((~ atleast6 Empty) /\ ((X4 = binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) /\ (p X4 /\ (((~ p X2) /\ ((((((~ atleast4 (V_ X5)) /\ (~ p X4)) -> (f (f X5) :e X3)) /\ (p (ordsucc X2) -> p Empty)) /\ p X2) /\ nat_p X5)) -> TransSet X5)))))))))))) /\ (atleast2 (f X4) -> (((p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty) -> (~ ordinal X2) -> p X3 -> (~ exactly4 (f (f X5)))) -> p X3) /\ ((~ exactly4 X4) /\ (((~ p X5) -> atleast6 X5 -> p Empty) /\ (p X4 /\ (p X5 -> (~ reflexive_i (fun X6:set => fun X7:set => (~ p X6)))))))))) -> ((((~ p X4) -> p X3) -> (~ atleast4 X4)) -> p X2) -> (p X4 /\ ((((((~ SNoLe X4 (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty)) -> ((((((((~ exactly5 X4) /\ (p X5 /\ (~ p X5))) /\ atleast3 X4) /\ (p X3 /\ ((((setsum_p X4 -> p Empty) -> ((~ atleast3 X5) /\ (X3 :e X3)) -> (~ p X5)) /\ p (f (f (SNoElts_ Empty)))) /\ (((~ p X3) -> (~ atleast2 X5)) -> (exactly4 X4 -> (~ atleast3 X4) -> (exactly3 (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty) -> (~ p X5) -> p X5) -> (p X4 /\ ((((p (binrep (Power (Power (Power Empty))) Empty) /\ (~ p X5)) -> (~ atleast3 X3)) -> ordinal X3) -> p X5 -> ((p X4 -> (~ exactly5 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty))) -> (~ p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)))) -> atleast3 X5)) -> p X5) -> TransSet X5)))) /\ ((~ p Empty) -> (~ atleast3 X3) -> atleast5 X5 -> (~ p (SNoElts_ X2)))) -> p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty)) /\ (((~ p X5) -> ((((~ p X5) -> ((~ atleast3 X2) /\ (~ ordinal X5))) /\ (~ p X5)) /\ (~ (X4 c= X3)))) /\ (~ exactly5 (binrep (Power (Power (Power (Power Empty)))) (Power Empty))))) /\ ((atleast2 X3 /\ SNo X4) -> (atleast3 (binrep (Power (Power (Power Empty))) Empty) /\ ((~ atleast5 (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)))) -> p X5))))) /\ (exactly5 Empty -> ((~ eqreln_i (fun X6:set => fun X7:set => (~ p Empty))) -> (atleast2 (f X5) /\ (nat_p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty) -> exactly3 (Power (binrep (Power (Power Empty)) Empty))))) -> ((p X3 -> p X5) /\ (~ exactly2 X4)))) -> p X5) -> ordinal (Inj0 (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty)) -> ((~ atleast2 X3) /\ (nat_p Empty -> linear_i (fun X6:set => fun X7:set => (~ p Empty)))) -> ordinal (f X4) -> (~ p Empty)) /\ (((~ p X5) -> (((~ p (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty)) -> (~ p X2)) /\ ((p X4 /\ ((p X4 -> ((atleast5 X5 -> (~ p (setsum X5 Empty)) -> (atleast4 X5 -> (~ equip X3 Empty) -> p X4 -> (~ atleastp X2 X5)) -> ((p X5 -> (~ p X4)) -> exactly4 X3) -> p (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty)) /\ (~ exactly3 X4))) -> (((~ p X4) /\ (((~ p (Power (binrep (Power (Power Empty)) Empty))) -> ((~ p X3) -> p (Power (binrep (Power (Power Empty)) Empty))) -> (~ atleast2 X5)) -> ((p X4 -> ((~ p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))) -> (p (Inj0 X5) /\ ((~ p X5) -> (~ p (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)))) -> ((~ SNo X4) /\ (p Empty /\ (~ ordinal X5)))) -> reflexive_i (fun X6:set => fun X7:set => p (f X7))) /\ p X4))) /\ SNo Empty))) /\ (((~ p (binrep (Power (Power (Power Empty))) Empty)) /\ (~ p Empty)) /\ (((((p X5 -> (~ exactly2 X5)) /\ (~ p X5)) -> atleast4 X4) -> (atleast2 (binrep (Power (Power (Power (Power Empty)))) Empty) /\ ((atleast5 Empty -> (exactly2 X5 /\ (((exactly5 (f X4) /\ p (f X5)) -> (~ p (SNoElts_ X2))) /\ ((~ exactly2 X4) /\ exactly4 X5))) -> (~ p X4)) /\ SNoLe X5 Empty))) -> ((p X5 /\ p X4) /\ (~ reflexive_i (fun X6:set => fun X7:set => ((~ p Empty) /\ ((((~ p (f Empty)) -> exactly2 X7 -> (~ p X7)) -> (linear_i (fun X8:set => fun X9:set => (((p X4 /\ ((((~ p X9) /\ (~ atleast2 Empty)) /\ (~ atleast2 X9)) /\ (((~ atleast6 Empty) -> atleast3 X9) /\ ((((((p X3 -> (p X8 /\ (~ ordinal (f X9)))) -> ((transitive_i (fun X10:set => fun X11:set => p (f X10)) -> ((p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty) /\ (~ atleast6 (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty))) /\ (~ atleast3 X8))) /\ (p X4 -> (~ atleast3 X8)))) -> atleast6 (Pi X9 (fun X10:set => X9))) -> (~ atleast4 (Inj0 X8)) -> (((~ reflexive_i (fun X10:set => fun X11:set => ordinal X10)) /\ p Empty) /\ (~ exactly2 X8))) -> p X7 -> (((p X9 -> ((~ ordinal X2) -> (((atleast3 X5 -> (p X9 /\ ((~ exactly4 X8) -> p X8)) -> (((((~ p X8) -> p X8) /\ (~ p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))))) /\ ((~ nat_p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty))) /\ ((atleast3 X8 -> p X8) -> ((atleast5 X8 -> p X3) /\ (~ p X9))))) /\ SNoLt X8 X3)) -> exactly5 X9) /\ p X9)) -> (SNo X8 -> ((((((~ p X8) -> (((p X8 -> (~ atleast2 X8)) -> (exactly3 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) -> (((exactly3 X9 /\ setsum_p (Power (Power (Power (Power Empty))))) /\ (~ atleast6 X8)) /\ (~ atleast6 X3))) -> (~ p X8)) /\ (((((p X9 /\ ((set_of_pairs (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty) -> ((((~ p X5) -> TransSet (Pi X4 (fun X10:set => X5))) -> p Empty -> ((~ p (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty)) -> ((((atleast6 X9 /\ ((~ exactly4 X9) -> p X8)) -> ((~ strictpartialorder_i (fun X10:set => fun X11:set => atleast6 X11)) /\ (X9 :e X2))) -> atleast5 X8) /\ ((~ antisymmetric_i (fun X10:set => fun X11:set => p X11 -> exactly2 X10)) /\ (p X3 -> atleast4 X5)))) -> p X9 -> ((~ p X9) /\ p X6)) -> (~ atleast3 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))) -> (~ exactly4 (Inj1 X8))) -> ((((p X9 /\ exactly3 X8) /\ (X8 :e SetAdjoin X8 X8)) /\ (~ p X8)) -> (p (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty) /\ p X9)) -> p X9) -> (~ SNoLt X8 (f X9)))) /\ (((~ exactly4 X9) /\ (~ p X8)) /\ (~ set_of_pairs X2))) /\ (~ (Empty c= X9))) -> (((((p Empty -> (p X8 /\ (nat_p X8 /\ (~ p X8)))) -> equip X5 (binrep (Power (Power (Power Empty))) (Power Empty))) /\ (~ p X9)) -> p Empty) /\ (~ nat_p X9))) -> atleast3 (setsum X9 X9))) -> (~ SNo X9)) -> ((~ nat_p X2) /\ ((~ atleast2 X4) /\ atleast2 (Union X9)))) /\ (((((((~ p X9) /\ (((~ p X8) -> TransSet X5 -> ((p X9 /\ (ordinal X9 /\ atleast6 Empty)) /\ ((atleast4 X8 -> ((~ p Empty) -> ((p X9 -> ((((~ p Empty) /\ (~ atleast2 X8)) -> p X8) /\ (~ p (binrep (Power (Power (Power Empty))) (Power Empty))))) -> (set_of_pairs X8 /\ TransSet X4)) -> (~ atleast2 X3) -> ((p X8 /\ (~ p X8)) /\ p X8)) -> (~ ordinal X3)) -> (~ p X9)))) /\ (exactly4 X8 -> p X8))) /\ p X5) /\ (((~ p Empty) /\ (ordinal X3 /\ set_of_pairs X9)) /\ p X8)) -> (p X9 -> (~ p X7)) -> (((~ p Empty) -> (p X9 -> p Empty) -> (~ p X8)) -> ((~ atleast5 X4) /\ (~ p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty))))) -> p X9 -> ((((~ exactly3 X9) /\ tuple_p X9 X8) /\ ((~ p X9) /\ exactly5 (binrep (Power (Power (Power (Power Empty)))) Empty))) /\ atleast4 X4)) /\ ((((~ exactly2 (setprod X8 X2)) -> atleast3 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty))) -> (p X2 /\ ((~ p X9) -> p X9))) -> (~ atleast4 X9) -> setsum_p X8 -> (~ p X3))) -> (p X8 /\ (~ p X8)))) -> p X8) /\ p Empty)) -> ((~ trichotomous_or_i (fun X10:set => fun X11:set => (((((atleast6 (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) /\ (ordinal X11 -> (~ atleast2 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty)))) /\ (((((~ exactly5 (f X4)) /\ p X10) /\ (~ exactly4 X11)) /\ (((~ TransSet X10) -> ((((~ p X10) -> (~ set_of_pairs (f (f X11)))) -> atleast2 Empty -> (p X11 /\ (((~ atleast5 X11) -> (X10 :e X11)) /\ atleast2 (Union X2))) -> (((~ p X11) /\ (~ atleast2 X10)) /\ exactly5 X4)) /\ nat_p X11)) /\ ((~ p X11) -> (nat_p X10 /\ (~ reflexive_i (fun X12:set => fun X13:set => p X12)))))) /\ p X10)) /\ ((~ p X11) -> (setsum_p X11 /\ p X10) -> p X3)) /\ p X7) -> ((((((~ p X11) /\ (~ p Empty)) -> ((~ exactly2 (combine_funcs (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty) (fun X12:set => binrep (Power (Power (Power (Power Empty)))) Empty) (fun X12:set => X12) X6)) /\ (((~ exactly2 (V_ X11)) /\ (~ PNoLt_ (Power X11) (fun X12:set => (~ exactly5 X11)) (fun X12:set => symmetric_i (fun X13:set => fun X14:set => (~ atleast5 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))))))) /\ ((p X11 -> (((((~ inj X11 (f X11) (fun X12:set => X11)) -> (((atleast5 X10 /\ (atleast6 X11 /\ ((~ p X11) /\ p X10))) /\ p X2) /\ atleast6 (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty))) -> (((~ p X8) -> p X11) /\ (~ p X10))) -> ((p (Unj (f X11)) /\ exactly2 X10) /\ (((((~ p (f Empty)) /\ (~ p X10)) /\ (~ p X11)) /\ ((~ irreflexive_i (fun X12:set => fun X13:set => (~ p X2))) -> p X7)) -> (~ exactly5 X10)))) -> (~ p Empty)) -> p X10 -> (~ p X11)) -> ((~ p (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)) -> (~ p X10)) -> (~ p X11) -> (nat_p (f X8) /\ (~ atleast2 X11)))))) -> p X6) /\ ((~ p X10) /\ (~ p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))))) /\ (~ exactly3 X10))) -> p X11)) /\ (~ p X8)) -> ((atleast2 X4 -> ((~ p (f X8)) /\ ((~ exactly5 X9) /\ ((((~ nat_p (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty)) -> (~ atleast2 X9) -> (~ p X9)) /\ (((((((~ TransSet (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)))) /\ partialorder_i (fun X10:set => fun X11:set => (~ atleast2 X10))) -> (~ nat_p (Power (Power (Power (Power Empty)))))) /\ ordinal (f X6)) /\ p X8) /\ (p Empty -> p X8)) -> (~ atleast3 Empty))) -> (~ p X8))))) /\ (p X9 /\ nat_p X9))) -> (exactly5 X8 /\ p X7)) /\ (~ p (Union X8)))) -> (~ p (binunion X9 (f (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty)))) -> (((((((~ exactly2 Empty) -> ((~ atleast3 X8) /\ ordinal (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty))) -> ((~ p X8) /\ ((exactly5 X5 /\ ((((~ p X8) -> (~ PNo_downc (fun X10:set => fun X11:set -> prop => (((~ X11 Empty) /\ p X9) /\ ((atleast2 X9 -> (reflexive_i (fun X12:set => fun X13:set => (exactly4 X12 /\ SNo_ (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) X13) -> atleast3 (lam X12 (fun X14:set => binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty))) -> X11 X6 -> (~ ordinal X9)) -> reflexive_i (fun X12:set => fun X13:set => set_of_pairs X13 -> (X11 X13 /\ p X3))) -> ((~ p X9) /\ TransSet X6)))) X2 (fun X10:set => (~ p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))))))) -> (~ p X9)) /\ (~ atleastp X9 (binunion Empty X9)))) -> ((~ p X3) /\ ((~ exactly3 X3) /\ p (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty))))) -> nat_p X8) -> (~ exactly2 X8) -> ((~ SNoLe Empty X6) /\ (((~ p X8) -> ordinal X4) -> ((~ ordinal X3) /\ atleast2 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty))) -> TransSet X9))) /\ ((((~ p (Power X4)) /\ p X9) /\ (~ atleast4 X8)) /\ ((~ p (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty)) -> (((~ nat_p X9) -> (~ p X3)) /\ (((p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) -> ((p Empty -> ((((p (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) -> (~ p X9)) -> p X8) /\ (~ ordinal X8)) /\ (~ TransSet (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty)))) /\ ((~ atleast2 X8) /\ (atleast5 (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty) /\ ((exactly4 X3 -> nat_p X3 -> exactly4 X8) -> p X9))))) -> (~ setsum_p X8)) /\ (p (f X8) -> p (Power X3))))))) /\ ((p X3 /\ atleast2 X3) /\ (~ atleast5 X9))) /\ (p X9 /\ (p X9 /\ (~ exactly2 X9)))))))) -> (((~ (X9 c= binrep (Power (Power (Power (Power Empty)))) (Power Empty))) /\ ((p X8 -> (~ exactly3 X4)) /\ ((p X9 /\ ((((~ irreflexive_i (fun X10:set => fun X11:set => ((~ atleast3 X10) /\ (set_of_pairs X10 -> p (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty))))) /\ (((~ p (binrep (Power (Power (Power (Power Empty)))) (Power Empty))) /\ p X9) -> (~ p (Power (Power (Power (Power Empty))))))) -> atleast3 (UPair X9 Empty)) /\ (~ p X3))) /\ ((~ exactly5 (binrep (Power (Power (Power Empty))) (Power Empty))) -> (~ TransSet X8))))) /\ p (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))))) /\ (~ atleast3 X6))) -> (~ p X6)) -> exactly2 (f (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)))) -> (~ p X7))))))))))) /\ (((~ ordinal Empty) /\ ((((((~ p X5) -> (((~ p X4) -> (~ atleast2 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty))) /\ ((~ p X4) -> p X4))) -> (~ p X3)) /\ (~ atleast3 X5)) -> (~ atleast4 (f X4))) /\ (p X4 -> (~ p (binrep (Power (Power (Power Empty))) Empty))))) -> inj X4 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty) (fun X6:set => X6))))))))) -> ((exactly4 X5 /\ ((~ p X4) -> (~ atleast2 X4))) /\ p X4))) -> (~ p X5)) -> (~ nat_p X3)) -> (exactly3 (f X3) /\ (nat_p X5 -> (~ p X5))))) /\ ((~ p X5) /\ ((((~ p X3) -> (~ setsum_p X5) -> (~ p X4)) /\ (~ p X5)) /\ atleast3 X3)))) -> TransSet Empty) /\ (((~ exactly3 (Power (binrep (Power (Power Empty)) Empty))) /\ (~ atleast5 X4)) -> (((atleast4 X3 /\ exactly2 Empty) /\ (~ (X5 c= X3))) /\ (~ atleast4 X4)))) -> ((((~ exactly5 X3) -> nat_p X4 -> (((~ nat_p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty))) /\ p (f X5)) /\ (p X4 /\ atleast5 X3))) -> (~ p X4)) /\ ((~ exactly4 X4) -> ((~ nat_p X4) /\ (((~ p X2) /\ (p X4 /\ (atleast4 (Sing X5) /\ exactly4 (f Empty)))) /\ (p X3 /\ ((~ atleast5 (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)))) -> exactly3 X4 -> p X5 -> (atleast6 X5 /\ (((p X3 -> p X5) -> ((~ exactly4 X4) /\ (((~ exactly5 X5) -> atleast6 X5) -> p Empty))) /\ atleast3 X4)) -> p X5 -> ((~ atleast6 (Power (binrep (Power (Power Empty)) Empty))) /\ (~ p X4)))))) -> atleast5 (f X5))))))) /\ (p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) -> (((~ p X4) -> ((((~ p X3) /\ (((p X4 -> (~ SNo X2)) /\ (~ nat_p X3)) /\ (((~ nat_p X5) -> ((~ p (ordsucc X4)) /\ (p X5 /\ (((~ atleast5 X3) /\ (atleast2 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty) -> p (f X4))) -> p (Power (binrep (Power (Power Empty)) Empty)))))) /\ (((atleast6 X4 -> (atleast2 X4 -> exactly2 X3) -> (~ atleast4 X2)) -> ((~ p X3) /\ (p X4 /\ ((((~ p X5) /\ ((~ p X5) /\ ((~ p (binrep (Power (Power (Power (Power Empty)))) (Power Empty))) /\ (((~ p X5) /\ exactly5 (f X5)) /\ ((~ exactly3 X5) /\ (~ set_of_pairs X3)))))) /\ (~ exactly5 X5)) /\ p X4)))) -> exactly5 X5)))) /\ (p X5 /\ ((~ p X3) -> (((~ p X4) -> ((p X4 -> (~ p X5)) /\ p (f X5))) /\ (~ set_of_pairs X4)) -> (~ exactly4 X2)))) /\ p (binrep (Power (Power (Power (Power Empty)))) Empty))) /\ (~ p (Power (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty)))))) /\ (nat_p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty) /\ ((~ exactly4 X4) /\ (~ p X5))))))) -> ((((((((~ p X3) -> (p (binrep (Power (Power (Power (Power Empty)))) Empty) /\ (p X5 /\ (~ atleast6 X3)))) /\ ((((~ p X3) -> (~ atleast4 X3)) /\ ((exactly2 X5 /\ ((~ atleast6 X5) /\ atleast2 X3)) -> (~ p X5))) /\ (~ p Empty))) -> (((~ p (PSNo (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty) (fun X6:set => p Empty -> p (proj1 X3)))) -> (~ SNo X4) -> p X4) /\ TransSet X2)) /\ exactly4 X4) -> p X3) /\ (atleast3 (SetAdjoin X5 X4) -> atleast4 (Inj0 X5))) /\ (~ p X4))) -> atleast4 X5 -> ((PNo_downc (fun X6:set => fun X7:set -> prop => atleast2 X4) (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty) (fun X6:set => (~ p X6)) -> p X3) /\ (((~ p X4) /\ (exactly3 X4 -> atleast2 (binintersect (f X5) (f X5)))) -> ((~ setsum_p X5) /\ (((~ p X3) -> (~ exactly5 X2)) /\ p X4))))) /\ TransSet X4) /\ (p X4 -> p X5)) -> (~ exactly2 X3)))) -> ((~ atleast5 X3) /\ (~ ordinal X5))) /\ (~ p (f (UPair (Inj1 (lam2 X5 (fun X6:set => X2) (fun X6:set => fun X7:set => X6))) (f (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty))))))))) -> ((~ p X2) /\ ((~ p (binrep (Power (Power (Power (Power Empty)))) (Power Empty))) /\ (atleast2 X5 /\ (atleast3 X4 -> (~ p (binrep X4 X3)) -> (((~ p X5) /\ p X3) /\ p X5) -> p X4 -> SNo_ Empty X4))))) -> (~ exactly5 X5)) /\ (~ p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))))) -> ordinal X4) /\ (~ p X5)) /\ (~ (X5 c= X5))))))) /\ ((~ p X5) /\ (((~ atleast3 X5) /\ ((~ p X4) -> (~ p X5))) /\ p X4)))) (fun X5:set => exactly4 X4))) -> p X3) -> (ordinal X4 /\ p (f X3))) -> atleast4 X4))) /\ (~ p X4))) /\ (forall X3 c= f X2, forall X4:set, ((exactly3 X3 /\ atleast3 X3) /\ atleast2 X4))).
admit.
Qed.

Theorem conj_Random2_TMUkppRFQ6cCaiVnxihtxJPzhwnTQBTWmAm: ((exists X2:set, forall X3:set, (exists X4 :e X3, p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty)) -> (exists X4:set, ((X4 :e X4) /\ (((((SNo Empty -> (~ p Empty)) /\ (p X3 /\ ((((~ exactly5 X3) /\ ((~ SNo (SNoLev Empty)) -> (~ p X3))) /\ ((~ p X3) /\ (p X4 /\ (~ p X2)))) /\ atleast2 X3))) /\ ((~ SNoLe X2 X3) /\ p X4)) -> atleast4 X3 -> p X2) /\ (~ atleast3 (Power (Power (Power (Power Empty))))))))) /\ atleast5 Empty).
admit.
Qed.

Theorem conj_Random2_TMRJNAUZ5wC5TJL1JKjYgkJ62MFR75X4Wb2: exists X2:set, exists X3 :e X2, exists X4:set, ((X4 c= Empty) /\ ((((X2 :e Empty) /\ p X2) /\ (((X4 c= X4) /\ (((~ p X4) -> (((((~ p X4) /\ (((~ setsum_p (f X4)) /\ (~ TransSet X2)) -> (p Empty /\ (~ p X2)))) /\ (p X3 /\ (~ p X4))) -> (~ ordinal (binrep (Power (Power (Power (Power Empty)))) Empty))) /\ (((((~ p X3) -> exactly3 Empty) /\ ((~ atleast5 (binrep (Power (Power (Power Empty))) Empty)) -> ((~ exactly4 X4) /\ (((((((~ p X3) -> p X3 -> (~ p X3)) /\ atleast5 X4) -> atleast6 X3) -> ((~ p X4) /\ (((~ atleast2 X4) -> (~ p (f X3))) /\ (((~ p X3) -> (~ p X3)) -> (equip X4 X3 /\ (~ atleast2 X3))))) -> ordinal Empty) /\ p (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)))) -> atleast6 X4)))) /\ (~ p X3)) -> (~ p X4) -> exactly3 X3))) /\ (((p X4 /\ (~ p X3)) -> ((((~ exactly3 X4) /\ (((~ atleast6 (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty)) /\ (~ p Empty)) /\ (((set_of_pairs (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty) -> ((nat_p X4 /\ (~ atleast3 X3)) /\ p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)))) /\ p Empty) -> (~ exactly2 (f X4))))) -> (~ atleast6 X4)) /\ atleast6 X4)) /\ ((p (ap (f X3) X2) -> (~ p X3)) /\ (~ p X3))))) -> (SNoLe (mul_nat (proj1 (f Empty)) X4) (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) /\ ((((atleast3 X2 /\ ((~ p X4) /\ (~ exactly5 (f (Unj X4))))) -> SNo (f (Power (Power (Power (Power Empty)))))) -> (~ exactly1of2 (atleast6 X3) (p X2))) -> p X3)))) -> (~ atleast5 (Power (Power (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)))))))).
admit.
Qed.

Theorem conj_Random2_TMXoJmiPzjGF4njUQxjsH7SSqjJai2Z32GB: (exists X2 :e binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty, exists X3 :e X2, ((~ p X3) /\ (exists X4:set, ((X4 c= X3) /\ (~ atleast6 X4))))) -> (exists X2:set, exists X3:set, ((forall X4 :e binrep (Power (binrep (Power (Power Empty)) Empty)) Empty, p (f X3)) /\ atleast2 (f X2))).
admit.
Qed.

Theorem conj_Random2_TMWWKK7zrXM6hSThggbKcs4PmUgkR4ESP4B: exists X2 :e SNoLev (f (Power (Power (Power (Power Empty))))), forall X3 c= f X2, (exists X4:set, ((X4 c= f X2) /\ p X4)) -> (exists X4:set, ((((p X3 /\ ((atleast6 Empty /\ (~ atleast3 (Inj1 X4))) -> (~ p X2))) -> (((((~ exactly2 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))) /\ (~ atleast4 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty))) -> p (f X3)) -> (~ p (f X4))) /\ (exactly2 X4 /\ atleast4 (binrep (Power (Power (Power (Power Empty)))) Empty)))) -> (((p X4 -> (p X3 /\ exactly5 Empty)) /\ (~ p (f X3))) /\ p X4)) /\ (((~ p X2) -> ((((((~ atleast4 (binrep (Power (Power (Power (Power Empty)))) (Power Empty))) -> (~ atleast4 (V_ (f X2)))) -> (~ set_of_pairs X3)) /\ (~ SNoLt (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty) (f X2))) -> (~ p X3) -> ordinal Empty) /\ equip Empty X4)) /\ ((~ atleastp X4 X3) -> atleast5 (V_ Empty) -> ((~ exactly2 X3) /\ (SNo_ X3 X2 /\ p X4)) -> ((~ (X4 :e binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))) /\ ((p X4 -> p (Power (Power (Power (Power Empty))))) -> (~ atleast4 (binintersect (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty) X4)) -> (~ set_of_pairs X3) -> ((~ p X3) -> p (f X3)) -> (~ ordinal X4)))))) -> atleast5 X4).
admit.
Qed.

Theorem conj_Random2_TMazG4S3XuSHu7Zh7w4RxYgqicL1pGaBiRr: forall X2:set, (exists X3:set, ((exists X4:set, ((X4 c= Empty) /\ (p (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) -> ((~ atleast6 (f X3)) /\ (~ p X3))))) /\ (forall X4:set, p X4 -> (((atleast5 X3 -> (((((~ exactly2 X4) -> ((((~ atleast3 X3) /\ (((~ p X3) /\ (~ (X2 :e X3))) -> (p (f Empty) /\ exactly4 X4))) /\ ((~ p X2) -> (((~ atleast3 X4) /\ (~ p (binrep (Power (Power (Power (Power Empty)))) Empty))) /\ (ordinal X2 /\ exactly2 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty))))) /\ (((((exactly4 X3 -> (~ atleast2 (Power (Power (Power (Power Empty)))))) /\ (atleast6 Empty -> ((ordinal (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) /\ (exactly3 (f (SetAdjoin X4 X4)) /\ SNo (f (Power (binrep (Power (Power Empty)) Empty))))) /\ (((~ p X3) -> (~ atleast3 X3)) -> (~ SNoEq_ X4 (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty) X2) -> TransSet X4)))) /\ exactly3 (f X2)) /\ (~ p X2)) -> (exactly3 (setprod X4 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty))) -> (exactly5 (f (ordsucc X3)) /\ (~ setsum_p X2))) -> exactly4 X3 -> (~ reflexive_i (fun X5:set => fun X6:set => set_of_pairs (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty)))))) -> (~ exactly2 X4)) /\ atleast5 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty)) -> p (Unj X4)) -> ((exactly5 X3 /\ ((~ ordinal X3) /\ nat_p X4)) /\ ((atleast4 X2 /\ atleast2 X3) -> (((((p X4 /\ ((((((p (f X4) /\ (~ set_of_pairs X3)) -> (p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) /\ (p Empty /\ (~ atleast4 X3)))) -> (~ p (f X3)) -> (((~ p (f X3)) /\ setsum_p X3) /\ (((~ exactly4 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty)) -> p X3) -> exactly2 (binrep (Power (Power (Power (Power Empty)))) Empty)))) -> (exactly5 (Union (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty)) /\ ((~ atleast6 (f X2)) -> ((~ p Empty) /\ ordinal X4))) -> ((((~ nat_p Empty) /\ atleast4 X2) /\ (~ p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)))) /\ ((~ p Empty) -> (p (Power (Power (Power (Power Empty)))) /\ TransSet X4)))) /\ SNo X3) /\ p X4)) /\ ((~ p (setprod (f X3) X2)) -> (((exactly3 X4 -> ((~ p X2) -> atleast3 X3 -> inj X4 X3 (fun X5:set => Empty) -> (~ p X4)) -> (p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty) /\ (~ exactly3 (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty)))) -> (~ p Empty) -> nat_p X4) /\ nat_p (proj1 X2)))) -> (((atleast5 (f X3) -> (~ set_of_pairs X4)) /\ (exactly4 (f (f X4)) -> (~ TransSet (f (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty))) -> atleast6 (binunion X4 X3))) /\ (p (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty) /\ ((((p X4 /\ p X4) -> ((exactly5 X4 /\ (~ TransSet (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)))) /\ (((p X3 /\ (p X4 -> p (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty))) -> p (binrep (Power (Power (Power Empty))) Empty)) /\ atleast4 (Power (Power (Power (Power Empty))))))) -> (~ p X2)) -> (~ (X2 :e X4)))))) -> (~ exactly4 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty)) -> ((~ atleast6 (Power (Power (Power (Power Empty))))) /\ (((~ SNoLt (Power (binrep (Power (Power Empty)) Empty)) X3) /\ (p (f (binrep (Power (Power (Power Empty))) (Power Empty))) /\ (~ exactly1of3 (exactly2 X2) (atleast3 X3) ((~ p X3) /\ (exactly2 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty) /\ (((((((setsum_p X3 /\ ((~ p X2) -> (((~ exactly5 X3) /\ (~ p X4)) -> (~ p X4)) -> (~ p Empty) -> nat_p X3)) -> ((((~ atleast4 (f (f (f X2)))) /\ (((~ atleast2 X2) -> (((p X4 /\ (~ atleast2 X3)) /\ exactly5 X3) /\ ((((~ p X4) /\ ((((p (f Empty) -> (~ atleast2 X4)) -> ((((~ p X2) /\ ((atleast3 (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))) /\ ((p X3 -> ((exactly2 X4 /\ TransSet Empty) /\ (~ atleast3 X3))) -> (~ set_of_pairs Empty) -> (~ p X4))) /\ (p X3 /\ (~ atleast5 Empty)))) -> (((p X3 -> (tuple_p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty) X4 /\ ((~ p X4) /\ ((~ nat_p (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty)) /\ (~ atleast3 (binrep (Power (Power (Power Empty))) Empty)))))) -> p (f (f X3)) -> (((~ p (Power (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))))) -> p X2) /\ ((p X3 /\ ((p Empty -> ((~ p (SNoLev X3)) /\ (((~ p X3) -> p (binrep (Power (Power (Power Empty))) (Power Empty))) /\ ((~ atleast6 X3) -> (~ bij X3 X2 (fun X5:set => X4)) -> (~ p X2)))) -> p X3) /\ (~ p (f X4)))) -> p X3))) /\ ((~ exactly2 X3) /\ (X4 c= X3)))) /\ ((~ SNo X4) /\ atleast6 (binrep (Power (Power (Power (Power Empty)))) Empty)))) /\ (((nat_p X4 /\ (atleast2 X3 /\ (~ p X3))) -> ((p (SetAdjoin (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))) X3) /\ p Empty) /\ (~ p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)))) -> (((((~ p X3) /\ ((((p Empty -> ((~ exactly2 X2) /\ (~ p (f (f X4))))) -> (X2 :e Empty) -> (p X2 /\ (~ atleast2 X4))) -> (~ p (f X2))) /\ (p X4 -> (~ p X4)))) /\ ((~ atleast4 (f X2)) -> p X3 -> (~ p X3))) /\ p (binrep (Power (Power (Power Empty))) (Power Empty))) -> ((((~ p X2) -> atleast2 (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty)) -> (~ p (Power (binrep (Power (Power Empty)) Empty))) -> (~ p X4)) /\ (((X4 = X3) /\ p (f X4)) /\ ((((~ p (f X3)) /\ (((~ p (binrep (Power (Power (Power Empty))) (Power Empty))) /\ ((p X4 -> p X2) /\ ((exactly5 X4 /\ ((~ p X3) /\ (((TransSet X4 -> (~ exactly5 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)))) /\ (~ exactly4 X2)) -> (~ p X3)))) -> TransSet X3))) /\ ((~ set_of_pairs X3) -> ((~ trichotomous_or_i (fun X5:set => fun X6:set => (~ (X6 :e X5)))) /\ (((((((~ p X4) -> atleast2 Empty) /\ ((atleast3 (famunion X4 (fun X5:set => X5)) /\ (~ p X3)) /\ (~ p X4))) -> ((~ p X4) /\ ((~ atleast5 X4) -> ((TransSet X4 -> (~ (X2 :e binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)))) -> p (Power (binrep (Power (Power Empty)) Empty))) /\ (p X3 /\ (p X2 -> (p X3 /\ (ordinal Empty -> ((((p (f X4) /\ (((((~ p X4) -> p X2 -> p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty)) /\ (~ p (f (binrep (Power (Power (Power Empty))) (Power Empty))))) -> (~ p X3)) -> (p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) /\ (atleast5 (f X4) -> (((~ p X4) -> p X4 -> (~ p X3)) /\ (~ p X3)) -> p X4 -> (~ p (f X3)))))) -> ((((((atleast3 X4 -> (reflexive_i (fun X5:set => fun X6:set => (((~ atleast4 X4) /\ (~ TransSet (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty))) /\ TransSet X6)) /\ (((~ p X3) /\ (~ exactly3 (f (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty)))) /\ ((p X3 /\ p (f X3)) -> (~ TransSet X2)))) -> atleastp X2 (Inj1 X2)) /\ (~ p (Repl (f X3) (fun X5:set => X5)))) -> (~ p X3)) -> (~ p X2)) /\ (X4 :e X2)) /\ reflexive_i (fun X5:set => fun X6:set => (~ set_of_pairs X6)))) /\ (~ set_of_pairs (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)))) /\ p X4))))))))) -> ((((((((~ p (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)))) -> (~ atleast6 X4)) -> (~ p X2)) /\ p X3) /\ ((p (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty) -> setsum_p Empty) -> atleast4 X3)) -> p (setprod X4 X4)) -> ((~ p X3) /\ (exactly2 X3 /\ p X4))) /\ (~ p X4))) -> exactly3 X3) -> (~ (binrep (Power (Power (Power (Power Empty)))) Empty :e X4))))))) /\ (~ TransSet (f X3))) -> (~ ordinal X4))))) -> (~ atleast4 X2)) /\ (p (UPair X3 X3) /\ p X4))) -> (((p X3 /\ ((((~ nat_p X2) /\ setsum_p X4) -> (~ p Empty)) /\ (((~ SNo X3) -> (((~ trichotomous_or_i (fun X5:set => fun X6:set => (atleast5 (f X5) /\ p X6))) /\ p X4) /\ (p Empty -> (exactly4 X3 /\ p X3)))) -> (~ p X3)))) /\ (((~ exactly5 (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty)) /\ (~ p X3)) -> p (f Empty))) /\ p X3))) -> exactly5 X4) -> ((~ atleast5 X2) /\ ((~ p X4) -> (~ exactly2 X4) -> p X4))))) /\ (((~ nat_p X3) -> (~ atleast2 X4)) -> (((p X3 /\ nat_p X2) /\ (setsum_p (Sing Empty) /\ p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)))) /\ ((((((~ p X3) /\ (((~ p X3) /\ ((((~ p (binrep (Power (Power (Power Empty))) Empty)) /\ p X4) -> (TransSet X2 /\ (~ p X3))) -> (binrep (Power (Power (Power Empty))) Empty c= X3))) /\ p X3)) -> (~ reflexive_i (fun X5:set => fun X6:set => reflexive_i (fun X7:set => fun X8:set => (~ atleast4 X8)))) -> (~ exactly2 X2)) /\ ((~ p X3) -> (~ exactly4 X2))) -> (~ atleast4 X3)) /\ (~ exactly2 Empty)))))) /\ ((exactly3 X4 /\ p X4) -> ((~ nat_p X4) /\ p (Union X3)))) /\ (~ p X4))) -> p (Sing X4)) -> (~ setsum_p X3) -> (~ atleast5 X4) -> p X4) -> p Empty) -> p (f (Power (Power (Power (Power Empty)))))) -> exactly5 X4)))))) /\ ((((atleast3 (f X3) -> ((~ p X4) /\ ((exactly3 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) /\ exactly4 X2) /\ p (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty)))) -> p X4) -> p X3) /\ (~ exactly4 (binrep (Power (Power (Power (Power Empty)))) Empty)))))) /\ p Empty)))) /\ atleast6 Empty) -> p X4) -> ((exactly4 (f X3) /\ (((~ p X4) /\ (~ atleast3 X3)) /\ ((~ p X3) /\ atleast2 X3))) /\ (~ p X2))))) -> p (f X2).
admit.
Qed.

Theorem conj_Random2_TMFw2TWsgL3wWiHbTgkXPvNMXdLuXN3oRkd: (((~ p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty)) /\ (exists X2:set, (((exists X3 :e binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty), (~ p X3)) -> exactly2 X2) /\ ((exists X3:set, (~ exactly4 X2)) -> (forall X3 c= binrep (Power (Power (Power (Power Empty)))) Empty, ((exists X4 :e X2, (~ atleast6 X4)) /\ (forall X4 c= X2, (exactly2 X4 -> p X2 -> (~ SNo X4)) -> ((p X3 -> (~ p X2)) /\ ((p X3 -> (~ atleast2 X3)) /\ ((~ p (f X3)) /\ ((((~ p X3) /\ (~ nat_p X4)) /\ (~ exactly3 (f X4))) /\ (((~ nat_p X3) -> ((((~ p X3) /\ atleast4 X4) /\ (~ (f X4 :e X4))) /\ (((((~ p (Inj1 X4)) -> (exactly4 X3 /\ p X4)) /\ (~ p (f (f X3)))) -> (~ exactly3 X3)) -> (~ exactly4 X3)))) /\ (~ atleast4 X2))))))))))))) /\ (~ p (Power Empty))) -> (atleast2 (f (f (f Empty))) /\ (exists X2:set, ((X2 c= Empty) /\ atleastp Empty (f X2)))).
admit.
Qed.

Theorem conj_Random2_TMP8FtNQSpGKF1HTQB99pfJrpcPR1HaHuKD: forall X2:set, ((atleast4 X2 /\ (exactly5 X2 -> (exists X3:set, (p (Power (Power (Power (Power Empty)))) /\ (~ p X3))))) -> (~ set_of_pairs (f X2))) -> (forall X3:set, (exists X4:set, ((X4 c= f X2) /\ (((TransSet X3 -> atleast6 X2) -> (((p X4 -> (~ atleast2 X4) -> (~ ordinal X2)) /\ atleast2 (Power (Power (Power (Power Empty))))) /\ p Empty)) /\ atleast2 (proj1 X3)))) -> (exists X4:set, ((X4 c= X3) /\ (exactly4 Empty /\ (((~ p (Inj1 X4)) /\ (~ p X4)) -> atleast3 (f X2) -> (~ p X3) -> (~ SNo X4)))))).
admit.
Qed.

Theorem conj_Random2_TMQupTx6RGY9Ye2pY6UcRxMST4HsbJbidAM: forall X2 :e binrep (Power (Power (Power (Power Empty)))) (Power Empty), exists X3:set, ((forall X4 c= X3, (~ atleast6 X2)) /\ (p (SNoElts_ X3) -> atleast5 (f X3) -> (forall X4 :e f X3, ((~ p X4) /\ ((((~ atleast4 X3) -> (atleast6 X2 -> atleast6 X3) -> atleast6 X3) /\ atleast5 X2) -> p X4))) -> (forall X4 c= Unj (binrep (Power (Power (Power Empty))) (Power Empty)), p X2))).
admit.
Qed.

Theorem conj_Random2_TMMpj3rbFHknh5ikFxBSz7mPyXjnNcUpokT: ((exists X2:set, ((forall X3 c= X2, ((~ p (f (f X3))) /\ (exists X4 :e Empty, (p Empty /\ (((~ nat_p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty)) -> p X4) -> exactly5 (f X4)))))) /\ exactly2 X2)) /\ (exists X2:set, forall X3 c= f (f (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))), exactly3 (f (Sing (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)))))).
admit.
Qed.

Theorem conj_Random2_TMRPLjR3GxrsnCpE66p425A4kMUh6K18sqD: ((atleast6 (f (lam2 (f (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty)) (fun X2:set => binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) (fun X2:set => fun X3:set => X3))) /\ (forall X2:set, ((exists X3:set, ((X3 c= f (f X2)) /\ (exists X4:set, ((~ p X2) /\ (p X2 /\ (~ TransSet (f X4))))))) -> (~ set_of_pairs X2)) -> ((forall X3:set, (exists X4 :e X2, (~ p X2)) -> (forall X4 c= X2, atleast2 (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty) -> p X2 -> (((~ p (binunion (Sing (f (f (ordsucc X4)))) X2)) -> SNo_ Empty X4 -> p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) -> ((((~ p X3) -> ((~ p X3) /\ atleast3 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty))) /\ (((~ atleast6 Empty) /\ ((~ exactly3 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty)) -> exactly4 X4)) -> (~ SNo X3))) /\ (exactly4 (proj1 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty))) /\ ((~ atleast3 Empty) -> p (binunion X4 X3)))) -> exactly4 X3) /\ (~ p X3)))) -> (exists X3:set, (forall X4 c= Empty, (~ p X3)) -> (exists X4:set, (ordinal X3 /\ exactly2 X4)))) -> (~ exactly4 X2))) /\ ((exists X2:set, ((((exists X3:set, ((exists X4:set, (atleast2 X4 /\ setsum_p X2)) /\ ((exists X4:set, ((~ (X4 = X3)) /\ (((~ p X4) -> (~ p (f Empty))) -> ordinal X3))) -> TransSet (binrep (Power (Power (Power Empty))) Empty)))) -> (forall X3:set, (forall X4:set, ((exactly5 X2 -> (~ atleast2 X4) -> ((~ inj (Power (binrep (Power (Power Empty)) Empty)) X4 (fun X5:set => X5)) /\ exactly4 X3)) /\ p X4) -> (~ nat_p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty))) -> (exists X4:set, ((X4 c= V_ X3) /\ equip Empty (f X3))))) -> (~ SNoLe X2 X2)) /\ ((exists X3:set, (((~ p (f Empty)) -> (forall X4:set, (((((atleast4 X4 /\ (p X4 -> (((exactly5 X3 -> (((atleast6 X3 /\ ((X4 c= Empty) -> ((((~ p (f X2)) /\ (((((~ tuple_p X3 (f X3)) /\ ((~ exactly3 X4) /\ (~ p X2))) -> atleast3 X3) -> (~ totalorder_i (fun X5:set => fun X6:set => ((~ TransSet X5) /\ (~ nat_p X6))))) -> (SNoLt X3 X4 /\ (setsum_p X4 -> p (f X3) -> ordinal Empty)))) /\ (~ p (Power (binrep (Power (Power Empty)) Empty)))) /\ p X2))) -> (p X3 /\ (((~ p X2) /\ ((~ atleast3 (binrep (Power (Power (Power Empty))) Empty)) -> SNoLt X3 (f X3))) /\ (((~ p X2) -> equip X4 X2) -> (~ atleast2 (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty)) -> (~ p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty))))) -> (~ set_of_pairs X2) -> p X2) /\ reflexive_i (fun X5:set => fun X6:set => (atleast2 (combine_funcs X5 X5 (fun X7:set => Inj0 X2) (fun X7:set => f (binrep (Power (Power (Power Empty))) Empty)) Empty) /\ p X6) -> p X3 -> ((~ ordinal X6) -> (p Empty /\ ((p (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty) -> (~ p Empty)) -> p X5))) -> p X5))) /\ p X4) /\ (((atleast6 (f (f (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty))) -> atleast4 X3 -> (p (Unj X2) -> (~ SNo X3)) -> (~ atleast5 X4)) /\ ((~ atleast4 Empty) /\ ((~ inj X2 X2 (fun X5:set => X2)) -> (~ ordinal X4)))) /\ p X3)))) -> exactly5 X4) -> (~ p (Pi X3 (fun X5:set => proj1 X3)))) -> exactly2 X2) /\ ((p X3 /\ (((~ p X4) -> (~ p X3) -> (~ p X2) -> ((~ nat_p Empty) /\ (~ atleast6 X4))) /\ p X4)) -> (~ p Empty))) -> p X4)) /\ (forall X4 c= X3, (p X3 /\ ((((atleast3 (f (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty)) -> p Empty) /\ (((((((((~ p X4) /\ atleast5 (f X3)) /\ (~ set_of_pairs X3)) -> p X4) -> (((~ exactly2 (f (f (binrep (Power (Power (Power Empty))) Empty)))) -> stricttotalorder_i (fun X5:set => fun X6:set => atleast2 (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty))) /\ (~ nat_p X3))) /\ ((~ exactly3 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))) /\ exactly2 X2)) /\ (((~ atleast2 X4) /\ (~ p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)))) -> p X3)) /\ p X2) -> ((~ p (binrep (Power (Power (Power (Power Empty)))) (Power Empty))) /\ nat_p X3))) -> (~ antisymmetric_i (fun X5:set => fun X6:set => exactly2 (binrep (Power (Power (Power Empty))) Empty) -> ((((~ p X5) /\ ((~ p X5) -> (((~ p Empty) /\ (~ p X6)) /\ atleast2 X4))) -> ((~ SNo_ (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty) X6) /\ ((ordinal (combine_funcs X5 X2 (fun X7:set => f X7) (fun X7:set => Repl X5 (fun X8:set => X8)) Empty) -> (~ p X4)) -> (((~ atleast5 (Inj0 (f X5))) /\ (p Empty -> ordinal X5)) -> atleast2 (V_ X6)) -> (((ordinal X5 /\ (exactly5 X6 -> (~ atleast3 X5))) -> (~ atleast5 X5) -> (p (f X5) /\ ((~ p X4) -> (X5 = X6) -> (~ p X6)))) /\ (((p X6 /\ atleast3 X5) /\ (~ atleast6 Empty)) /\ ((~ p X3) /\ ((~ p X6) -> ((((set_of_pairs (Power X5) /\ p X6) -> (~ exactly3 X5)) /\ p X2) /\ (~ atleast5 X6))))))))) /\ (~ p X5))))) /\ ((~ p (f X4)) /\ ordinal X2)))))) -> (forall X3:set, ((forall X4 :e f X2, p X3) /\ (exists X4:set, ((X4 c= f Empty) /\ (~ p (f X3))))) -> (exists X4 :e X3, TransSet X4))))) -> (forall X2:set, (forall X3:set, (((exists X4 :e X3, ((((~ atleast6 X3) -> ((~ SNoEq_ X2 (f X4) X3) /\ ((atleast4 X4 -> (TransSet X4 /\ atleast5 X3)) /\ (~ p X3)))) /\ (~ nat_p X3)) /\ (~ atleast2 (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)))) /\ (~ SNoLt (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty) X3)) /\ (~ p X2))) -> (exists X3:set, p (f (f X3)))))) -> ((exists X2:set, ((X2 c= binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty) /\ (exists X3:set, ((forall X4:set, ((~ p X4) /\ PNoLe X2 (fun X5:set => per_i (fun X6:set => fun X7:set => ((~ p X6) /\ exactly2 X6))) X4 (fun X5:set => exactly2 (f X2))) -> (~ p X3)) /\ (exists X4:set, (~ p X2)))))) /\ (exists X2 :e f (binrep (Power (Power (Power Empty))) (Power Empty)), atleast2 X2)).
admit.
Qed.

Theorem conj_Random2_TMcCzra1QHwqKMGwebeHT1fUHVKiw6Xa3Ym: forall X2:set, (exists X3:set, ((exists X4:set, (p X4 /\ (~ p X4))) /\ (exists X4:set, ((X4 c= Empty) /\ (exactly4 X2 -> (~ p X3)))))) -> (exists X3:set, ((X3 c= binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty) /\ (exists X4:set, (((atleast5 (binrep (Power (Power (Power Empty))) Empty) -> exactly2 X4) -> (p (f Empty) /\ (~ p (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty)))) /\ (((p Empty /\ ((((p X4 /\ ((((p X2 -> (nat_p X4 /\ ((~ exactly4 X3) -> (p (f X3) /\ (~ p X4)))) -> (p Empty /\ ((~ ordinal X4) -> (~ tuple_p X3 X4)))) -> ((~ exactly2 X4) /\ (~ p X3))) -> (~ (f X4 = X4))) -> p X4 -> atleast6 X4)) /\ ((p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) /\ (((~ exactly3 X2) /\ ((atleast6 (f (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty))) /\ ((~ p (Power Empty)) /\ (p X2 /\ ((~ p (f X2)) -> (((~ p X3) /\ (((p X4 /\ (((~ p Empty) -> ((p (f X2) -> ((p X3 -> (~ nat_p X2)) /\ ((~ p (f X3)) /\ (~ p X4)))) /\ (~ exactly3 (f (SetAdjoin (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty) X3))))) -> (~ p X3) -> ((p X4 /\ p X3) /\ atleast4 Empty))) /\ (~ p Empty)) /\ (~ atleast2 X4))) /\ (~ p X4)))))) /\ (~ ordinal X3))) -> p X3 -> p X4)) /\ (~ exactly4 X3))) /\ ((PNo_upc (fun X5:set => fun X6:set -> prop => (~ atleast5 X4)) (proj1 (f X2)) (fun X5:set => (~ TransSet X3)) -> ((~ p X3) /\ (~ p X4))) /\ (((((~ p (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty)) /\ p X3) -> atleast4 (setsum X3 (f X4))) -> (((((atleast6 (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty) /\ ((p X4 -> p (f X2)) -> p X4)) /\ p X2) -> (~ setsum_p X4)) -> (~ p (f (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty))))) /\ (~ nat_p X3))) -> ((~ p (f X2)) /\ (~ exactly4 X4))))) -> ((setsum_p (SetAdjoin X3 (Power (Power (Power (Power Empty))))) -> (((p Empty /\ (nat_p X4 /\ (~ ordinal (f X4)))) /\ (((~ p (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)))) -> p X3) -> (~ p X3))) -> ((((~ p X2) -> p X2 -> (~ atleast5 Empty)) -> p X4) -> p X2) -> exactly5 (SetAdjoin X4 (f X2))) -> (~ TransSet X2)) /\ nat_p X3))) -> (((p X3 -> ((atleast2 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) -> (exactly2 X2 -> (~ PNo_downc (fun X5:set => fun X6:set -> prop => (~ exactly4 X5) -> transitive_i (fun X7:set => fun X8:set => atleast4 X7)) X4 (fun X5:set => (((p X4 /\ ((p X4 /\ (((~ setsum_p X4) /\ (p X5 -> nat_p X4)) /\ (exactly5 X5 /\ (~ p X3)))) -> (~ exactly2 X5))) /\ ((p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty) -> p X5) -> (~ p X4))) -> (((~ p X3) /\ ((~ exactly1of3 (~ p X5) (exactly5 X5) (p (f X4))) -> ((~ atleast5 X4) /\ set_of_pairs X4))) /\ (~ p X5)) -> ((~ atleast4 X4) /\ (p X3 -> ((((((~ p X5) /\ (~ p X4)) -> TransSet X4) -> (equip (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty) X5 /\ (p X2 -> atleast3 (f (f X5))))) -> (~ p X5) -> (((~ p X2) /\ (~ p X5)) -> (p X4 /\ ((~ set_of_pairs (f (f (ReplSep (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))) (fun X6:set => ((p X6 /\ (~ p X3)) /\ (~ setsum_p X2))) (fun X6:set => X6))))) -> p X4))) -> ((~ (X4 :e X5)) /\ TransSet X4)) /\ ((((((((~ p Empty) -> SNo_ X3 X4 -> (~ p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))) -> atleast3 X5) /\ ((~ nat_p X2) -> (~ p X5))) -> (~ p (f (f X4)))) -> (((atleast6 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) -> (~ atleast3 X3)) /\ p X4) /\ p (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty))) /\ (p (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty) -> (~ p X5) -> (X4 :e X4))) -> (~ atleast4 X3)) /\ (~ p X2)))))) -> (~ symmetric_i (fun X6:set => fun X7:set => (~ atleast5 X3))) -> (~ p X3)))) -> (((p X4 -> ((((~ p Empty) /\ ((p X3 -> p X4) -> (~ p X3) -> (TransSet X2 /\ ((~ atleast3 X4) /\ ((~ p X3) -> ((~ p (ordsucc X3)) /\ ((~ p Empty) -> p Empty))))))) /\ (~ p X4)) /\ ((~ p (UPair X4 X3)) /\ ((p (ordsucc (f X4)) /\ ((~ atleast5 (proj1 X3)) /\ (~ tuple_p X2 X3))) /\ (~ exactly3 (SNoElts_ X3)))))) -> (nat_p (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty) /\ (((~ p (f X3)) /\ (~ p X3)) /\ (~ exactly2 X3)))) /\ p (Union (binrep (Power (Power (Power (Power Empty)))) (Power Empty))))) /\ atleast5 X3)) -> (~ p (proj1 X2)) -> (((~ p X3) /\ (((~ TransSet X3) /\ ((~ exactly4 X3) -> p X4)) /\ p (binrep (Power (Power (Power Empty))) (Power Empty)))) -> p X3) -> p (f X4)) /\ (p Empty /\ (((~ atleast2 X3) /\ (~ setsum_p X4)) -> (p (f (f X4)) -> (((p Empty -> ordinal X2) -> (~ reflexive_i (fun X5:set => fun X6:set => (exactly4 X3 -> (~ exactly5 X4)) -> (~ per_i (fun X7:set => fun X8:set => (~ p X8)))))) /\ (setsum_p X4 -> (p X4 /\ (SNo_ X3 (mul_nat X3 (f X3)) /\ (p X4 /\ (exactly2 X3 -> (~ exactly3 X3))))) -> (((reflexive_i (fun X5:set => fun X6:set => (~ (X3 :e binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))))) /\ (~ atleast6 X4)) -> p X3) /\ (exactly3 X2 -> (~ p X2))))) -> (~ p X4)) -> set_of_pairs X4)))) /\ (~ p X4)))))).
admit.
Qed.

Theorem conj_Random2_TMM2eFdNuZBpjxWQksBSjMGGUMQLzkmqxiV: p (f Empty) -> (exists X2:set, ((exists X3:set, (p (f Empty) /\ (exists X4:set, ((X4 c= f Empty) /\ atleast3 X2)))) /\ (exists X3:set, (exactly3 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty) /\ ((~ p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty)) -> ((~ SNo_ (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty) (f (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty))) /\ (exists X4:set, ((((~ p X2) -> (((~ p X4) -> (~ (X4 :e Pi (f X3) (fun X5:set => X5)))) /\ p (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))))) -> (~ p X3) -> ((~ nat_p X2) /\ ((~ nat_p X3) -> (((((p X3 /\ atleast2 X2) /\ p X2) -> (~ p X4) -> ((~ atleast6 X4) /\ (~ set_of_pairs X3))) /\ p X2) /\ p (binrep (Power (Power (Power Empty))) (Power Empty))))) -> (~ p X4)) /\ ((~ p X4) -> exactly2 X4))))))))).
admit.
Qed.

Theorem conj_Random2_TMTRAce3PEhhXncoknrBMo88WhDVq4tSy64: ((forall X2 c= binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty, ((~ p X2) /\ (forall X3 :e f (Power (Power (Power (Power Empty)))), exists X4:set, (atleast5 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) /\ p X4)))) /\ ((exists X2 :e f (f (f (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))))), forall X3 :e X2, (~ p (f (f (f X2))))) /\ (((((((forall X2:set, exists X3:set, ((forall X4 c= X3, (~ SNoLt X4 (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))))) /\ ((exists X4 :e Empty, p X4) /\ (~ SNo (Power (binrep (Power (Power Empty)) Empty)))))) -> (forall X2 :e binrep (Power (Power (Power (Power Empty)))) Empty, nat_p X2)) /\ (exists X2 :e binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty, (ordinal X2 /\ (forall X3:set, atleast6 (f X3))) -> (exists X3 :e f X2, (~ linear_i (fun X4:set => fun X5:set => ((~ p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty)) /\ (~ p X4)) -> ((~ p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty)) /\ (~ p (Sing X5)))))))) /\ SNo Empty) -> ((forall X2 c= binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)), ((forall X3:set, ((~ atleast5 X3) /\ (exists X4 :e f Empty, p X3))) /\ ((forall X3 c= binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty, forall X4:set, p Empty -> (~ (binrep (Power (Power (Power Empty))) Empty :e X2))) /\ (exists X3:set, exists X4 :e f X3, (((~ atleast3 X3) -> p X3) /\ (p (Union X3) -> (~ atleast4 X2))))))) /\ (~ p Empty))) -> (forall X2 c= Empty, exists X3 :e binrep (Power (Power (Power Empty))) Empty, (exists X4:set, (((SNo (Power (binrep (Power (Power Empty)) Empty)) /\ (~ p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))))) -> (((~ p X4) /\ ((TransSet X4 -> (~ p X3) -> ((~ p X3) /\ (~ ordinal X2))) -> (~ p X4))) /\ (~ p X3))) /\ ((~ p (setsum X3 X2)) -> ordinal X3 -> (~ atleast5 X4) -> (~ p X3)))) -> ((~ p (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty)) /\ (forall X4 :e X3, ((~ exactly5 X3) /\ ((p (f X4) -> (~ p (Power (Power (Power (Power Empty)))))) /\ p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty))))))) /\ (exists X2:set, exactly2 Empty)))).
admit.
Qed.

Theorem conj_Random2_TMVbV8Hgh2LghLArjUes4fhVm87oS2T6VzU: exists X2:set, ((X2 c= If_i (exists X3 :e f (f (f (setminus (f (f (f (f (f (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty)))))) Empty))), exists X4:set, ((forall X5:set, (((~ TransSet X4) -> ((p X5 -> (~ per_i (fun X6:set => fun X7:set => (p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty) /\ ((((~ atleast4 X7) /\ (~ exactly5 X6)) /\ ((((~ nat_p X7) /\ (~ exactly5 X7)) /\ (((~ exactly4 (binrep (Power (Power (Power (Power Empty)))) (Power Empty))) /\ (((~ p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty)) -> (~ p X5)) /\ (p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty) /\ ((~ p X3) -> (f X7 :e Empty))))) /\ ((~ p X7) -> (~ p X7) -> ((~ (X6 = X4)) /\ (p X7 -> (~ reflexive_i (fun X8:set => fun X9:set => p X3)) -> (atleast6 X6 /\ p Empty)))))) /\ p (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty))) /\ ((~ setsum_p X6) -> atleast4 X7 -> p X7))) -> p (f X6)))) /\ p X4)) /\ (((((~ p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))) /\ exactly4 Empty) -> ((~ nat_p (binrep (Power (Power (Power (Power Empty)))) (Power Empty))) /\ (~ exactly5 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty)))) /\ (((~ p X3) /\ ((~ atleast2 X4) -> nat_p Empty)) -> (p X3 /\ ((p X5 /\ (~ p X3)) /\ (((~ p Empty) /\ (~ atleast6 X4)) -> (~ exactly3 X4)))))) /\ p X4))) /\ (exists X5:set, ((X5 c= X3) /\ ((atleast5 X4 /\ ((~ p X5) -> ((((~ p X4) /\ (((~ p (f X4)) -> (~ p X3)) -> (~ p X4))) -> nat_p X5 -> (~ p X5)) /\ ((~ p X5) /\ p Empty)))) -> (atleast6 (f X5) /\ (TransSet (f X5) /\ p X4)) -> exactly2 X4))))) Empty (f (f (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty)))) /\ (exists X3:set, (~ (X2 :e X3)))).
admit.
Qed.

Theorem conj_Random2_TMFyc37pwXBEARHvAtAKsziUf9uA1cnz7DH: forall X2:set, antisymmetric_i (fun X3:set => fun X4:set => (~ p X3)) -> ((exists X3:set, SNo (f (f (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty)))) /\ ((((exists X3:set, ((X3 c= X2) /\ (~ p (Inj0 (f X3))))) -> p (f X2)) /\ p (f (Power (Power (Power (Power Empty)))))) -> (exists X3:set, ((forall X4:set, ((~ atleast5 X2) -> tuple_p (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) X4) -> ((~ TransSet X4) /\ p (f (f Empty))) -> ((~ p X3) /\ (((~ set_of_pairs (f X3)) -> (~ ordinal X3)) /\ (per_i (fun X5:set => fun X6:set => (((p (f X5) -> (~ p X6) -> ((((~ p X5) /\ ((((((((~ SNoEq_ X5 X6 Empty) /\ (ordinal X6 /\ atleast5 X5)) /\ (((p X4 /\ ((((p X6 -> (~ p X6) -> (p (Inj0 X6) /\ TransSet X5)) -> (((TransSet Empty /\ (~ (X5 :e X2))) -> p X6 -> p Empty -> (((p (f (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty)) -> (~ p X6)) -> partialorder_i (fun X7:set => fun X8:set => p X5)) -> (~ p (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty))) -> ((p (f X6) /\ (exactly3 X6 -> (~ p X5) -> exactly4 (f X6))) /\ atleast4 (binrep (Power (Power (Power Empty))) Empty)) -> TransSet X2) /\ SNo_ X6 (lam (V_ X5) (fun X7:set => X5)))) -> SNoLe X6 X6) /\ ((X3 :e nat_primrec Empty (fun X7:set => fun X8:set => f (Inj1 Empty)) Empty) -> (~ p X6)))) /\ atleast4 X5) /\ p (binrep (Power (Power (Power (Power Empty)))) (Power Empty)))) /\ (p X5 -> ((((~ atleast2 X6) /\ ((p X2 /\ (p (f (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty))) /\ (((((((~ p X2) /\ ((~ p X6) /\ p X6)) /\ (~ eqreln_i (fun X7:set => fun X8:set => (~ p X2) -> ((((~ p X8) /\ (~ TransSet (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty))) /\ atleast3 (f X7)) -> SNo (Power (Power (Power (Power Empty))))) -> (~ exactly4 (f X7))))) -> (p X5 -> p (Union Empty)) -> exactly2 (Union Empty)) -> ((~ atleast3 X5) /\ (~ p X6)) -> (~ TransSet X6) -> (((~ p X4) -> p (binrep (Power (Power (Power (Power Empty)))) (Power Empty))) /\ (setsum_p X5 /\ p X6))) -> p X2) -> (((~ PNoLt_ (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) (fun X7:set => (~ p X7)) (fun X7:set => p (ordsucc X7) -> (~ p X6))) -> (~ nat_p X6)) -> p X2) -> (~ p X5)))) -> exactly5 X6)) -> (binrep (Power (Power (Power Empty))) (Power Empty) :e SNoElts_ X5)) /\ atleast2 (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty)))) -> (~ p X6)) /\ p X6) /\ p (f X5)) /\ p X5)) -> ((~ atleast3 X6) /\ (~ atleast5 (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty)))) /\ ((atleast5 X5 /\ (p (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty) -> (~ exactly5 X6))) -> p (f X5) -> (exactly2 X6 /\ (~ exactly5 X6))))) /\ p (binrep (Power (Power (Power (Power Empty)))) Empty)) /\ ((~ p X6) /\ (~ nat_p X6)))) /\ (((~ exactly3 X2) -> atleast3 X4) -> equip (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty) X3))))) /\ (exists X4 :e binrep (Power (binrep (Power (Power Empty)) Empty)) Empty, (atleast5 X3 /\ (~ p X3))))))).
admit.
Qed.

Theorem conj_Random2_TMWVBapsKkQHQ2Wej7iMV3yy2SGFQZacojN: exists X2:set, ((exists X3:set, ((X3 c= X2) /\ set_of_pairs Empty)) /\ (exists X3:set, exists X4:set, ((((~ totalorder_i (fun X5:set => fun X6:set => (X5 :e binrep (Power (Power (Power (Power Empty)))) (Power Empty)))) /\ exactly3 X3) /\ (((~ exactly4 (f (Inj1 (Union X2)))) /\ ((~ atleast6 X2) /\ (~ trichotomous_or_i (fun X5:set => fun X6:set => ((~ (Empty c= X3)) /\ (~ atleast6 X6)) -> (~ p X6))))) /\ atleast4 X2)) /\ (p X2 /\ p X4)))).
admit.
Qed.

Theorem conj_Random2_TMHg2M5uBxQmPY4h8cquRa1nbAecqAqsWAd: forall X2:set, p (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty) -> (((forall X3:set, (~ p X2)) /\ (~ p X2)) /\ (nat_p X2 /\ ((~ p X2) /\ (exists X3:set, exists X4 :e Empty, (~ p (binrep (Power (Power (Power (Power Empty)))) (Power Empty))))))).
admit.
Qed.

Theorem conj_Random2_TMcoi55Wb3FoVb2e7NJLcLgAzkMTbjSMM1U: p (f (f (PSNo (f (f (f Empty))) (fun X2:set => (~ trichotomous_or_i (fun X3:set => fun X4:set => (((p X2 -> atleast4 X4) /\ (~ p (f Empty))) -> p X3) -> (~ p X3))))))).
admit.
Qed.

Theorem conj_Random2_TMXBUiNZaxVn6Edw4SDN9NdwbrWdiWh7GnV: (~ nat_p (f (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))))) -> (forall X2:set, (forall X3:set, forall X4:set, ((p X3 -> p (SNoLev X3)) -> (~ exactly5 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)))) -> (~ ordinal X2)) -> (~ p X2)).
admit.
Qed.

Theorem conj_Random2_TMTyyAoB8dFJ6TkHrN3tVqidspTbNxbnRsy: exists X2:set, (((exists X3:set, ((forall X4:set, p (f X3) -> (~ p X4)) /\ p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)))) /\ (exists X3:set, ((X3 c= f (f Empty)) /\ p X3))) /\ ((forall X3:set, ((exists X4 :e f X3, (~ p X4)) -> (forall X4 c= X2, nat_p X4)) -> exactly5 X2) /\ (forall X3 c= X2, (((forall X4 :e X3, ((~ p X2) /\ (~ p X2)) -> p X3) /\ p X3) -> (exists X4 :e X2, SNoLe X4 X4)) -> (~ p (binrep (Power (Power (Power (Power Empty)))) (Power Empty)))))).
admit.
Qed.

Theorem conj_Random2_TMbzpWP1ovCTofqRLe2Z5uiXKw5HLfpHcMb: exists X2 :e binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty), exists X3:set, ((exists X4:set, p X4) /\ (exists X4 :e X3, ((atleast5 X3 -> (atleast3 (SetAdjoin X2 X4) /\ p (Power (binrep (Power (Power Empty)) Empty)))) /\ (~ p X4)))).
admit.
Qed.

Theorem conj_Random2_TMKoX7hviQm6jhXDodxFtBSeh5gWux7ck2d: forall X2 :e f (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty), forall X3:set, (exists X4:set, ((SNo Empty -> ((atleast4 X3 -> (~ equip Empty X4)) /\ (((~ exactly3 X2) /\ ((~ atleast4 X3) /\ (X3 :e X4))) /\ (p (proj0 X3) -> p (f (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty)))))) /\ (~ nat_p (PSNo X3 (fun X5:set => exactly5 X2))))) -> (forall X4:set, atleast2 X2 -> p (Union (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty))).
admit.
Qed.

Theorem conj_Random2_TMYL378ndVXv5XEmkuj6HS4YqR2j7xUaqaa: exists X2:set, ((((forall X3:set, p X2 -> (exists X4:set, (((~ atleast5 X3) -> (~ exactly2 (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))))) /\ atleast3 (V_ (f (UPair X4 (binrep (Power (Power (Power (Power Empty)))) (Power Empty)))))))) /\ (((((forall X3:set, ((forall X4:set, ((((~ exactly3 (f (f (f (setsum (f X4) X2))))) -> (~ bij (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) X2 (fun X5:set => f X3))) -> (~ exactly4 X4)) /\ (((exactly4 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) -> p (f (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty))) -> (~ setsum_p (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty))) -> (p (f X3) /\ (((((~ p X4) -> (~ p X3)) -> (~ set_of_pairs X4)) -> SNo X4) /\ ((~ atleast6 (ordsucc X3)) -> (p X4 -> SNo X2) -> p X3)))))) /\ ((exists X4 :e f X2, p Empty) -> (~ p (f (f X3))))) -> (~ p (f X2))) -> (exists X3:set, ((forall X4 c= f X2, ordinal (binrep (Power (Power (Power Empty))) Empty)) /\ (~ TransSet X3)))) -> setsum_p X2) -> (~ atleast5 (binrep (Power (Power (Power Empty))) (Power Empty))) -> (~ p X2)) /\ (exists X3:set, ((X3 c= binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty) /\ (forall X4 c= X3, (X4 = X2)))))) /\ ((forall X3 :e Empty, (~ set_of_pairs (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)))) /\ ordinal X2)) /\ (forall X3:set, SNo (f (f X3)) -> (exists X4:set, (tuple_p X3 X4 /\ ((~ reflexive_i (fun X5:set => fun X6:set => (~ p (proj0 (binrep (Power (Power (Power (Power Empty)))) (Power Empty)))))) /\ ((~ p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty)) -> (~ p X3) -> nat_p (f X2))))))).
admit.
Qed.

Theorem conj_Random2_TMGSMNYdXJzgfu2mpw5SRARWmb2kwokmF8o: ((forall X2 c= f (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty), forall X3 :e f (f (f X2)), ((forall X4 :e binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty, equip (Sing X3) X4) /\ (((forall X4 :e f (Power (binrep (Power (Power Empty)) Empty)), (Empty = X3)) /\ ((exactly4 Empty -> (forall X4:set, (~ p (f (ordsucc X2))) -> p X4)) -> (exists X4 :e X2, TransSet Empty))) -> (exists X4:set, ((X4 c= f X2) /\ p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty))))))) /\ ((exists X2:set, ((X2 c= Sing (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)) /\ (exists X3:set, ((exists X4:set, (((binop_on X3 (fun X5:set => fun X6:set => X6) /\ (((p X3 /\ set_of_pairs (Power (Power (Power (Power Empty))))) -> ((~ p (f (setminus (f X4) X2))) /\ ((~ exactly2 X3) /\ (~ p X2)))) -> ((atleast4 X4 /\ atleast2 (f Empty)) /\ (exactly5 X4 /\ (p X3 /\ (((atleast2 Empty /\ (p X2 -> (~ exactly5 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty))))) -> (((p X4 -> (exactly4 (f X4) /\ exactly3 (f X3))) /\ p X4) /\ p X4)) -> (~ atleast4 X3))))))) -> ((ordinal X3 /\ (p X3 -> (p (f X4) /\ ((~ bij X4 X3 (fun X5:set => X4)) /\ exactly2 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)))) -> (~ nat_p (V_ X4)))) /\ (((((((~ (Empty = f (binrep (Power (Power (Power (Power Empty)))) Empty))) -> exactly3 (f (ordsucc (f X3))) -> (~ p (f X3))) /\ (~ exactly3 X2)) -> (binrep (Power (Power (Power (Power Empty)))) (Power Empty) = X4)) -> (~ exactly4 X2)) /\ (~ equip X2 Empty)) -> ((~ atleast2 (f X3)) -> atleast2 X3) -> ((p (f X4) -> (~ p X2)) -> (~ PNoLt X2 (fun X5:set => ((~ p X5) /\ p X5)) X3 (fun X5:set => (~ exactly3 X5)))) -> ordinal X4 -> (~ atleast2 X4)))) /\ (~ p Empty))) /\ (~ p X2))))) /\ (exists X2 :e binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty), (forall X3 c= binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty), ((forall X4 c= X3, ((p Empty /\ (((((p X2 /\ (~ p X4)) /\ (p X4 -> ((((~ p X3) /\ (p (add_nat X4 X4) -> (~ exactly5 X4) -> (~ p Empty))) -> exactly4 X3) /\ p X3))) /\ ((~ p (f X3)) /\ atleast2 (PSNo Empty (fun X5:set => (exactly5 X3 /\ p X3))))) -> ((((~ p X4) -> ((((~ p X4) -> exactly2 (f X4)) -> exactly4 (f X4)) /\ exactly4 X2)) -> p X4) /\ ((((exactly3 X3 -> (~ p X3)) /\ ((((p X4 -> (((p (f (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty))) /\ ((~ exactly4 (f (Inj1 X4))) /\ exactly5 Empty)) /\ (~ exactly4 X2)) /\ ((~ p X4) -> ((~ p X3) /\ (~ p X3))))) /\ (((p X3 /\ (~ p X3)) -> (((~ p (f X2)) /\ (f (mul_nat X4 (Union X4)) :e X3)) /\ ((exactly3 X3 -> (~ p (V_ X3))) /\ (~ exactly2 X2))) -> ((~ atleast2 X3) /\ ((~ p X4) /\ (((~ p X4) -> (~ atleast2 X3)) /\ ((~ ordinal (f X4)) /\ (((~ p X3) -> ordinal X3 -> p X3 -> (((atleast4 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty) -> (~ p X2)) -> p X3) /\ reflexive_i (fun X5:set => fun X6:set => exactly4 (Power Empty) -> atleast4 X5))) -> p (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty))))))) -> (~ atleast6 (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)))) /\ ((~ set_of_pairs X4) /\ ((~ exactly3 X2) -> exactly5 X2 -> (exactly4 X4 -> (~ p (binintersect X2 Empty))) -> atleast2 (f (binrep (Power (Power (Power (Power Empty)))) Empty))))) -> ((~ p X4) -> (set_of_pairs Empty /\ (~ atleast5 X3))) -> p (f X3))) -> p X4) /\ (nat_p Empty -> atleast2 X3)))) /\ p X4)) /\ ordinal (f X2)) -> (((~ set_of_pairs X2) -> (SNo X3 /\ atleast6 X4)) /\ (((atleast5 X4 -> p X4 -> ((((~ p X3) -> (((~ exactly5 (Union (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty))) -> (~ exactly1of2 (setsum_p X3 -> ((~ atleast5 X4) -> (~ atleast4 (Sing (f X2)))) -> p (ordsucc X4)) (~ p X3))) /\ (~ p Empty)) -> (~ atleast3 X3)) -> stricttotalorder_i (fun X5:set => fun X6:set => p (f X2))) /\ ((~ nat_p X4) /\ ((~ p X3) /\ ((~ p X3) -> (~ nat_p (ap X4 X3))))))) -> TransSet (proj1 X3) -> ((p X4 /\ TransSet X2) /\ (((((p (UPair (f (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty)) X4) /\ (((~ exactly4 (f X3)) -> (~ atleast6 (binrep (Power (Power (Power Empty))) (Power Empty)))) /\ (~ TransSet X3))) -> p (f X4)) -> (~ atleast5 X3)) -> (((~ p X3) /\ ((exactly2 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty) /\ ((((p (f X3) /\ (~ p (f (f X2)))) /\ ((~ p (f (setsum X3 X3))) /\ ((p X3 /\ p X3) /\ p X4))) /\ p (f X2)) /\ (~ p (binrep (Power (Power (Power (Power Empty)))) (Power Empty))))) -> atleast3 X3 -> (((((nat_p X4 -> (~ atleast4 (binrep (Power (Power (Power (Power Empty)))) (Power Empty)))) /\ (atleast2 (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty) -> (p X4 /\ (~ atleast6 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))))))) -> p X4) /\ (~ p X3)) /\ (~ p X2)) -> (((X4 :e X3) /\ p Empty) /\ (~ atleast5 (Sing X3))))) /\ SNo X3)) -> (~ p X3) -> (~ TransSet X3))) -> atleast6 (SNoElts_ (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty)) -> (~ p X4)) -> (~ p (f Empty))))) /\ p (f X2)) -> p X3) -> atleast3 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))))).
admit.
Qed.

Theorem conj_Random2_TMNYKr8oHLgXtcxXEsPkAmJJc18DHecCyAg: forall X2 c= setsum (Inj1 (f (Sing (f (f (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty)))))) (SetAdjoin (f (f (PSNo (In_rec_i (fun X3:set => fun X4:set -> set => Empty) (f (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty))) (fun X3:set => (~ atleast5 X3) -> (exists X4:set, (exists X5 :e X3, exactly3 (f X4)) -> (((forall X5:set, ((((atleast2 (f Empty) /\ ((exactly3 (binrep (Power (Power (Power Empty))) Empty) -> TransSet (binrep (Power (Power (Power (Power Empty)))) (Power Empty))) /\ ((p (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty) /\ (~ exactly3 X5)) -> atleast4 X5))) -> TransSet (f X4)) /\ ((~ setsum_p (f X4)) -> (p Empty /\ exactly5 X3) -> ((~ exactly4 X4) /\ (~ p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)))))) /\ exactly2 X5) -> (atleast5 (f X4) /\ (((~ exactly3 X4) -> SNo X5) /\ (~ p (Power (Power (Power (Power Empty)))))))) /\ (forall X5 :e Empty, (~ p X5))) /\ (forall X5:set, (~ ordinal (Power (Power (Power (Power Empty)))))))))))) (f (f (f (f (setprod (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))) (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty))))))), (((atleast6 X2 -> (setsum_p X2 /\ (exists X3:set, set_of_pairs (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty)))) /\ ((~ atleast4 (f (f X2))) -> ((forall X3 c= X2, exists X4 :e binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty, (~ p X4)) /\ (exists X3:set, (((forall X4:set, (~ p X4) -> (~ ordinal X2)) /\ (~ atleastp (f X2) Empty)) /\ (exists X4:set, ((~ exactly2 X3) /\ p X3))))))) -> p (f (f X2))) -> (exists X3 :e binrep (Power (Power (Power (Power Empty)))) (Power Empty), (exists X4 :e X2, ((~ atleast6 X4) /\ (~ p (f X3)))) -> (~ p X3)).
admit.
Qed.

Theorem conj_Random2_TMGo9rfSRQpgBVgVA3Fn6SPkeVefrvet5Pd: exists X2:set, ((exists X3:set, ((X3 c= X2) /\ p (binrep (Power (Power (Power Empty))) (Power Empty)))) /\ (exists X3 :e X2, forall X4:set, (exactly2 X2 -> p X4) -> ((((((~ ordinal X3) -> atleast3 X4) /\ atleast4 Empty) -> (~ exactly3 (Power (binrep (Power (Power Empty)) Empty)))) /\ ((((exactly2 X2 -> ((((~ ordinal X3) -> p (f (Power (Power (Power (Power Empty)))))) -> atleast3 X4) -> (~ exactly5 (binrep X3 X3))) -> atleast4 X4) -> p (f (Power (binrep (Power (Power Empty)) Empty)))) -> (ordinal X4 /\ ((p (f (f X2)) -> (p X4 /\ (((~ p (Power (Power (Power (Power Empty))))) /\ ((~ nat_p X2) -> p X3)) -> (~ p X4) -> atleast5 X4))) /\ (((((p X4 /\ ((~ p X4) /\ (p X3 /\ p Empty))) -> exactly2 X4 -> (SNoLe X2 X2 /\ setsum_p X4)) /\ (((((((X4 :e X2) /\ (~ p X4)) -> (((((~ reflexive_i (fun X5:set => fun X6:set => ((p Empty -> p X5) /\ (exactly4 X6 /\ ((atleast6 (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) /\ ((~ exactly5 X5) -> (p X6 /\ atleast6 X6) -> ((((((p X2 -> p X6) /\ ((~ p X2) /\ ((((((~ SNo_ X5 X5) -> ((p Empty -> p (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)))) -> ((((~ nat_p Empty) /\ nat_p X5) /\ ((~ exactly3 X6) -> ((~ p X5) /\ atleast6 (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty)))) -> (((((~ exactly5 X6) /\ (~ atleast2 (f X5))) -> (((exactly5 (Power (binrep (Power (Power Empty)) Empty)) -> (~ p X5)) -> (~ p X3)) /\ (~ p X5))) -> (p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) /\ atleast4 X5)) /\ ((~ p X6) -> ((p X5 -> (~ p X6) -> p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty)) /\ (TransSet (f Empty) /\ ((~ ordinal X3) -> (((TransSet X6 -> stricttotalorder_i (fun X7:set => fun X8:set => (~ p (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)) -> (((~ p X2) -> ((p X8 /\ (((exactly3 (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty) -> p X6) /\ ((p X7 /\ (~ atleast4 X2)) -> (((~ atleast6 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))) -> atleast5 X7) /\ (~ ordinal X8)))) -> (~ exactly4 X2) -> ((((ordinal X8 -> (~ setsum_p X7)) -> (((p X5 /\ (exactly5 X7 -> (((~ exactly3 X7) -> (((~ p X8) -> p X2) /\ (((atleast3 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) /\ ((((((~ exactly4 X7) -> atleast5 X7) /\ p X7) -> (p X3 /\ p X4)) /\ (atleast6 X7 /\ p Empty)) -> p X4)) -> ((~ p X8) /\ ((eqreln_i (fun X9:set => fun X10:set => (~ nat_p X9)) /\ p X6) -> (~ p (f X8))))) -> (((~ p Empty) /\ (~ p X7)) /\ (p X8 /\ (~ TransSet X4)))))) /\ ((((((~ ordinal X2) -> ((((~ PNo_downc (fun X9:set => fun X10:set -> prop => exactly4 (f X9)) X7 (fun X9:set => ((p X9 /\ ((~ p X2) -> (p X3 /\ (p (ReplSep X6 (fun X10:set => (~ irreflexive_i (fun X11:set => fun X12:set => exactly3 (Inj0 X9)))) (fun X10:set => Empty)) -> ((~ exactly5 Empty) /\ (atleast3 (Inj1 X6) -> atleast2 X4)))) -> PNoLe X4 (fun X10:set => p (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty)) (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) (binrep (Power (Power (Power (Power Empty)))) (Power Empty))) (fun X10:set => p X9) -> setsum_p X8)) /\ ((~ p X6) -> (nat_p (binrep (Power (Power (Power Empty))) (Power Empty)) /\ (~ nat_p (ap (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty) X8))))))) -> atleast5 (f X8)) -> p X6) -> (~ p X5)) -> exactly2 (Sing X8)) -> (atleast3 X8 /\ (p X8 -> (((~ p X2) -> (~ (X2 :e X7)) -> ((p (f Empty) -> p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))) /\ p X7)) /\ (~ nat_p X8))))) -> ((~ p X7) /\ p X8) -> p X8 -> p X8) -> ((~ p X7) /\ ((~ p X6) -> ((~ p X7) /\ ((((((X8 :e X3) /\ (~ TransSet X8)) -> p X8 -> irreflexive_i (fun X9:set => fun X10:set => atleast2 X10)) /\ ((p (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))) -> (~ p X7)) /\ ((~ TransSet X7) /\ (((~ atleast3 (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)))) -> (~ p X6)) /\ atleast5 X8)))) -> ((~ p X7) /\ ((p (f X8) -> (~ ordinal (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty))) -> (((~ p Empty) -> (~ p (SNoLev Empty))) -> atleast3 (f X2)) -> ((~ (ordsucc (f (proj0 X2)) c= X7)) /\ (~ atleast3 X2)) -> ((((X7 :e binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty) -> (((~ atleast5 X2) /\ ((~ reflexive_i (fun X9:set => fun X10:set => (~ atleast4 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty)))) /\ p (f X7))) /\ (~ atleast3 (f (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty))))) -> (p X7 /\ exactly5 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty))) /\ (p X7 -> ((~ p X3) -> (~ exactly3 X7)) -> (~ atleast3 X7))) -> atleastp Empty X8) /\ ordinal X8))) -> (~ p (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)))) -> ((~ atleast3 X8) /\ (atleast2 X8 /\ p X7))))) /\ (p (Unj X7) /\ p X6))) -> (~ p X5))) -> (~ nat_p X8)) /\ p X8)) /\ (~ p X8)) /\ (~ p X7)))) /\ ((~ atleast4 X8) -> (~ atleast6 X6) -> (~ PNo_downc (fun X9:set => fun X10:set -> prop => TransSet X3) X4 (fun X9:set => p X8)) -> p X8))) /\ atleast5 X7) -> (atleast5 X8 /\ ((~ SNoLt Empty X7) /\ (~ SNo (If_i ((((~ TransSet (binunion Empty (Power (binrep (Power (Power Empty)) Empty)))) -> set_of_pairs (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty))) -> (~ TransSet X8)) -> ((((((((p X7 -> (~ p Empty) -> (((((((~ ordinal Empty) -> exactly2 X2) /\ equip (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) X3) -> (~ TransSet X7)) /\ ((~ p X8) /\ (TransSet X7 -> (((~ exactly4 X7) /\ ((((~ nat_p X8) -> (~ p (SetAdjoin (binrep (Power (Power (Power Empty))) Empty) X7))) /\ ((~ p Empty) -> TransSet X6)) -> (~ exactly3 X8) -> (p X7 /\ (~ setsum_p Empty)))) -> (p X7 -> p X4) -> (atleast3 X7 /\ (~ exactly4 X8))) -> (~ tuple_p Empty X7)))) -> ((~ p X8) /\ ((((SNo X7 -> (~ exactly3 (Power (binrep (Power (Power Empty)) Empty)))) /\ ((~ atleast5 X7) -> exactly2 X8 -> ((~ nat_p (Power X2)) /\ (p X8 -> ((~ exactly4 X2) -> ((~ p X5) /\ linear_i (fun X9:set => fun X10:set => (~ p X5) -> (p X9 -> ((((~ p X9) -> (~ p X6)) -> (~ nat_p X5)) /\ ((p X10 /\ (~ p X3)) /\ ((~ p X10) /\ TransSet X2)))) -> ((binop_on X3 (fun X11:set => fun X12:set => binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty) -> (((~ p X6) /\ ((~ p X9) /\ p X5)) /\ p X9)) /\ (((p (Unj X9) /\ p X9) /\ ((((((~ nat_p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty))) -> ((((((~ p X4) /\ (~ atleast4 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))))) -> nat_p X10) /\ ((~ atleast3 X9) -> (~ atleast2 X9))) /\ (~ ordinal X9)) /\ p X9) -> p X10 -> p X3 -> (p X9 /\ p (ordsucc X9))) -> (((~ p X3) /\ p X9) /\ nat_p X10)) -> (~ SNo_ X9 X3)) -> atleast5 X10) /\ (~ atleast5 (Inj1 X10)))) /\ (stricttotalorder_i (fun X11:set => fun X12:set => (~ p X10)) /\ (((~ atleast2 X6) -> TransSet X10) /\ TransSet X9)))) -> (~ p (SNoLev X9)))) -> p X8) -> ((~ SNo_ X4 X8) /\ atleast5 X2) -> ((~ p X2) /\ ((((p X3 -> p X5) -> atleast4 (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty)) -> (binrep (Power (Power (Power Empty))) Empty :e X7) -> (~ exactly2 X6)) -> (~ atleast3 X8))))))) -> (~ atleast5 (binrep (Power (Power (Power (Power Empty)))) (Power Empty)))) /\ ((~ ordinal Empty) /\ (((atleast4 (f X6) /\ (~ p (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty))) /\ exactly3 (V_ X7)) /\ (~ p (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty))))))) /\ (~ TransSet X8))) /\ ((((~ p X7) /\ p X2) -> (~ p X7) -> (~ TransSet X5)) /\ (exactly2 X2 -> (p X7 /\ (((~ atleast5 (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty)) -> exactly3 (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty) -> p X7) /\ set_of_pairs X7))))) /\ (~ p X2)) -> (((~ exactly5 X2) -> exactly4 X7) /\ atleast6 X3)) -> p X8) -> (p (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty) /\ p (Power (Power (Power (Power Empty))))) -> ((~ p X8) /\ (~ p X7)) -> atleast5 X8) /\ ((~ p X8) /\ ((~ TransSet X7) -> (~ TransSet X8)))) /\ p X5) -> (~ exactly3 (f (Power (Power (Power (Power Empty))))))) X8 X7)))))) /\ (X5 :e Empty)) /\ ((~ setsum_p (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)) -> (f (Inj0 X5) :e X2)))))))) -> (~ atleast2 X6)) -> (p X5 /\ p X6) -> ((~ atleast5 X5) -> exactly5 Empty) -> ((TransSet X5 -> p X5) /\ atleast3 Empty) -> atleast4 X5) -> (~ exactly5 (famunion (Inj0 (f X5)) (fun X7:set => X7)))) -> exactly5 X6) -> TransSet X4) -> ((~ p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty)) /\ (((~ p X4) /\ (TransSet X6 /\ (~ p X5))) -> (~ ordinal X6)))) /\ (((((~ p (f X3)) -> (~ exactly4 X6)) -> p X6) /\ (((~ p X5) -> (~ reflexive_i (fun X7:set => fun X8:set => (~ p X6)))) -> (~ TransSet X5))) /\ (((~ p X6) /\ (~ p X3)) /\ ((set_of_pairs X6 -> p X5) -> ((~ p X4) /\ (ordinal (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) -> p X5 -> (~ reflexive_i (fun X7:set => fun X8:set => (~ p X4))))))))))) -> p X3) -> (set_of_pairs X5 -> exactly4 X5) -> (~ p (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty))) -> (~ p X3) -> ((~ p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty)) /\ p X5)) /\ ((((((~ p (setexp X3 X6)) /\ ((~ equip X5 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty))) -> (reflexive_i (fun X7:set => fun X8:set => (~ p X7)) /\ (((~ atleast4 (f X6)) /\ (p X5 -> (~ p X5))) /\ ((((~ exactly2 X5) -> atleast6 X6 -> ((((~ p X6) -> exactly3 X5) /\ (((~ p X3) -> p X5) /\ ((p (UPair X6 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty)) -> (atleast2 X2 /\ (((~ atleast2 X6) -> atleast2 X5) /\ (((~ p (f X5)) /\ (p X5 /\ (~ p X4))) /\ p (Power (Power (Power (Power Empty)))))))) -> ((~ exactly2 X4) /\ (((~ p (Inj1 X2)) /\ ((~ p X5) -> ((~ p (f X6)) /\ (p (f X5) /\ ((~ nat_p (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty)) -> ((~ atleast5 Empty) /\ (p Empty -> ((X3 :e binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty) /\ ((~ p X6) /\ p (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty)))))))))) /\ (((~ TransSet (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty))) /\ p (f (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)))) -> p Empty)))))) /\ (~ exactly5 Empty))) -> (p X2 /\ atleast6 X3)) /\ ((exactly1of2 ((((~ exactly3 X5) -> (~ p X3)) -> ((((~ p X4) -> (~ p Empty)) -> (~ atleast4 X4)) -> (~ p X3)) -> p X5 -> (~ atleast6 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty)) -> p X4) /\ (~ p (f X6))) (~ p X5) /\ (~ exactly4 X6)) -> atleast2 (Power X6))))))) /\ ((((~ p (f Empty)) /\ (p (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))) /\ ((~ atleast5 X5) /\ atleast4 X6))) /\ (~ p X6)) /\ ((~ TransSet (Power (Power (Power (Power Empty))))) /\ (TransSet (binrep (Power (Power (Power Empty))) (Power Empty)) -> (~ p X6))))) -> (~ per_i (fun X7:set => fun X8:set => p X7))) -> p X4 -> ((p X5 -> (~ setsum_p X5)) /\ (((~ p Empty) -> p X5) /\ ((ordinal X2 /\ ((p X3 -> p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty))) /\ (((((~ setsum_p X3) -> atleast3 (Inj0 X6)) /\ (nat_p X6 /\ (((nat_p X5 /\ ((((p (ReplSep X6 (fun X7:set => PNoLt X7 (fun X8:set => (((~ p X2) -> p X7) /\ (~ ordinal X7))) Empty (fun X8:set => ((((((~ SNo_ (f X3) X7) /\ (((~ exactly3 (f X5)) -> ((~ p X2) /\ (~ exactly3 X8))) /\ (((~ atleast5 X7) -> (~ ordinal X4)) -> (~ p X8) -> (exactly2 X7 /\ (~ atleast3 (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)))))) -> (~ tuple_p (Power (Power (Power (Power Empty)))) (SNoElts_ X4))) -> (~ ordinal X5)) /\ (((~ p X3) -> (~ setsum_p X5)) -> (p X2 -> p (binrep (Power (Power (Power (Power Empty)))) Empty)) -> (~ p X8))) /\ atleast3 X2) -> atleast3 X7 -> atleast4 X7)) (fun X7:set => X6)) -> (~ atleast3 X6) -> ((~ p (setminus X4 X5)) /\ atleast5 X5)) /\ ((~ p X2) -> (~ atleast4 X5))) -> ((~ atleast4 X6) /\ (nat_p X2 /\ ((~ p (binrep (Power (Power (Power (Power Empty)))) (Power Empty))) /\ (exactly3 (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty) /\ (~ reflexive_i (fun X7:set => fun X8:set => (((~ ordinal X5) -> (p X2 /\ ((((atleast6 X6 -> atleast2 Empty) /\ ((~ ordinal X7) /\ ((((~ p X8) /\ (~ p X4)) -> p X3) -> p (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty)))) -> (((~ atleast5 X8) /\ (~ p X5)) /\ (setsum_p X5 -> (~ p X5) -> (((~ p (Power X7)) -> nat_p X8) /\ ((((exactly1of2 ((~ p X6) -> ordinal Empty) (setsum_p X5) -> p X8) /\ (~ exactly3 X8)) /\ ((~ p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty))) -> setsum_p X8)) -> p (f X8)))))) /\ (((~ p X7) /\ ((exactly2 X7 /\ (TransSet X7 -> ((~ p X7) /\ ((~ atleast4 X7) -> (~ p (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty)))))) -> (p X8 /\ (~ p X8)) -> (~ ordinal Empty) -> irreflexive_i (fun X9:set => fun X10:set => (~ exactly4 X10)))) /\ (~ p X8)))) -> p (Power (Power (Power (Power Empty))))) -> (~ atleast6 (f Empty))) -> (~ p X7)))))))) /\ (~ p Empty))) /\ ((~ TransSet X3) -> p X5)) /\ ((~ p X4) /\ (p X5 -> (~ exactly2 X5)))))) /\ (~ atleast2 Empty)) /\ (~ atleast5 X6)))) /\ ((~ p X4) /\ p Empty)))) -> p X3 -> (((((~ p X2) -> (atleast3 X6 /\ (p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty) /\ (p X5 /\ (TransSet Empty /\ ((~ (f X5 :e X3)) -> atleast3 X5)))))) /\ (~ p X5)) -> (((p (f X5) -> ((ordinal X6 /\ p X6) /\ ((~ (X6 :e X4)) /\ ((p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) -> p X5) -> atleast2 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty))))) -> p X5) /\ (~ p X5))) /\ (~ p X2))) /\ exactly4 (binrep (Power (Power (Power Empty))) (Power Empty)))))) /\ atleast3 X3))))) -> (p X4 /\ (p X4 -> ((~ p X4) /\ (((~ p (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)) -> (((((~ SNo_ (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) X3) -> p X4) -> ((~ p (f (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty))) /\ atleast4 X3)) -> (~ p X3) -> (((~ p (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty)) /\ (~ set_of_pairs X3)) /\ p X4)) /\ (~ p (f X4))) -> TransSet Empty) /\ (p (SNoElts_ X3) -> (~ TransSet X3)))))) -> (p Empty -> (p X4 /\ (~ p (binrep (Power (Power (Power Empty))) (Power Empty))))) -> p X4) /\ (nat_p X2 -> (p (mul_nat (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) X2) /\ PNoEq_ X2 (fun X5:set => (~ exactly5 X4)) (fun X5:set => (~ p X3))) -> (nat_p X4 -> exactly4 X2) -> atleast4 X3)) /\ (~ p X4)) /\ (~ p X4))) /\ (p (f X4) /\ (~ p (f X4)))) /\ exactly2 X4) -> (~ p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty))) -> ((((((((p (Power (binrep (Power (Power Empty)) Empty)) -> ((~ atleast2 X3) -> ((~ p X2) -> (~ p X3)) -> (((~ exactly4 X4) /\ p X3) -> equip X2 X2) -> exactly5 X2) -> (exactly5 (Sing X4) /\ ((~ atleast3 X4) -> ((~ p X4) /\ TransSet X4)))) -> (((~ p X3) -> p X2) /\ ((p X3 /\ p (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty)) -> ((set_of_pairs X4 -> p X3) /\ (atleast3 (f Empty) /\ TransSet X3))))) -> SNo_ X4 X2) -> (~ p X4) -> (~ exactly4 X3)) -> (~ exactly3 X3)) /\ ((atleast4 X4 /\ ((~ p X4) /\ (((p X2 -> ((~ exactly3 X3) /\ (((~ setsum_p X2) /\ p X2) /\ (((~ exactly5 X2) /\ SNo X2) /\ p X3)))) -> (~ exactly5 (f X3))) /\ p X3))) -> exactly3 X3)) /\ atleast5 Empty) -> (~ p X4)) -> ((p (f (binrep (Power (Power (Power (Power Empty)))) Empty)) -> ((TransSet X3 -> p (f Empty)) /\ (p X4 /\ p (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty))) -> p X3) /\ (~ setsum_p X3)))) -> (~ p X3)) /\ (~ p X2))))) -> p (Sing X4))) -> p X4 -> (~ TransSet X4)) -> ((~ ordinal (setexp X4 X4)) /\ ((~ p (Power (Power (Power (Power Empty))))) /\ (p (f X4) /\ ((((~ p X2) -> (p (binrep (Power (Power (Power Empty))) (Power Empty)) -> (((~ atleast5 X3) -> ordinal X2) /\ ((((~ p X3) /\ (TransSet X2 -> (~ atleast6 (f (Union (f X4)))))) /\ (~ p X2)) /\ (p X4 -> atleast5 X4)))) -> (~ p X3) -> ((~ p Empty) /\ (~ exactly2 (f X4)))) /\ (p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) -> (((~ p X4) -> (((((~ tuple_p X3 (f X4)) /\ p X3) /\ (p (Sing Empty) -> ((~ p X4) /\ p (SNoLev (f X3))))) -> ((~ p (f X3)) /\ p X3) -> (((~ atleast2 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))) /\ p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))) /\ exactly4 X3)) /\ ((~ p X4) -> (~ p X3) -> (~ p (Sing X4)) -> atleast6 (f (f X3)) -> (((~ p X4) /\ ((((~ p X4) /\ (~ p (f X3))) /\ (((~ p X3) -> (((~ exactly2 X2) /\ atleast3 X3) /\ atleast4 X4) -> p X2) -> ((~ p X4) -> (~ ordinal X4)) -> (p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) /\ (~ SNo X2)))) /\ p X3)) /\ ((~ p X3) /\ ((~ p (f X4)) /\ p X4)))))) -> ((((((~ exactly3 X2) -> ((~ exactly5 X3) /\ ((~ p X3) /\ atleast5 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty))))) -> ((((SNo_ (f X3) Empty -> ((~ p X2) /\ (nat_p X4 -> ((~ p (f X3)) /\ exactly3 (f (setprod X2 X3))) -> ((~ atleast6 (f X3)) /\ ((~ exactly5 X3) /\ ((p X4 /\ p X2) -> exactly3 (f X3)))) -> p (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty) -> ((~ p (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)))) /\ atleast2 X4)))) /\ (((p X2 /\ ((p Empty -> (ordinal X2 /\ ((~ p X4) -> (((~ p Empty) -> (~ ordinal X3) -> ((~ p X4) -> (~ TransSet (binrep (Power (Power (Power Empty))) Empty)) -> (~ TransSet (binrep (Power (Power (Power (Power Empty)))) (Power Empty)))) -> (p X3 /\ (exactly4 X3 -> (p X3 /\ ((((~ p X4) -> (atleast4 (f (f X4)) /\ (~ atleast3 Empty))) -> (p (f X3) /\ ((p X3 -> p X3) -> (~ atleast3 Empty))) -> atleast2 X2) -> (exactly5 (f Empty) /\ (~ p X2)))))) -> ((~ p Empty) /\ p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty))) /\ p X4)))) -> (~ (X2 :e X3)))) -> (~ p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty))) /\ (~ p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty)))) -> (~ exactly4 (f X2)) -> p X3 -> (~ p X2)) /\ (~ p X4))) /\ p X4) /\ TransSet (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty)) /\ ((~ PNoLt_ X2 (fun X5:set => p (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty) -> atleast5 X5) (fun X5:set => atleast4 X5 -> (~ p X4) -> atleast5 (f X4) -> (~ exactly2 X4))) /\ nat_p X3))) -> (p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty) /\ (~ p (f Empty))))) /\ p X2)))))).
admit.
Qed.

Theorem conj_Random2_TMEu9JvxMvS9et7o1warEBeyvAQKgmUZ3Ee: ((p (f Empty) -> ((forall X2 c= binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty, ((exists X3 :e f (f X2), (~ p X2)) -> (forall X3 c= X2, ((forall X4 :e V_ X3, (~ p X4)) /\ (forall X4 c= f (binrep (Power (Power (Power (Power Empty)))) (Power Empty)), (exactly4 Empty /\ ((~ p (binrep (Power (Power (Power (Power Empty)))) Empty)) -> (~ ordinal X3) -> p X4)))))) -> (forall X3:set, (forall X4:set, (~ p (binrep (Power (Power (Power (Power Empty)))) (Power Empty)))) -> (exists X4 :e f X2, ((~ p (f X2)) /\ (p X3 /\ (p (f X3) /\ (((((atleast2 X2 /\ ((p X2 -> ((((~ p X4) -> (((~ (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty :e binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty))) -> (((p X4 -> p X2) -> ((((p X4 -> ordinal (f (Power (binrep (Power (Power Empty)) Empty)))) -> (((~ atleast4 X3) -> (((p X4 -> ((~ p X4) /\ ((eqreln_i (fun X5:set => fun X6:set => p X2) /\ (~ ordinal X3)) -> (p X4 /\ (~ p X4))))) /\ (~ equip (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) X4)) /\ (p X2 /\ (~ setsum_p X4)))) /\ (exactly2 (f X2) -> (p X4 /\ ((((~ p (Inj1 X3)) /\ (~ p X3)) /\ ((atleast5 X3 -> (((~ TransSet (f X2)) /\ (~ p X4)) /\ atleast5 (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty))) -> (~ p Empty))) -> p X2))))) -> atleast5 (f (f X2))) /\ p X3) -> (~ p (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))))) /\ (p (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) -> ((~ SNo X3) /\ (p X2 -> p X4))))) /\ (~ p X2))) -> (((((~ p X2) -> (atleast4 X3 /\ (((p X2 -> (~ atleast4 X4) -> (~ p (ordsucc X4))) /\ p X3) -> p X4)) -> ((~ p X3) -> ((exactly2 (f X3) -> p X3) /\ ((~ atleast4 X3) /\ (exactly3 (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty) /\ ((((~ exactly3 X4) /\ (~ p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty))) /\ (((atleast6 Empty /\ (transitive_i (fun X5:set => fun X6:set => ordinal X5 -> (p X3 /\ ((~ p X6) /\ (p (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))) -> (((~ nat_p X4) /\ ((((~ p (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)))) /\ (p X5 -> p X5 -> (~ p X6))) -> p X5) -> (exactly4 X2 /\ ((~ p (binrep (Power (Power (Power (Power Empty)))) (Power Empty))) /\ (((~ exactly3 X6) /\ (((~ p Empty) /\ ((exactly4 (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty) /\ p (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty)) -> ((~ p X5) /\ (atleast4 X5 -> exactly5 X2)) -> ((~ atleastp X5 (Power (Power (Power (Power Empty))))) /\ ((((SNo X2 /\ ((atleast6 (binrep (Power (Power (Power (Power Empty)))) Empty) -> p X3) -> (~ atleast5 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))) -> (p X6 /\ atleast3 X5))) -> p X5) -> (~ p X2)) /\ (~ p (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty)))))) /\ (((p X5 /\ nat_p X5) /\ ((atleast2 X5 /\ atleast2 X2) /\ (~ atleast4 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))))) -> (~ tuple_p X3 X6)))) -> ((p X6 /\ p X5) /\ (~ ordinal X5))))))) -> p X5) -> (~ atleast4 (binrep (Power (Power (Power Empty))) (Power Empty))))))) /\ ((p X4 -> ((p (f X3) /\ (((((p X3 -> p X4) -> ((p X2 -> p (lam (Power (binrep (Power (Power Empty)) Empty)) (fun X5:set => X5)) -> ((~ atleast2 Empty) /\ (~ atleast2 X3))) /\ atleast4 X4)) /\ ((p X2 /\ (((~ p X2) /\ (p (f X2) /\ SNo X3)) /\ (((((p (Union X4) /\ (((((~ p X4) -> (~ p (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty))) -> (setsum_p X2 /\ ((((((~ atleast4 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty)) -> (~ p (f X3)) -> (p X3 /\ set_of_pairs (binrep (Power (Power (Power (Power Empty)))) Empty))) /\ (~ exactly5 (setminus X4 X4))) -> (~ p (f X3))) /\ p Empty) /\ (~ SNo (f X4))))) /\ (~ exactly3 X2)) -> ((((atleast2 X3 /\ (((p X2 /\ p X4) -> exactly3 (f X4)) /\ (~ atleast2 X2))) /\ (((~ p X3) /\ (((~ atleast5 (f X4)) -> ((~ p X3) /\ (((p (binrep (Power (Power (Power Empty))) Empty) -> p X2) /\ ((~ p (binrep (Power (Power (Power (Power Empty)))) Empty)) -> (~ atleast4 X3))) -> atleast4 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty)))) -> (((((~ setsum_p X4) /\ p X2) /\ (((~ p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty))) /\ (~ p Empty)) /\ (atleastp (f X2) Empty /\ (~ p X3)))) -> ((~ p X4) /\ ((~ p X2) -> ordinal X2))) /\ p X4))) -> ((nat_p Empty /\ ((~ (X4 = f X4)) /\ ((~ p X4) /\ ((((~ p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty))) /\ (~ TransSet (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))))) /\ (((~ TransSet (f (f (binrep (Power (Power (Power Empty))) Empty)))) /\ atleast3 X4) -> ((((~ exactly4 X2) /\ (~ exactly5 (f X4))) /\ nat_p X2) /\ (((((exactly5 X3 -> p (binrep (Power (Power (Power Empty))) Empty)) -> p X2) /\ (TransSet X3 -> (~ p X2))) /\ (ordsucc X2 c= X4)) -> atleast6 X3)))) /\ ((((~ atleast5 (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty)) -> (~ atleast6 X4)) -> p (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty) -> (~ p X3)) -> (p Empty -> ((~ p (binrep (Power (Power (Power Empty))) (Power Empty))) /\ (p X4 /\ (p (f X4) -> exactly3 (f X3) -> (((ordinal X2 /\ (~ p X3)) -> (~ SNo (f (binintersect (f Empty) (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty))))) -> (~ nat_p X3) -> (~ exactly3 X3)) -> p X4 -> (p Empty /\ exactly2 (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))))))) -> (p X4 /\ (nat_p X3 -> (((~ p X2) -> (~ atleast2 X3) -> (~ p X4) -> exactly3 X4) /\ p (SNoElts_ X3))))) -> (~ atleast6 X3)))))) /\ atleast3 X3) -> (~ reflexive_i (fun X5:set => fun X6:set => (~ p (Power (binrep (Power (Power Empty)) Empty))) -> atleast2 X5)))) /\ (~ atleast5 X4)) /\ (~ exactly3 (f (f X4)))))) /\ (~ p X2)) -> (~ exactly4 X4)) -> ((~ SNo_ X3 X4) /\ ((~ p X3) /\ (~ p X3))) -> (((~ exactly5 X4) -> (exactly2 X4 /\ ((TransSet X3 -> ((~ p X4) -> ((((~ TransSet (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)))) -> (((((~ p Empty) /\ ((((((atleast6 (f X3) /\ exactly4 X2) /\ (p X3 -> p X3)) -> (~ exactly2 X2)) -> p (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty) -> p (f X4)) /\ atleast4 X3) /\ exactly2 (f (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty)))) -> (p (proj0 X2) -> p X4) -> ((((p X3 -> ((setsum_p X2 /\ (~ p X3)) /\ ((((~ irreflexive_i (fun X5:set => fun X6:set => ((((~ atleast4 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty)) /\ ((((~ p X5) /\ (~ p X6)) -> atleast5 X5) /\ (~ atleast6 Empty))) -> ((~ atleast6 X4) /\ (((X5 :e X6) /\ (~ p X6)) /\ p Empty))) /\ (~ atleast6 (Union (Inj1 X6)))))) /\ (exactly5 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty) -> (((p X2 -> (~ atleast3 X4)) -> (~ atleastp X3 X4)) /\ (~ (X3 :e binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))))))) /\ (exactly2 (f X3) /\ p (Power (binrep (Power (Power Empty)) Empty)))) /\ (~ PNoEq_ (binrep (Power (Power (Power Empty))) Empty) (fun X5:set => (p X5 /\ binop_on X2 (fun X6:set => fun X7:set => Empty)) -> (((p X5 -> p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))) /\ ((nat_p X4 -> (~ atleast5 X2)) /\ ((~ atleast6 (f X3)) -> (~ exactly2 (f Empty))))) /\ atleast3 X5)) (fun X5:set => ((TransSet X3 -> (~ atleast2 X2)) /\ atleast4 X4)))))) /\ (~ p X3)) -> p X4 -> atleast4 X4) /\ p (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty))) -> ((~ p X3) /\ ((~ p X3) /\ (~ exactly4 X4)))) /\ p (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty))) -> ((atleast5 (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty) -> p (f (Union X4))) /\ (~ TransSet (Sep2 X2 (fun X5:set => binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty) (fun X5:set => fun X6:set => (p X6 -> atleast6 (binrep (Power (Power (Power Empty))) Empty) -> (~ (f X5 :e X5))) -> (~ TransSet (In_rec_i (fun X7:set => fun X8:set -> set => X8 (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)) X4)) -> (~ (V_ X6 :e X6))))))) /\ ((((p X4 /\ (((p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty) -> (~ p X4)) /\ (((ordinal (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) /\ ((((~ p X2) -> ((~ p X4) /\ p X4)) -> atleast3 X4) /\ atleast3 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)))) /\ (~ p (Inj0 X3))) -> exactly2 X4 -> (~ exactly5 X3))) /\ (ordinal X4 -> ((((~ p (f X4)) /\ ((~ nat_p X3) /\ (exactly3 Empty -> (~ SNo_ X4 X4) -> ((((~ p X4) -> (((p (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))) /\ ((((~ p X3) /\ (~ p X2)) /\ (p (binintersect X4 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty)) /\ (~ p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))))) -> atleast2 X3)) /\ p (f X4)) /\ (SNo Empty -> exactly4 (Power (Power (Power (Power Empty))))))) -> p X2) /\ TransSet X4) -> exactly5 Empty))) /\ (((~ p X3) -> (~ (f X3 :e X4))) -> (atleast3 X3 -> (~ (X3 c= X3))) -> ((((~ p X2) -> ((p X3 -> (~ p X3) -> exactly5 Empty) -> (~ p X4)) -> (((~ SNoLe X4 X2) -> (~ p Empty)) /\ ((X4 :e X4) /\ (p X3 -> p (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty))))) -> p X3) /\ (~ TransSet X2)))) /\ (~ p X2))))) /\ exactly4 X4) /\ ((((~ p X4) -> p (f (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))))) /\ (~ p X3)) /\ p X3)) /\ p (Power X4)))) -> (~ p X4)) /\ (p X3 -> set_of_pairs (f (f (f X4))) -> ((((~ p X3) /\ ((p X3 /\ ((~ p X4) -> p X2)) -> (~ p X4) -> (((~ p Empty) /\ (atleast2 X3 /\ (exactly3 X4 -> (((((((((~ p X4) -> (~ p X4)) /\ (((~ p X4) -> (~ p X4)) -> (~ exactly3 X3))) /\ ((~ p (f X3)) /\ ((~ p (f (PSNo X3 (fun X5:set => (~ p X4))))) -> (~ atleast6 X2)))) -> p (f X3)) -> (~ nat_p (f X4))) /\ (((~ p X4) /\ p Empty) -> (~ p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))) -> (~ nat_p X2))) /\ ((~ atleast3 X4) /\ (((((~ p (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty)) -> (~ atleast6 X4)) -> p (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)) -> (~ p (f X4)) -> (~ p X3)) /\ (((((~ exactly2 Empty) /\ (((~ p X4) /\ (((((~ atleast5 X2) -> atleast5 Empty -> (~ atleast2 X3)) -> ((~ p X3) /\ (~ exactly4 Empty))) /\ ((~ (Empty c= proj0 X4)) -> (~ p X4))) /\ exactly2 Empty)) -> (p X3 -> (((p X4 /\ ((~ p (f X3)) -> p X3)) /\ p (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)) /\ (~ exactly5 X4))) -> (((p X4 -> p X2 -> (~ p (lam2 (f X4) (fun X5:set => X5) (fun X5:set => fun X6:set => X6)))) -> (((~ exactly3 X4) /\ ((~ p X3) /\ p X4)) /\ (~ atleast5 (f (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty))))) /\ p X3))) -> p X3) -> p X3) -> (~ exactly3 X3))))) -> (atleast4 X3 /\ (~ p (binrep (Power (Power (Power (Power Empty)))) Empty)))) -> (~ atleast2 (f X2))))) /\ (~ exactly5 X4)))) /\ (~ atleast4 X4)) /\ ((p X4 -> (~ p X4)) -> ((exactly2 X4 /\ (~ p (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty))) /\ p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty)))))))) /\ ((((~ p X3) -> (~ p X3) -> ((p X3 /\ p Empty) /\ ((p X4 /\ ((~ p X2) -> p X3)) /\ ((~ p (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)))) -> (atleast3 X4 /\ (~ atleast4 (f (f (Power (binrep (Power (Power Empty)) Empty)))))))))) /\ (~ p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)))) -> p X4))) /\ (~ p X4)))) /\ ((SNoLe X2 (f (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))) -> TransSet X2) -> p (f X2)))) -> ((((atleast6 X2 -> (((p X3 -> (~ p X4)) /\ ((((~ p (binrep (Power (Power (Power (Power Empty)))) Empty)) /\ exactly2 (Power (binrep (Power (Power Empty)) Empty))) /\ (((~ p (f X3)) -> reflexive_i (fun X5:set => fun X6:set => (X5 :e X5))) -> (~ p X4))) -> atleast5 (binrep (Power (Power (Power Empty))) Empty))) /\ ((p (f X4) -> ((p (proj1 X4) /\ (exactly2 X4 /\ ((~ reflexive_i (fun X5:set => fun X6:set => (~ exactly3 X5))) /\ (((((~ SNo X4) -> (((exactly2 X3 /\ ((~ p X2) -> (p (f X3) /\ (((~ p (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty)) /\ (((TransSet X4 -> ((p X4 -> (~ partialorder_i (fun X5:set => fun X6:set => atleast6 X6))) /\ ((((((~ p X4) /\ (p X2 /\ p (Inj0 Empty))) -> (~ p X3)) /\ (~ reflexive_i (fun X5:set => fun X6:set => (~ atleast2 (binunion (binrep (Power (Power (Power (Power Empty)))) Empty) X6))))) /\ p (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty)) /\ (((((exactly2 X4 /\ exactly5 X3) -> p X3 -> (~ p X4)) -> trichotomous_or_i (fun X5:set => fun X6:set => atleast5 X2)) -> p Empty -> ((~ atleast6 X4) /\ ((~ exactly5 X4) -> (~ p X3)))) /\ ((((~ atleast2 X4) /\ ((p X2 /\ ((~ setsum_p X3) -> (p X4 /\ p X2))) /\ (p X4 /\ ((((~ p (f X4)) -> (~ TransSet X4)) /\ ((~ p X2) -> p X4)) /\ ((~ p X3) -> (~ p X2)))))) /\ (((~ TransSet X3) -> (atleast2 X4 /\ p (Sep X4 (fun X5:set => (~ p X5))))) -> ordinal X4 -> (~ p (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)))))) /\ (~ atleast2 X3)))))) -> ((~ p X4) /\ (p X3 -> (~ exactly5 X4)))) -> strictpartialorder_i (fun X5:set => fun X6:set => p X5))) -> (~ exactly4 (f (binrep (Power (Power (Power (Power Empty)))) Empty))))) -> (p X4 /\ (~ nat_p Empty)))) /\ ((exactly3 X2 -> (~ p X4) -> exactly3 X4) -> (atleast4 (Unj X3) /\ ((~ p (f Empty)) /\ (~ tuple_p X4 X2))) -> (atleast3 X4 /\ p X3))) /\ ((~ p X4) -> p X4 -> (~ p X4) -> ((atleast2 X4 /\ (~ p X4)) /\ (~ atleast4 X3))))) -> (~ p (f Empty))) -> TransSet X3) -> (((set_of_pairs X4 /\ ((((p X4 -> (~ atleast5 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)))) /\ ((p (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty) /\ SNoLt X2 (UPair X4 X3)) /\ (~ p (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)))))) /\ (~ p X4)) /\ (~ p (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty)))) -> exactly3 Empty) /\ (~ p X4)))))) /\ ((~ TransSet X2) -> p (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty) -> (~ p X3) -> p X2))) -> (~ atleast6 (f X4)) -> exactly3 (f X3)))) /\ ((((p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty) /\ (p (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty) /\ (((~ p X3) -> (~ p (f X4)) -> (~ exactly4 X4) -> p X4) -> (((~ TransSet X3) -> ((p X4 /\ ((~ p X4) /\ p X4)) /\ atleast2 (f (f X4)))) /\ ((~ (X2 :e X4)) -> exactly2 (f X3))) -> (~ atleast3 (f X3))))) /\ p (Power (binrep (Power (Power Empty)) Empty))) /\ exactly5 X3) -> (ordinal Empty /\ ((((nat_p X4 -> p (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty)) -> p (binrep (Power (Power (Power (Power Empty)))) Empty)) -> (~ p X4)) /\ (p (f X4) /\ ((~ setsum_p X2) -> (~ TransSet (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty)))))))) /\ PNoEq_ (f (Inj1 X3)) (fun X5:set => ((TransSet X5 -> (X5 :e Inj1 X3)) /\ (set_of_pairs X3 -> atleast6 X2)) -> (~ TransSet (binrep (Power (Power (Power (Power Empty)))) (Power Empty)))) (fun X5:set => ((p X3 -> (~ SNoEq_ X4 X3 X4)) /\ (~ p X4)))) /\ ((((~ p (f (f (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)))))) -> (~ atleast6 X4)) -> p Empty) /\ p Empty))) -> p X3)) /\ TransSet X3)) -> p (Power (Inj0 X4))))) /\ (~ p X2)) /\ (((p (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) /\ (~ p (Inj0 X2))) /\ exactly2 (binrep (Power (Power (Power (Power Empty)))) Empty)) -> (~ p X4)))) -> atleast6 X3))))) -> ((((((~ p Empty) -> (~ atleast3 (f Empty))) /\ ((~ p X3) -> (~ p X4))) /\ (~ SNo X4)) /\ ((~ p X3) /\ (~ p X2))) /\ ((p X4 -> (((p X2 /\ (((((~ atleast5 X4) /\ ((~ p (f (binrep (Power (Power (Power (Power Empty)))) Empty))) -> ((((~ TransSet X4) -> p X3) -> p X4) /\ ((~ exactly2 X4) /\ atleast4 X4)))) /\ atleast2 X4) -> (~ PNo_upc (fun X5:set => fun X6:set -> prop => (~ exactly2 Empty)) X4 (fun X5:set => (~ p (ordsucc X4))))) -> (~ p X3))) -> setsum_p X2 -> ordinal (f X4)) /\ (~ atleast6 (f (f X3))))) /\ (~ exactly2 X3)))) -> ((((set_of_pairs X3 /\ p X4) /\ ((((((p X4 -> ((((~ p X2) /\ ((((~ nat_p Empty) -> p (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)))) /\ p X4) /\ ((p X3 /\ p X2) /\ p X4))) /\ p (f X3)) /\ (p X4 /\ (~ p X4)))) /\ p X3) /\ p X2) -> (p X3 /\ atleast6 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty))) /\ ((((Empty c= binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty) /\ p (f X3)) -> ((exactly3 X3 /\ (p X3 -> atleast4 X4)) /\ (((~ atleast5 X4) -> (p X4 /\ ((((exactly5 X3 /\ (~ exactly3 X4)) /\ (tuple_p X2 X4 -> (((~ p X2) -> ((~ SNo X3) /\ (~ nat_p X2)) -> (p X4 /\ (~ atleast2 (Power (binrep (Power (Power Empty)) Empty))))) /\ exactly5 (f X4)) -> (exactly2 X4 /\ ((p (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))) -> ((atleast4 (proj1 (f X4)) /\ (~ atleast2 X2)) /\ p X4)) /\ exactly5 X2)))) -> ((~ atleast5 X2) /\ (~ p X2))) /\ ((~ (X3 = X2)) /\ (((((~ TransSet X2) /\ (ordinal X3 /\ (~ atleast3 (binrep (Power (Power (Power (Power Empty)))) (Power Empty))))) -> (~ p X4)) -> p Empty) -> (p X4 /\ (~ exactly3 (binrep (Power (Power (Power Empty))) (Power Empty))))))))) /\ ((p X2 /\ ((~ set_of_pairs X4) -> (~ p (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty)))) -> (p X4 /\ ((((nat_p Empty /\ (((((p (f (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)))) -> (((((~ p X3) /\ (((((~ atleast6 (f X3)) /\ (p (binrep (Power (Power (Power Empty))) Empty) -> ((exactly5 X3 /\ (~ p X4)) /\ ((p Empty -> ((atleast5 X3 -> ((exactly5 (f Empty) -> (set_of_pairs (binunion X2 X2) -> ((~ SNoLe X4 X2) /\ ((((ordinal X3 /\ ((~ p (binrep (Power (Power (Power Empty))) Empty)) /\ ((p X2 -> ((~ setsum_p (f (f X4))) /\ (X4 c= X2))) -> (~ ordinal X2)))) /\ (~ p (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty))) /\ p X2) /\ ((((p X2 -> (~ (X3 = binrep (Power (binrep (Power (Power Empty)) Empty)) Empty))) /\ ((~ p X2) /\ p X4)) /\ (((((~ atleast6 X4) -> ((~ p X4) /\ ((SNo X4 /\ ((~ p X3) -> (~ p X3))) /\ SNo (binrep (Power (Power (Power Empty))) (Power Empty))))) -> p (f (f (Power (binrep (Power (Power Empty)) Empty))))) -> (~ atleast5 X2)) -> (~ p X3))) /\ (~ p X3))))) -> atleast6 X4) -> exactly2 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty)) -> (~ reflexive_i (fun X5:set => fun X6:set => (~ atleast2 X6)))) /\ (((~ p (Inj0 X4)) /\ (~ atleast6 X3)) /\ ((p X4 /\ p X3) /\ (~ p X2)))) -> p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty)) /\ ((~ atleast4 X3) /\ (p X4 /\ ((~ p X4) -> ((~ p X4) /\ (~ SNo (ordsucc X2))) -> equip X3 (Union (binrep (Power (Power (Power Empty))) Empty))))))))) -> (~ p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))))) /\ (((((~ exactly4 X4) /\ ((((~ p X2) /\ (TransSet X3 /\ (~ SNo X4))) /\ (((exactly4 X2 -> p X4) /\ ((atleast2 (f (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty)) /\ (~ eqreln_i (fun X5:set => fun X6:set => (~ exactly2 X4)))) -> (~ SNoLe X3 X4))) /\ p (Power (binrep (Power (Power Empty)) Empty)))) -> (~ atleast6 (f (f X4))))) /\ ((((~ (X3 :e X4)) -> p X3) -> ((p X3 -> exactly5 X2) /\ (~ ordinal X3))) -> atleast2 (V_ (binrep (Power (Power (Power Empty))) Empty)))) /\ exactly3 X4) /\ (((((~ set_of_pairs X2) -> (p X3 /\ (((~ p (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty)) -> (~ atleast4 Empty)) -> (p X4 /\ (exactly4 X3 /\ p X3))))) -> ((~ atleast2 (f Empty)) /\ (~ nat_p X4))) -> (~ atleast3 X4)) /\ (set_of_pairs X2 /\ (((~ exactly5 (Pi X3 (fun X5:set => X4))) /\ (~ exactly3 (f (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)))) -> (~ atleast5 X2)))))) -> ((~ p X4) /\ (~ p X3)))) /\ (~ atleast4 X3)) /\ SNo X3) -> ((p (f X3) /\ p X4) /\ nat_p (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty))) -> atleast2 X3) -> ((p X3 /\ (((((atleast4 X3 /\ atleast4 (Inj1 X3)) -> ((((~ p (f X4)) /\ (~ exactly3 (f X3))) /\ (p (f (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty)) /\ p X4)) /\ (p X4 /\ (p X4 -> p X3)))) -> (~ p (f (f X4))) -> (SNo X4 /\ ((((~ p X2) /\ ((p X4 -> p X4) /\ (~ p X3))) -> ((((((((((~ p X4) -> p X4) /\ (~ set_of_pairs X4)) /\ (((~ (X2 :e binrep (Power (Power (Power Empty))) (Power Empty))) /\ nat_p (binrep (Power (Power (Power (Power Empty)))) Empty)) -> (~ p X2))) -> SNo_ (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) X2) -> (ordinal X3 /\ (~ p X2))) -> (~ set_of_pairs X2)) /\ TransSet X4) -> (~ p X4)) /\ ((p X3 -> (~ p (f Empty))) -> ((~ p X3) -> atleast3 X3) -> (~ p X4) -> (~ p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty))))) -> (~ atleast6 X2)))) -> p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty) -> (p X2 /\ (SNo X2 /\ (p X2 -> ((exactly3 X3 /\ (~ p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty))) /\ ((~ p X4) /\ ((p (binunion (Unj (f X4)) X2) -> exactly2 X4) -> (((p Empty -> (~ p X3)) -> ((((p (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty) /\ p X4) /\ (((((p X3 -> p X4) -> (~ atleast6 X3)) /\ (p X2 /\ p Empty)) -> (p X2 -> p (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)))) -> ((~ reflexive_i (fun X5:set => fun X6:set => ((binrep (Power (Power (Power Empty))) (Power Empty) :e X6) /\ p X3))) /\ (((((~ p X3) -> (atleast2 (Power (binrep (Power (Power Empty)) Empty)) /\ p (combine_funcs X3 X4 (fun X5:set => Empty) (fun X5:set => X5) X3))) -> (atleast5 X2 /\ ((irreflexive_i (fun X5:set => fun X6:set => (((((~ p X2) /\ ((~ nat_p (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)) -> p X5 -> p X6)) -> (((~ p (Union Empty)) /\ (~ p X6)) /\ ((~ SNoEq_ (Power (Power (Power (Power Empty)))) X6 X5) /\ (p X4 -> atleast6 (Power (Power (Power (Power Empty)))) -> (~ (X5 = X6)) -> (~ reflexive_i (fun X7:set => fun X8:set => (~ p (binintersect X7 X7)))))))) /\ (((~ binop_on X3 (fun X7:set => fun X8:set => X8)) -> ((((~ p (f (proj1 X6))) -> (~ p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)))) /\ (p (Union X4) /\ ((p X6 /\ ((~ TransSet X5) -> (~ exactly2 X6) -> ((((binop_on (Power X5) (fun X7:set => fun X8:set => setexp (Power (binrep (Power (Power Empty)) Empty)) X7) /\ p (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)) /\ ((((~ nat_p X5) /\ p Empty) /\ (((p X2 /\ (((atleast2 X6 /\ ((p Empty /\ ((p (lam2 X6 (fun X7:set => binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (fun X7:set => fun X8:set => setsum X7 Empty)) /\ ((~ nat_p (Power X3)) -> linear_i (fun X7:set => fun X8:set => (~ atleast3 X7)))) -> (~ p X6) -> (p X5 /\ (~ p X5)))) /\ ((~ p X5) -> (((~ p X6) /\ (((atleast3 X5 /\ (exactly5 X4 /\ ((SNo X6 -> atleast6 X6 -> (~ exactly2 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty))) -> exactly3 X6))) -> (~ p (binrep (Power (Power (Power Empty))) Empty))) /\ (~ p X5))) -> p X6 -> ((exactly2 (f X6) /\ (((p X3 /\ ((~ p X6) -> (((p (Power (binrep (Power (Power (Power Empty))) (Power Empty))) /\ ((~ atleast2 X5) /\ ((~ p X4) -> (~ p X3) -> atleast6 X5 -> (~ PNoLt X6 (fun X7:set => (~ p (f X5)) -> atleast5 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty))) (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (fun X7:set => atleast3 X7))))) /\ (~ p (f X6))) /\ nat_p X5))) -> p Empty) -> (p (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))) -> (((~ p X5) -> (TransSet X3 /\ p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)))) -> (~ p Empty)) -> (((~ p X4) /\ (~ p X5)) -> (~ atleast6 X5)) -> ((~ p X4) /\ ((~ exactly2 X6) /\ (((((~ atleast4 (lam2 X5 (fun X7:set => X6) (fun X7:set => fun X8:set => X8))) -> (~ p X6) -> ((~ atleast4 X3) /\ p X5)) -> atleast5 X5) /\ ((~ p Empty) -> (set_of_pairs X6 /\ (~ p (Power (binrep (Power (Power Empty)) Empty)))))) -> exactly2 X6)))) -> (((p X5 -> (~ atleast3 X6)) /\ nat_p (f X6)) -> (~ set_of_pairs (SetAdjoin X6 X5))) -> ((~ ordinal (Power (Power (Power (Power Empty))))) /\ ((~ p X6) -> (~ TransSet (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty)))))) /\ (~ p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty))))) -> p X6))) -> (~ exactly2 X3)) /\ (~ atleast4 (f (f X6))))) -> (~ setsum_p X5)) -> p X6 -> ((((TransSet (f X5) -> ((~ set_of_pairs (proj0 X5)) /\ ((~ bij X5 (binrep (Power (Power (Power Empty))) Empty) (fun X7:set => X7)) /\ (~ exactly2 (binrep (Power (Power (Power (Power Empty)))) (Power Empty)))))) /\ p X5) -> atleast2 X4) /\ (~ p X3)))) /\ (~ p X5))) -> (((~ p X6) /\ (exactly4 X2 -> (~ p X2))) /\ (p X6 -> (~ p (f X5))))) /\ p Empty))) /\ ((exactly2 (Inj1 X2) -> p X6) /\ p X3)))) /\ (~ setsum_p (f X2)))) /\ (~ p X6))) /\ (((~ SNo X5) -> ((~ atleast6 X5) /\ p X4)) -> exactly2 X5))) -> atleast6 X3) -> ((((X2 :e X4) -> (setsum_p (f (Power (binrep (Power (Power Empty)) Empty))) /\ nat_p X2)) -> (~ TransSet X3) -> p X4) /\ (~ exactly4 X3))))) /\ (SNo Empty /\ (~ TransSet (f (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty))))) -> (~ nat_p X3)))) -> p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)))) -> ((~ p (f (f X4))) -> ((~ TransSet Empty) /\ (exactly2 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) -> ((~ p X4) -> atleast5 (ordsucc X4) -> (~ p X3)) -> ((p X4 /\ ((((~ TransSet X2) /\ atleast5 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty)) -> p X3) -> p X2)) /\ ((((~ exactly5 (binrep (Power (Power (Power Empty))) (Power Empty))) /\ p (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty)) /\ ((~ p X2) /\ (~ p (f X2)))) -> (~ exactly5 (f Empty))))))) -> (~ SNo_ X3 X4)) -> ((((~ p (f X3)) -> (~ p X2) -> (~ linear_i (fun X5:set => fun X6:set => atleast4 X3)) -> (~ exactly4 X4) -> (~ p (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty))) /\ ((exactly4 X2 -> (~ atleast5 (f X2))) /\ (~ p (binrep (Power (Power (Power Empty))) Empty)))) -> (~ p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty))) -> exactly5 X4) -> ((~ p X3) /\ exactly4 X4)) /\ (TransSet Empty -> exactly3 (f X3) -> p X3))))) -> p Empty)))) -> (((((~ p (Power X4)) /\ ordinal Empty) /\ ((~ p (f X3)) -> ((exactly4 X3 -> (~ p (SNoLev X2)) -> ((~ p X4) /\ exactly5 X3)) /\ p (f X4)))) -> ((~ setsum_p (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty)) -> (p X3 /\ nat_p (Inj1 X3))) -> atleast3 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty)) /\ set_of_pairs (f X2)))) /\ (((((atleast6 X4 -> ((p X3 -> (((~ p X3) /\ (~ exactly5 X3)) /\ ((~ p X3) /\ p X2))) /\ ((~ p X4) /\ (~ ordinal (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty))))) -> ((~ atleast2 X2) /\ ((~ exactly4 (f (binrep (Power (Power (Power Empty))) Empty))) /\ (atleast4 X4 /\ (~ p (f (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))))))))) /\ (~ p (f X4))) /\ SNo_ X3 (binrep (Power (Power (Power (Power Empty)))) (Power Empty))) -> (((((((p (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty) -> (((p Empty -> (~ atleast5 X3) -> (((~ SNo Empty) /\ (~ exactly2 (ap (f Empty) X3))) /\ atleast4 X2)) -> ((~ nat_p (f Empty)) /\ (~ TransSet X3))) /\ p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))))) /\ (~ atleast2 (binrep (Power (Power (Power Empty))) Empty))) -> (~ exactly5 X2)) /\ tuple_p (f X4) (binrep (Power (Power (Power (Power Empty)))) Empty)) -> ((~ atleast5 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty)) /\ (Inj0 (V_ X3) :e X3))) /\ exactly4 X3) -> (~ p X2)) -> (~ p X3)))) -> ((ordinal X4 /\ (~ p X4)) /\ p (f X3)) -> (p X3 /\ p X4)) /\ ((((~ atleast2 X3) /\ ((p X4 /\ (~ p X3)) /\ (p (f X4) /\ p X4))) -> ((((~ p X3) -> p X4) -> (~ (Power (binrep (Power (Power Empty)) Empty) c= Empty))) /\ (~ p (binrep (Power (Power (Power Empty))) (Power Empty)))) -> atleast4 (f X3)) /\ (((p X4 /\ ((~ p (f (Union (binrep (Power (Power (Power Empty))) (Power Empty))))) -> p X3)) /\ ((((~ exactly2 (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty)) /\ p X4) -> p (V_ X3)) /\ (((~ p X3) /\ ((~ p (f Empty)) -> p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) -> (~ p (SNoLev X4)) -> totalorder_i (fun X5:set => fun X6:set => (~ p X4)))) -> atleast3 (f X2)))) /\ p X3))) -> (SNo X3 /\ ((ordinal Empty -> ((((X4 :e f X4) -> p X4) /\ ((p X2 /\ (~ linear_i (fun X5:set => fun X6:set => (~ p X5) -> (~ p (Power (binrep (Power (Power Empty)) Empty)))))) -> (~ atleast5 Empty) -> (p Empty /\ (p X3 /\ (~ SNo X4))))) -> (~ p X4) -> p X4) -> (~ atleast6 X3)) -> (~ exactly2 (f X4)) -> (~ atleast5 X2))))) /\ (p X2 /\ atleast4 X2)) -> p X4) /\ ((~ p X3) /\ p X3)))))) -> (p X4 -> (~ p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty))) -> (~ ordinal X2)) -> (~ p X4))) /\ TransSet X3)) -> (~ p (f (Sing (f X4))))) /\ (~ p X2)) -> (~ atleast6 X4)) /\ p Empty) /\ (p X4 /\ (atleast2 X3 -> (p (f X4) /\ (~ p Empty)))))) /\ p (f X2))) /\ (X3 :e f X3))) /\ (p X4 /\ ordinal X3)) /\ (~ p X4)) /\ (p Empty /\ (((((((~ setsum_p X4) -> (~ p X3)) -> (~ setsum_p X3) -> (((p Empty /\ p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty))) -> (((set_of_pairs X4 /\ (set_of_pairs (f X4) /\ (~ TransSet (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty)))) -> (~ p X3)) /\ (~ p X2))) /\ (~ setsum_p (binrep (Power (Power (Power (Power Empty)))) (Power Empty))))) -> ((p X3 -> (~ atleast4 Empty)) /\ ((~ p X4) /\ ((~ p (Inj0 X2)) /\ (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty :e add_nat (f X4) X4))))) -> ((~ exactly5 X2) /\ (p X3 -> p (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty)))) /\ ((~ p X4) -> (~ exactly5 X4))) -> (~ atleast5 X3)))) /\ ((atleast5 (f X4) -> (p X2 /\ p X4)) -> (~ exactly3 X3) -> (p X2 /\ p X3)))))) -> (atleast2 (binrep (Power (Power (Power Empty))) (Power Empty)) /\ (exactly5 (f (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)))) /\ ((~ p (f X3)) -> ((~ equip Empty X3) /\ (p (f Empty) /\ (~ atleast6 X4)))))) -> ((~ exactly2 X2) /\ ((((p (f X3) /\ (~ p X4)) /\ (p Empty -> ((((~ atleast6 X2) /\ p X2) -> (~ tuple_p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty) X3)) /\ ((p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) -> ((((((~ exactly5 X3) /\ ((p Empty -> (((~ reflexive_i (fun X5:set => fun X6:set => (~ (X5 :e binrep (Power (Power (Power Empty))) Empty)) -> ordinal Empty)) -> (~ atleast2 X3)) /\ (exactly5 X2 /\ ((~ nat_p X3) -> p X2)))) -> exactly3 Empty)) -> (~ exactly2 X4)) -> p X3) -> atleast4 X3) /\ atleast2 X4)) -> atleast3 (f X3))))) /\ p (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty)) -> (~ TransSet Empty)))))) /\ (set_of_pairs (f (SNoLev (V_ (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty))))) -> (~ p (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty))))) /\ (forall X2:set, forall X3:set, forall X4 c= X3, (~ p X4))) -> (forall X2:set, (exists X3:set, ((forall X4:set, (~ setsum_p (Power (Power (Power (Power Empty))))) -> (~ atleast2 X3)) /\ (p (f (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty)) /\ (exists X4:set, ((X4 c= X3) /\ p (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)))))) -> (exists X3:set, forall X4 c= f (f X3), (((~ p X4) /\ (p (f (SetAdjoin X3 X2)) -> ((~ p Empty) /\ (~ p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))))))) /\ p X4))).
admit.
Qed.

Theorem conj_Random2_TMPQeiDcSWUGZtPxMjdtCccgWih1SY7RWsn: (((exists X2:set, ((exists X3:set, forall X4 c= X2, ((~ exactly4 X4) /\ (p (f (f X3)) -> (~ p (binrep (Power (Power (Power (Power Empty)))) Empty))))) /\ (forall X3 :e f X2, forall X4:set, ((~ p X3) /\ atleast2 (f (V_ X3)))))) -> (forall X2 c= binrep (Power (Power (Power Empty))) (Power Empty), (exists X3 :e X2, (~ exactly3 X2)) -> ((~ SNoLt (f X2) (binrep (Power (Power (Power Empty))) Empty)) /\ (((((forall X3 c= f (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty), ((forall X4 :e binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)), p X3) /\ (~ atleast2 X3))) -> (exists X3 :e X2, atleast2 X2)) /\ p X2) /\ (exists X3:set, ((forall X4 :e X3, (~ tuple_p Empty (Power (Power (Power (Power Empty)))))) /\ (exists X4 :e X3, (~ exactly5 X4))))) -> (exists X3 :e Empty, (exists X4 :e Power (f Empty), (~ p (f X2))) -> (forall X4:set, ((p X3 /\ p X4) /\ ((((~ nat_p X2) /\ (~ p X2)) -> p X2) -> ((atleast2 (Power (binrep (Power (Power Empty)) Empty)) -> (~ p (f X4)) -> (((((((~ p X2) -> ((((~ p (Inj0 (f X2))) -> exactly5 X4) /\ (((atleast3 X2 /\ (~ p (f X4))) /\ atleast6 X4) -> ((exactly4 X3 -> (((atleast6 X4 -> (~ p (Power (Power (Power (Power Empty))))) -> set_of_pairs X2) -> ((~ atleast4 (f X2)) /\ (~ exactly3 Empty))) /\ SNo (f X3))) /\ (~ p X3)))) /\ ((~ p (Union X4)) -> SNo X2)) -> (~ exactly4 (Sing X4))) /\ (~ p (binrep (Power (Power (Power (Power Empty)))) Empty))) /\ exactly2 Empty) /\ ((~ atleast2 X2) -> p X2)) /\ (nat_p (add_nat X4 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty)) /\ ((p X4 /\ (exactly5 X3 -> p (Power (binrep (Power (Power Empty)) Empty)) -> (~ exactly3 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty)))) /\ (((~ p (binrep (Power (Power (Power (Power Empty)))) Empty)) /\ ((((((~ p X4) -> p X3) /\ (~ p X4)) -> (~ exactly5 X3)) -> (~ p X3)) -> ((~ p X2) /\ ((((~ ordinal X4) -> ((((~ exactly5 X2) -> p Empty) -> atleast5 (SNoLev Empty) -> (((((~ p X4) -> atleast2 X3) -> ordinal (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))) /\ (f X4 :e Empty)) /\ (~ p X4))) /\ ((p X2 /\ (~ SNo (binrep (Power (Power (Power Empty))) (Power Empty)))) /\ p (Union X2))) -> exactly3 (f X3)) -> ((~ p X4) /\ (~ exactly3 X3))) -> atleast4 X2)) -> ((~ p (Power (binrep (Power (Power Empty)) Empty))) /\ (p X3 -> (~ exactly4 X3))) -> exactly2 (f X4) -> (~ atleast3 (f X4)))) -> (~ TransSet (lam2 X3 (fun X5:set => X4) (fun X5:set => fun X6:set => X5))))))) -> ((~ atleast6 (binrep (Power (Power (Power (Power Empty)))) Empty)) /\ ((~ p (f X3)) /\ ((~ p X4) /\ (p (Union (f X3)) -> (~ p (Inj0 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))))))))) -> ((p X3 /\ (~ p X4)) /\ ((~ atleast2 (f (f X4))) -> (~ atleast6 X4) -> p X2))) /\ p X2))))))) -> ((exists X3:set, (p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty) /\ (f (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty) :e binrep (Power (Power (Power Empty))) Empty))) /\ ((~ ordinal X2) -> (exists X3 :e Empty, (((exists X4 :e f X3, (((X4 :e Inj0 (setexp X4 X3)) /\ ((ordinal X4 /\ atleast5 (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)) /\ atleast5 X4)) /\ atleast3 X3)) /\ ((exists X4:set, ((X4 c= X2) /\ (~ set_of_pairs X3))) -> (~ p Empty))) /\ ((~ p Empty) -> ((~ ordinal X2) /\ exactly2 X2))))))) -> (forall X2:set, (p (f X2) -> ordinal X2) -> atleast5 X2)) /\ (exists X2:set, (((forall X3 c= f X2, p X3) -> exactly1of2 (exists X3 :e binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty, (~ p (f (f X2)))) (exactly2 X2)) /\ (exactly4 (f X2) -> (forall X3:set, (exists X4:set, nat_p X3) -> nat_p X2) -> (forall X3 :e X2, exists X4:set, (p (f (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty)) /\ (((atleast4 X4 /\ p (binrep (Power (Power (Power Empty))) (Power Empty))) /\ reflexive_i (fun X5:set => fun X6:set => (~ p (binrep (Power (Power (Power (Power Empty)))) Empty)))) /\ ((tuple_p (Union (f X4)) X2 -> set_of_pairs (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty)) -> (~ atleast2 X4))))))))).
admit.
Qed.

Theorem conj_Random2_TMJ6yMYgzvLBD3qT143ug2VTWHLZahYdZad: forall X2 :e f (f Empty), exists X3 :e Empty, exists X4:set, ((X4 c= Power (Power (Power (Power Empty)))) /\ ((atleast3 X3 /\ (p (f (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty)) /\ (~ p Empty))) -> (~ exactly5 (f X3)))).
admit.
Qed.

Theorem conj_Random2_TMXMgHQ7TvmrNS88TQVYbCbXbwMbGY7T36S: forall X2 :e binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty, exists X3:set, ((forall X4:set, ((~ p X4) -> ((~ p (f X4)) /\ (~ p X3))) -> ((((((~ p X3) /\ p X3) /\ (X3 = proj0 (binrep (Power (Power (Power (Power Empty)))) (Power Empty)))) -> (~ atleast3 X3)) -> (~ p (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty))) /\ (((~ exactly4 (f (f X3))) -> atleast3 Empty -> p X3) -> ((~ p X4) /\ p X3)))) /\ (forall X4 c= X2, (p X2 /\ ((~ TransSet X3) -> (f (SetAdjoin X4 (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)))) :e Power (binrep (Power (Power Empty)) Empty)))))).
admit.
Qed.

Theorem conj_Random2_TMMX8iqTv81JwSzKhejqkRoUoXrrLymGYXc: ((exists X2:set, ((X2 c= Power (Power (Power (Power Empty)))) /\ ((forall X3 c= f X2, exists X4:set, ((((((~ exactly2 X2) /\ (~ exactly4 X4)) /\ p X2) -> (((~ p X4) /\ p X4) /\ ((setsum_p X3 /\ (~ p X4)) /\ p X2))) -> (((~ exactly3 (Inj1 X3)) -> (~ p X4)) /\ (((((p X3 -> (~ nat_p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty))) /\ (((~ p X3) -> (((exactly5 X3 /\ ((~ p (f (Inj1 X2))) -> (~ p X2))) -> ((((((~ SNo (f X3)) -> (~ p X3) -> ordinal X3) /\ (((SNo (f X3) /\ p (setsum X4 (UPair X4 X3))) -> p X2) /\ p (f X3))) /\ (~ nat_p X3)) /\ p X2) /\ atleast2 X2)) /\ exactly3 X2) -> nat_p (f X3)) -> (p X2 /\ ((((p X2 /\ (X4 :e X4)) /\ ((~ p (f X4)) /\ (~ binop_on Empty (fun X5:set => fun X6:set => X2)))) -> (((p X3 /\ (atleast6 (f (Repl (lam2 X4 (fun X5:set => X5) (fun X5:set => fun X6:set => X5)) (fun X5:set => X4))) /\ atleast5 X2)) /\ (((p Empty /\ (((p X2 /\ ((~ p (binrep (Power (Power (Power Empty))) (Power Empty))) /\ (exactly3 X3 -> ((((((((p X3 -> ((~ p (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty)) /\ p X4)) -> atleast5 X3) /\ exactly5 X3) /\ (~ p (f Empty))) /\ ((exactly5 X3 /\ symmetric_i (fun X5:set => fun X6:set => (~ atleast6 X3))) -> atleast3 X4)) /\ (((((atleast2 X3 /\ (((~ p Empty) /\ (ordinal X4 -> p X3)) -> atleast5 (Inj1 X4))) -> ((p X3 -> p X4) /\ p X3)) -> ((~ atleast6 Empty) /\ (~ exactly4 (f X3)))) /\ p X2) -> (p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty) -> SNo_ X3 X4 -> p X4 -> SNo X2) -> (~ p (Inj0 (SNoElts_ (f X3)))) -> exactly4 X4)) -> (((~ (X4 :e f X3)) -> (~ atleast4 X4)) /\ (((~ p X3) /\ (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty) :e X4)) -> (~ p X4)))) /\ ((p X2 -> (~ p (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty)) -> p (f (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))) -> ((((~ p X2) -> (~ p X2)) -> (~ atleast2 X4)) -> p Empty) -> (~ p (f X4)) -> (~ p X4)) /\ (SNoElts_ (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty) c= Empty)))))) /\ trichotomous_or_i (fun X5:set => fun X6:set => (~ atleast3 X4))) -> (~ exactly2 Empty))) -> (p Empty /\ ((~ exactly3 X3) /\ (~ nat_p X4)))) -> exactly2 X4)) /\ (~ setsum_p X3))) /\ (~ setsum_p X3))))) -> (~ p (binunion X2 X2)) -> (~ TransSet X3)) -> (~ exactly4 X4)) -> p X4)) -> p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty)) /\ p X4)) /\ (~ p (Inj1 (V_ X2)))))) -> (exists X2:set, ((X2 c= binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) /\ p Empty))) -> ((forall X2 :e f Empty, forall X3:set, (forall X4 c= X2, p X3) -> (forall X4 c= binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty), ((~ p (f X4)) /\ p (binrep (Power (Power (Power (Power Empty)))) Empty)))) /\ (((((forall X2:set, (~ reflexive_i (fun X3:set => fun X4:set => atleast5 X3)) -> (exists X3 :e f X2, exists X4:set, p X4)) -> (forall X2:set, ((exists X3:set, ((forall X4 c= X3, p X4) /\ ((exists X4:set, (((X3 = Sing X4) -> p X4) /\ p Empty)) -> p X2))) /\ (~ p (f (f X2)))) -> ((forall X3 c= X2, forall X4:set, (SNo_ X2 X4 -> nat_p Empty -> atleast3 X2) -> (exactly4 Empty /\ p X4)) /\ (forall X3:set, forall X4:set, SNoLe X3 (Inj1 (binrep (Power (Power (Power (Power Empty)))) (Power Empty))) -> p (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty))))) /\ (exists X2:set, (exists X3 :e X2, (forall X4:set, (((~ atleast2 (f X3)) -> (((p X4 -> (((~ p (Power X2)) /\ ((exactly3 (f (binrep (Power (Power (Power (Power Empty)))) Empty)) -> atleast6 X3) -> ((equip X4 X4 -> p X3 -> (~ p (binrep (Power (Power (Power Empty))) Empty))) /\ ((TransSet (f X4) -> (~ atleast2 X2)) -> (~ atleast6 X4) -> p X3)))) -> p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty))) -> (~ ordinal X3)) /\ (((~ TransSet X3) /\ ((~ p X4) /\ (((~ p X3) -> (~ p (f Empty))) /\ atleast3 Empty))) -> (p X4 /\ (~ p X4)) -> (~ atleast5 X3))) /\ (~ p (f X4)))) /\ (~ set_of_pairs X3)) -> (((~ p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))) -> (((((~ p X3) -> (~ p X4)) -> (~ exactly2 X2)) /\ (((~ p X4) -> ((((~ (X3 = X2)) /\ (~ p (f X3))) -> p (f X3)) /\ (atleast2 X4 -> (~ p (Power X2))))) /\ ordinal Empty)) /\ atleast2 X3)) /\ (~ p X4))) -> (forall X4:set, (((p X2 /\ atleast2 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))) /\ (~ p (f X4))) /\ ((((((atleast4 (f (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty)) -> (((((~ p X3) /\ (((((p X4 -> p X2) -> (TransSet (Inj1 X4) /\ ((atleast6 (f X4) -> (~ p X4) -> (~ p (binrep (Power (Power (Power Empty))) Empty))) /\ (~ exactly5 X4)))) /\ (((~ p (f X3)) -> ((~ atleast5 X4) /\ ((((~ p X4) -> (((~ nat_p X3) -> atleast4 X4) /\ (((((setsum_p (Union X4) /\ p (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)) /\ p X2) /\ (p (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty) /\ (~ TransSet X4))) -> ((~ SNoLe X4 X2) -> (~ exactly4 X4) -> (~ exactly5 X2) -> exactly3 (f Empty)) -> atleast3 (Power (binrep (Power (Power Empty)) Empty))) /\ ((~ atleast6 X4) -> exactly5 X4))) -> ((~ setsum_p X2) -> (p Empty /\ (((((p X4 -> atleast4 X4) -> atleast6 (setminus Empty X2)) /\ (((~ p Empty) /\ (~ eqreln_i (fun X5:set => fun X6:set => TransSet X3))) /\ tuple_p X3 X2)) /\ (SNo X3 /\ (~ atleast6 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty))))) /\ (((~ p (binrep (Power (Power (Power Empty))) Empty)) -> p X3) /\ (~ exactly2 (Power X3)))))) -> TransSet X2) -> p X4) -> atleast2 (Power (Power (Power (Power Empty)))))) -> ((~ p X4) /\ ((~ atleast4 X4) /\ set_of_pairs X3))) /\ (((~ ordinal X3) -> (((((~ exactly5 (binrep (Power (Power (Power (Power Empty)))) (Power Empty))) -> (~ p Empty)) /\ (p X2 /\ p (f (binrep (Power (Power (Power (Power Empty)))) Empty)))) -> p (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)) /\ (~ atleast6 X4))) /\ (((~ atleast2 X3) -> atleast6 X2) -> p X4 -> (~ equip Empty Empty))))) -> (~ atleast6 (f (f (f X4)))) -> (~ TransSet X4) -> reflexive_i (fun X5:set => fun X6:set => p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty))) -> (~ p X3)) -> atleast4 X4)) /\ p X2) /\ (~ p (ordsucc X3))) -> (~ exactly5 X3)) -> (~ p X3)) /\ exactly5 X3) -> (~ exactly5 X3)) /\ ((~ p X4) -> ((nat_p X3 -> (~ atleast2 X4)) /\ (p X4 /\ (~ nat_p Empty))))) -> p X3 -> (((~ atleast3 Empty) /\ (~ atleast6 X4)) /\ ((exactly2 Empty -> (~ exactly3 X4)) -> p (f X4)))) /\ p X3)) -> (~ atleast4 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty))) -> p X3)) -> (forall X3 c= f X2, (SNoLe X3 (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) /\ (forall X4:set, (~ atleast5 (f (f X3)))))))) -> (exists X2:set, ((exists X3:set, ((X3 c= X2) /\ atleast6 Empty)) /\ ((forall X3 :e UPair (f X2) (f (f X2)), exists X4:set, p (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty)) /\ (forall X3:set, (forall X4:set, p (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty)) -> ((exists X4:set, (((p X3 -> (~ p (f X4))) -> (((~ tuple_p X4 X3) -> (~ p X4)) /\ p X2)) /\ (((~ exactly5 (Inj1 (f X2))) -> (((~ p X4) -> (~ exactly4 X4) -> (p X4 /\ (~ p (Inj1 Empty)))) /\ ((p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty) /\ (((~ p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty)) /\ p X2) /\ ((~ p X4) /\ p X4))) /\ (((~ p X4) -> (((~ TransSet X2) -> (reflexive_i (fun X5:set => fun X6:set => (atleast5 X6 /\ (((~ p (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty)) -> (((atleast2 X6 /\ (((((~ p X5) /\ (p X6 -> PNo_downc (fun X7:set => fun X8:set -> prop => (((X8 X7 -> (~ setsum_p X7)) -> (((((~ X8 X6) /\ (~ X8 (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty))) -> X8 X6) /\ ((~ X8 X6) /\ (((~ exactly4 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty))) /\ set_of_pairs X6) /\ ((~ p (f X7)) -> p (Power (binrep (Power (Power Empty)) Empty)))))) -> (atleast2 (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty) /\ (~ X8 X6)) -> ((~ p (proj0 (f (SetAdjoin X7 X6)))) /\ (atleast2 (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty) -> p X6)) -> (((~ X8 X7) /\ (X8 X3 -> (~ X8 (binrep (Power (Power (Power (Power Empty)))) (Power Empty))) -> exactly3 X7 -> (~ equip (f (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty)) X7))) /\ ((X8 X6 /\ p (f (f (Power (binrep (Power (Power Empty)) Empty))))) /\ (~ atleast6 (Sing X6))))) -> (~ X8 X2)) /\ (~ p X6)) -> p X7) (f X5) (fun X7:set => atleast5 X5))) -> SNoLe (V_ (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)) X6) -> (((~ atleast4 X2) -> (~ SNo X2)) /\ TransSet Empty)) -> eqreln_i (fun X7:set => fun X8:set => nat_p X8) -> p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)))) -> (~ p X5)) -> (exactly3 X2 -> (((set_of_pairs X4 /\ (~ p Empty)) /\ p (f X2)) /\ (~ p X4))) -> (~ (f X6 :e X5))) -> ((p X5 -> ((Empty = binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))) -> (~ atleast6 X2)) -> p X6) /\ per_i (fun X7:set => fun X8:set => (((((p (binrep X7 X7) -> p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) -> ((((~ p X7) -> (~ p X8)) /\ (~ p (f (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty)))) /\ (~ p X8))) /\ exactly3 Empty) -> p X8) /\ p X2) -> set_of_pairs X6) -> ((p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty) -> (atleast3 X7 /\ ((~ exactly5 X7) /\ (((~ atleast2 X7) /\ (~ p (binrep (Power (Power (Power Empty))) (Power Empty)))) /\ (ordinal (proj0 (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty)) -> p X7))))) /\ (~ p X8))))) /\ (((~ exactly4 X6) -> (~ SNo_ X4 X6)) /\ ((~ p (setminus X5 X4)) /\ (p (f X5) -> ((~ p X6) /\ (~ p X6)))))))) /\ (((~ inj X3 X3 (fun X5:set => X4)) -> p X3 -> SNoLt (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) X3 -> (~ p X3) -> set_of_pairs Empty) -> (~ setsum_p X3)))) /\ (~ atleast2 X3)) -> ((~ TransSet X2) /\ (~ p X3))) -> ((p X4 -> exactly2 X4) /\ (p (f (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)) -> p X3 -> ((((~ p Empty) /\ (~ setsum_p X4)) -> (((((~ p (Power (binrep (Power (Power Empty)) Empty))) /\ (~ exactly2 X2)) -> ((atleast4 X3 /\ (((~ exactly2 X2) -> (~ p Empty)) /\ ((((((p X2 /\ atleast4 X4) /\ p X3) /\ (((~ p X4) -> ((exactly5 X4 /\ (nat_p X4 /\ ((~ SNo (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)))) -> (p X3 /\ (exactly5 Empty -> (~ p X3)))))) -> (p X4 -> setsum_p (Power (Power (Power (Power Empty)))) -> p (f (f (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty)))) -> (~ p (V_ X4))) -> (~ p X2)) /\ (~ p (famunion X3 (fun X5:set => X5))))) /\ (((~ p (f X4)) -> (~ p X4)) -> p Empty -> (~ atleast3 (f X4)))) /\ (~ set_of_pairs (f (f Empty)))) /\ ((~ PNoLt_ (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty) (fun X5:set => (~ p X4)) (fun X5:set => p X5)) /\ (((~ atleast6 Empty) /\ (((~ SNoLe X2 X3) -> (p (Power (Power (Power (Power Empty)))) /\ p (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty))) /\ ((((((((~ ordinal X4) -> atleast4 X3 -> exactly4 X2 -> (((~ atleast6 (binrep (Power (Power (Power (Power Empty)))) (Power Empty))) /\ ((((nat_p X3 -> p X4) -> (~ p X2)) /\ p X4) /\ (((~ p (If_i ((~ p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty))) /\ ((~ p X3) -> p X4)) X2 Empty)) /\ ((~ nat_p (Inj0 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty))) -> (((~ TransSet X3) -> setsum_p (Power (binrep (Power (Power Empty)) Empty))) /\ ((((~ p X4) /\ ((((~ transitive_i (fun X5:set => fun X6:set => ((~ atleast4 Empty) /\ atleast4 (Power (binrep (Power (Power Empty)) Empty))))) -> atleast6 X3) -> ((p (f X3) /\ (p Empty -> p (SNoLev (f X4)))) -> p X3 -> (((~ atleast3 X4) -> (~ atleast3 X2)) /\ (((((~ p (Inj0 Empty)) -> (~ p X3) -> (((~ bij X3 (Inj1 (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty)) (fun X5:set => X2)) /\ (~ p X3)) /\ (~ p X4))) /\ ((nat_p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) /\ ((~ exactly4 X2) -> (~ p X4))) /\ ((~ atleast6 X2) /\ ((~ p (f X4)) -> atleast2 (Power (Power (Power (Power Empty)))))))) -> ((~ p X3) /\ ((exactly4 X4 -> (~ atleast4 (V_ (SNoLev X3))) -> (~ (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty) c= X3))) -> p (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty)))) -> (~ atleast4 X4)))) -> (~ atleast5 (binrep (Power (Power (Power (Power Empty)))) Empty)) -> atleast2 X2) -> (((~ exactly2 X3) -> (~ p X4)) /\ (((((((atleast2 X3 /\ (((((((~ exactly2 (SetAdjoin X4 X2)) /\ TransSet X4) -> setsum_p X3) /\ (((~ atleast6 X3) -> SNo X4) /\ (((~ p (f (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty))) -> (~ p X3) -> p (f (SNoLev Empty))) /\ (p (binrep (Power (Power (Power (Power Empty)))) Empty) -> nat_p X2 -> (~ exactly3 X3))))) /\ p (f (f X3))) -> ((((~ exactly4 X3) -> p (f (Union X2))) -> p X4 -> (atleast5 X3 /\ (atleast4 X4 -> (~ p X2)))) /\ (~ p X3))) /\ ((((~ p (f (f (f Empty)))) -> (~ p (f Empty))) -> p (f (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty))) /\ ((~ p X4) -> p Empty)))) -> (~ atleast5 X3)) /\ p X2) -> (~ atleast3 X2)) -> p X4) /\ (~ p X4)) -> (~ p (Unj X3)))))) -> exactly4 X2) -> (~ atleast3 X3))) -> ((p X2 -> (~ TransSet X4)) -> p X2) -> (p X2 /\ p X3))) -> ((~ p X4) /\ (~ setsum_p X2))))) /\ p X4)) /\ SNo X4) -> p X3) /\ p X3) /\ p X3) -> atleast2 X2 -> (~ nat_p (f (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))))) /\ atleast4 X3))) -> ordinal X2))))) /\ (TransSet X4 -> (~ p X3) -> p Empty -> (p (f X4) /\ (((exactly3 X3 /\ p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty)) -> ((~ p (f X3)) /\ ((p (Power Empty) -> (~ p X4) -> p X4) /\ (~ symmetric_i (fun X5:set => fun X6:set => (~ exactly3 X6)))))) /\ p X3)))) -> p X4 -> p Empty) /\ (~ atleast4 X3)) -> p X3) -> (~ exactly2 (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty))) /\ (((~ p X3) -> (~ atleast2 X3)) /\ (p X2 /\ (~ p X3)))))) -> exactly5 X2)))) -> exactly2 X2 -> ((p X4 /\ ((~ p (binrep (Power (Power (Power Empty))) (Power Empty))) -> (~ p X3) -> (((p (f Empty) /\ ((~ set_of_pairs (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)) -> p X4)) /\ (exactly5 (Sing X3) -> (~ p X4) -> (((exactly4 X2 /\ (~ p X3)) -> atleast2 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty))) -> (~ p (Power (binrep (Power (Power Empty)) Empty)))) -> p X2)) /\ ((~ p X4) /\ (~ p (f (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty))))))) /\ (exactly2 (binrep (Power (Power (Power Empty))) (Power Empty)) /\ p X2))))) /\ (exists X4 :e X2, exactly4 X2))))))) /\ (exists X2:set, forall X3:set, ((~ p Empty) -> (~ p X2)) -> (forall X4 :e Power (Power (Power (Power Empty))), (~ exactly5 X3))))).
admit.
Qed.

Theorem conj_Random2_TMMWEccyydreNAuWgWygSa5dDuVJ9cHj5Wr: forall X2:set, (exists X3:set, ((X3 c= X2) /\ ((exists X4:set, ((X4 c= X3) /\ SNo (f Empty))) -> ((exists X4 :e X3, (~ exactly2 (Power (Power (Power (Power Empty))))) -> ((tuple_p X3 X3 -> (p X2 /\ p X3) -> p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty)) -> exactly5 X3) -> p X3) /\ (exists X4 :e X3, (exactly3 X2 /\ TransSet X4))) -> (~ exactly2 X3)))) -> (~ exactly2 (Inj0 X2)).
admit.
Qed.

Theorem conj_Random2_TMbjdyUd4XPz6quxcA8NYxHn5Vbf4YN53rf: ((forall X2 c= Empty, (~ p X2)) /\ ((~ p (setprod (f (f (f (binrep (Power (Power (Power Empty))) Empty)))) (f (f (f (Power (binrep (Power (Power Empty)) Empty))))))) -> p (mul_nat (f (f (f (f (Power (Power (Power (Power Empty)))))))) (f (lam2 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) (fun X2:set => binrep (Power (Power (Power Empty))) Empty) (fun X2:set => fun X3:set => X3)))))).
admit.
Qed.

Theorem conj_Random2_TMV71qoSckWNSxU94bziT8W2e76njJZH2ru: forall X2 :e f Empty, forall X3 :e Empty, exists X4:set, ((X4 c= binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty) /\ (p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) /\ ((((~ atleast5 X4) /\ (atleast2 (f X2) -> (((atleast6 X2 /\ ((~ transitive_i (fun X5:set => fun X6:set => (p (binrep (Power (Power (Power Empty))) (Power Empty)) /\ (p X6 /\ (~ atleast5 X3))))) /\ p X2)) -> (~ atleast3 X4)) /\ ((((~ atleast6 (Union X4)) /\ p X3) /\ (p X3 -> ((~ setsum_p Empty) /\ ((~ TransSet (f X2)) -> (~ p X3) -> (SNo X3 /\ ((~ atleast3 X2) -> exactly2 X4)) -> p (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty))) -> ((~ p X4) -> (~ exactly2 (f (SNoLev X4))) -> (p X4 /\ p X3)) -> ((~ p (binrep (Power (Power (Power Empty))) Empty)) /\ ((~ nat_p (f X3)) /\ (X2 c= X4))))) /\ (exactly4 X3 /\ ((((~ atleast2 X2) /\ (~ TransSet (binrep (Power (Power (Power (Power Empty)))) (Power Empty)))) /\ ((~ exactly5 X4) -> ((exactly3 X4 -> set_of_pairs X4) /\ (~ p X3)))) -> (p X4 /\ (~ atleast3 X3)))))))) /\ (~ atleast2 X3)) -> exactly3 X4))).
admit.
Qed.

Theorem conj_Random2_TMVC1G2i7CViXQ1R67Xi4SQokZwdYRTy1Zz: ((exists X2:set, (exists X3:set, exists X4 :e f X2, (~ p X3)) -> ((forall X3:set, (forall X4 c= X3, atleast6 X4 -> exactly3 X4) -> (forall X4 c= binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty, p (f X3))) -> p X2) -> p X2) /\ (forall X2:set, atleastp X2 (f (f (f X2))))).
admit.
Qed.

Theorem conj_Random2_TMRdEJGEHCWPZtQefz5UNCZMAVhd7mWZeRi: exists X2 :e Empty, (exists X3:set, exists X4:set, ((X4 c= binrep (Power (Power (Power Empty))) (Power Empty)) /\ set_of_pairs X3)) -> (forall X3:set, exists X4 :e f (binrep (Power (Power (Power (Power Empty)))) Empty), SNo (f X4) -> ((~ atleast5 X3) /\ ((~ SNo X4) /\ (~ set_of_pairs X4)))).
admit.
Qed.

Theorem conj_Random2_TMXJqge8CEmRPs8tojd3CN5CBJcKPKNhcPu: (exists X2:set, forall X3 c= f (Inj0 Empty), (~ set_of_pairs X3)) -> (forall X2:set, ((forall X3:set, forall X4:set, ((~ p (Inj1 (f X3))) -> (~ p (f X4))) -> ((p X4 /\ (((exactly3 X4 -> (~ atleast3 (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty))) -> (((~ TransSet Empty) -> (~ p X2)) /\ (~ p X4))) -> (~ set_of_pairs X4))) /\ p X3)) -> (~ p (f X2)) -> (exists X3:set, exists X4:set, (p (f Empty) /\ (~ p (f X4)))) -> (forall X3 c= f (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty), forall X4:set, p X4)) -> (exists X3 :e X2, forall X4:set, p X3)).
admit.
Qed.

Theorem conj_Random2_TMWRBm4wx131FBdkF5yx2k9f9S7QdhN777h: ((forall X2:set, (exists X3:set, ((forall X4:set, p X4 -> ((~ p (binintersect Empty X3)) /\ ((((~ ordinal X4) /\ (~ p X4)) /\ atleast6 (f X3)) /\ (~ p (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty))))) /\ ((forall X4:set, (~ (X3 = X2))) /\ (exists X4 :e f (Power (binrep (Power (Power Empty)) Empty)), ((((nat_p X4 /\ ((((~ atleast4 X3) /\ (((p X2 -> (~ p Empty)) -> atleast3 X4) -> (~ p X3))) /\ ((~ atleast4 X4) /\ ((~ p X4) /\ SNo (f X2)))) /\ ((~ TransSet X4) -> exactly5 (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)))) -> (((TransSet X3 -> (TransSet X3 /\ (((~ atleast6 Empty) /\ ((SNo (f (binrep (Power (Power (Power (Power Empty)))) Empty)) /\ (~ p Empty)) /\ atleast5 X3)) /\ atleast2 X3))) /\ ((atleast3 X2 -> setsum_p X4) -> (~ (f X3 :e X4)))) /\ (~ atleast4 (Inj0 Empty))) -> p X3 -> ((((~ atleast2 (f X4)) /\ (~ setsum_p X3)) -> (~ TransSet X3)) /\ atleast3 X2)) -> atleast2 X3) /\ p X2))))) -> (~ p X2)) /\ (exists X2:set, ((~ p X2) -> (exists X3:set, ((exists X4:set, ((X4 c= X2) /\ (((~ p X4) -> atleast6 X2) -> atleast6 X4 -> exactly2 X4))) /\ (forall X4 c= f X3, p (binrep (Power (Power (Power Empty))) (Power Empty)))))) -> (exists X3 :e f (f (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty)), exists X4:set, ((X4 c= binrep (Power (Power (Power Empty))) (Power Empty)) /\ (((((~ exactly2 X4) -> (~ p (binrep (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))) X2))) -> atleast5 Empty) -> ((((~ p X3) -> p X3 -> p X4) /\ ordinal X2) /\ (((~ SNoLe Empty X3) -> (~ SNo (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))))) -> (~ p X2)))) /\ ((~ p (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)) /\ ((~ PNoLt_ (f X4) (fun X5:set => atleast5 X4) (fun X5:set => ((atleast3 X5 -> ((~ exactly4 X4) -> (p X4 /\ (~ p X5))) -> p (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty)) /\ (~ (X4 = binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty))))) -> atleastp Empty X4))))))).
admit.
Qed.

Theorem conj_Random2_TMS7mCxwiizTtY5Lwuzakkv4hGNCa11qfqv: exists X2:set, ((forall X3:set, (exists X4:set, (~ setsum_p (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty))) -> (forall X4 :e f X2, ((~ SNo (Inj0 (binrep (Power (Power (Power Empty))) Empty))) /\ ((((((atleast2 (f (SetAdjoin X3 X3)) /\ ((~ p (f X3)) -> p X3)) /\ (set_of_pairs X3 /\ (~ atleast4 (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty)))) -> (exactly3 X4 /\ p X4)) -> (((~ exactly4 (f Empty)) -> (~ p (f X4))) /\ (~ (f Empty c= f X3)))) -> atleast3 X4) -> ((((~ p (f X2)) /\ ((((~ equip X4 X3) /\ (p X2 -> ((~ exactly5 X3) -> ((~ atleast2 X2) -> (~ exactly4 X4) -> (p X4 /\ (~ p X4))) -> ((((~ atleast5 X4) -> (p X4 /\ (p X3 /\ ((((((((~ p (f X4)) /\ ((atleast6 X3 -> (~ atleast2 X4)) /\ (p X3 -> (p (f (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty)) /\ (p Empty /\ ((~ p (f X3)) /\ (~ p X3)))) -> p (f X2)))) /\ (~ (f X3 c= X4))) /\ (~ exactly2 Empty)) -> (~ exactly2 X3)) -> (SNo Empty /\ (~ exactly3 X2))) -> (~ p (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))))) -> (~ p (binrep (Power (Power (Power Empty))) Empty)))))) -> (~ atleast5 (f (f X3)))) /\ (~ p X3)) -> (~ ordinal X3)) -> (~ exactly5 X2))) -> (exactly3 (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) /\ (~ p X3))) -> (~ setsum_p (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty)) -> (~ (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty) :e binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty))))) /\ p X4) -> (exactly3 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) /\ (atleast3 Empty -> ((((((((~ p X2) /\ ordinal X2) -> (~ p (f X3)) -> ordinal Empty -> exactly4 X4) -> (~ p X3)) /\ ((~ SNoEq_ X4 X3 (V_ (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))))) -> (~ nat_p X2) -> nat_p (f X2))) -> p X4) -> (((~ atleast6 X3) -> (setsum_p X4 /\ (~ p X3)) -> equip (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty) X3) -> p (f (f (SNoElts_ X4)))) -> (~ p X3) -> exactly5 X4) /\ ((~ ordinal X2) /\ (~ ordinal (Power (Power (Power (Power Empty))))))))) -> ((~ p X4) -> p Empty) -> exactly5 (f (f X3))) -> ordinal (f (f X4)))))) /\ (forall X3 c= X2, exactly4 X3)).
admit.
Qed.

Theorem conj_Random2_TMPYNwhbQorzG2SfqPYGpcCnseRPBz2FXQS: forall X2 c= UPair Empty (binrep (Power (Power (Power (Power Empty)))) Empty), forall X3 c= X2, (exists X4:set, p X4) -> ((exists X4:set, ((((atleast3 X2 /\ (~ ordinal (SetAdjoin (binrep (Power (Power (Power Empty))) Empty) (f X3)))) /\ (~ p X4)) -> (~ p X4)) /\ (~ exactly4 X3))) /\ (forall X4:set, ((setsum_p X4 -> ((~ p X3) /\ (~ p Empty))) /\ p X3))).
admit.
Qed.

Theorem conj_Random2_TMbFAB9NWVD6oGWcY8UsmhPtC3SSiBtGKiL: (exists X2:set, (~ nat_p (f X2))) -> (~ nat_p (binrep (Power (Power (Power (Power Empty)))) (Power Empty))) -> (exists X2:set, ((p X2 /\ (forall X3 c= X2, exists X4:set, ((((~ set_of_pairs X2) -> (~ exactly2 Empty)) -> ((~ p X4) -> ((((~ atleast6 X4) /\ p X4) /\ ((X3 c= X4) -> exactly3 (binrep (Power (Power (Power (Power Empty)))) (Power Empty)))) /\ (p (Power (binrep (Power (Power Empty)) Empty)) /\ ((~ atleast3 X4) -> ((p X2 -> p Empty) /\ p X4))))) -> (~ p (f X3))) /\ (exactly5 X3 -> (~ p X4) -> (~ atleast4 X3))))) /\ (forall X3:set, ((forall X4 :e Union X2, p X4) /\ ((exists X4 :e X3, (~ p X2)) /\ (~ ordinal (binrep (Power (Power (Power Empty))) (Power Empty)))))))) -> (~ nat_p (Power (Power (Power (Power Empty))))).
admit.
Qed.

Theorem conj_Random2_TMN9nY682pCS7GXEeTiwzymtv28oF3XPdvz: ((forall X2 c= f (f (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))), forall X3 c= X2, (((p X2 -> (exists X4 :e X2, (~ equip X4 X3))) -> exactly3 (f (f X2))) /\ (~ atleast2 (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)))) /\ (exists X2 :e f (f (binrep (Power (Power (Power Empty))) Empty)), forall X3 c= binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty), (~ atleast6 (f Empty)))).
admit.
Qed.

Theorem conj_Random2_TMQiZQ7WErxANZTYtiZwBDCJXwoZgBm3yDD: exists X2:set, ((forall X3 :e f (SNoElts_ (f (Unj X2))), p X3 -> (forall X4:set, (~ p (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)))) -> (~ p X4))) /\ ((exists X3:set, ((X3 c= X2) /\ (exists X4 :e Empty, ordinal X3 -> (~ p X2)))) /\ (exists X3:set, forall X4 :e X3, (~ ordinal X4)))).
admit.
Qed.

Theorem conj_Random2_TMXeHnkNWWwhnNEP5rQwxqewGcPEqVnoV4G: forall X2 c= binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty), (exists X3:set, ((X3 c= f X2) /\ (forall X4 c= binrep (Power (Power (Power Empty))) (Power Empty), ((~ setsum_p (Power (Power (Power (Power Empty))))) /\ ((exactly4 (f X3) /\ exactly5 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))) -> (~ (Empty :e X3)) -> (~ exactly3 X4) -> (~ p (f X4)))) -> equip X4 X2))) -> (forall X3 :e X2, forall X4 c= f X3, p X4 -> p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty))).
admit.
Qed.

Theorem conj_Random2_TMN5Xm2eHAY3kLFjw3Q1cbEXhcSz862Hq1m: ((forall X2:set, (~ p (f (f (Union X2))))) /\ PNo_upc (fun X2:set => fun X3:set -> prop => (~ p X2)) (Inj0 (f (binrep (Power (Power (Power Empty))) (Power Empty)))) (fun X2:set => forall X3 c= f (proj1 X2), exists X4:set, ((X4 c= f X3) /\ ((p X3 -> (~ exactly5 X3)) -> (~ p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))))))).
admit.
Qed.

Theorem conj_Random2_TMKr4pTxDhvU9BLyvNhUV52MytFFAs73jti: forall X2:set, ((exists X3 :e X2, exists X4:set, exactly3 X2 -> ((p Empty -> (~ atleast2 X2)) /\ p X4)) /\ (exists X3:set, forall X4 c= Empty, ((((~ exactly5 (Inj1 (Power (setminus (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))) (binrep (Power (Power (Power (Power Empty)))) (Power Empty)))))) /\ ((~ p X3) -> exactly5 X3)) -> set_of_pairs X4) /\ (((((~ antisymmetric_i (fun X5:set => fun X6:set => atleast6 (binrep (Power (Power (Power (Power Empty)))) Empty) -> (ordinal X5 -> (~ exactly2 X4)) -> (p X6 /\ ((~ p X5) -> exactly3 X2)))) -> (~ ordinal X4)) -> (((~ p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty))) -> (exactly4 (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty) /\ ((~ SNo_ X4 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty))) -> p (SNoLev X3)))) /\ (p X2 -> (~ atleast3 X2)))) -> inj (f X4) (binrep (Power (Power (Power Empty))) (Power Empty)) (fun X5:set => X4)) -> atleast6 (add_nat X3 X4))) -> SNo X3)).
admit.
Qed.

Theorem conj_Random2_TMHYFfuvw99w4ZqQa68ACxYUmkU5JcsvpS1: (((forall X2 c= f (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)), forall X3:set, tuple_p (f X3) X3) /\ (exists X2:set, ((X2 c= f (f (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty))) /\ ((~ atleast6 X2) -> (exists X3:set, ((exists X4:set, (~ TransSet (binrep (Power (Power (Power (Power Empty)))) Empty))) /\ (exists X4:set, (~ atleast2 X2)))))))) /\ (forall X2:set, (forall X3:set, ((exists X4:set, ((X4 c= binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty) /\ (p X2 /\ (~ p (Power X3))))) /\ ((forall X4:set, ((~ setsum_p (binrep (Power (Power (Power Empty))) (Power Empty))) /\ ((p Empty -> atleast5 (f (f (f X2)))) /\ (nat_p (UPair (SetAdjoin (Union X3) X4) X3) -> (exactly3 X3 /\ (atleast6 X4 /\ (~ atleast6 (f X2)))))))) -> exactly5 Empty))) -> (exists X3 :e binrep (Power (binrep (Power (Power Empty)) Empty)) Empty, p (f (f (binrep (Power (Power (Power Empty))) (Power Empty))))))).
admit.
Qed.

Theorem conj_Random2_TMLkyyrUGS7QoSAs3uK2Y7e7AcQBAD7BT9d: ((~ exactly3 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty)) /\ (exists X2 :e f (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty), exists X3:set, forall X4:set, ((~ p (f (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))))) -> ((~ p X4) /\ (((~ p X2) -> (((((~ exactly4 X2) -> SNo (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty)) /\ p X4) /\ ((exactly2 X3 -> exactly3 X3) -> ((((p Empty -> (~ (Empty :e X3))) /\ ((((atleast6 X2 /\ (~ ordinal (Inj0 (binrep (Power (Power (Power Empty))) Empty)))) /\ (~ atleast3 X4)) -> p X3) -> p (PSNo X3 (fun X5:set => (nat_p (f X5) -> (~ p X3)) -> (~ p X2))))) -> (~ exactly2 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty))) /\ p Empty) -> p X4 -> ((~ equip X4 X4) /\ p X3) -> (~ p (f X4)))) /\ ((~ exactly3 X4) /\ ((~ atleast6 X4) -> (exactly4 X2 /\ (~ p X2)) -> p X2)))) /\ ((p (f (binunion X2 X3)) /\ (~ binop_on X2 (fun X5:set => fun X6:set => X6))) /\ (~ p X4))))) -> ((~ exactly4 (f X3)) -> p X3) -> (~ p X3))).
admit.
Qed.

Theorem conj_Random2_TMR5A1tuXLavQtpC1wAYtnk8gMxhSbckZVp: (forall X2:set, forall X3:set, ((forall X4 c= X3, exactly2 X3) -> (forall X4:set, (((((~ atleast3 X4) /\ ((~ setsum_p X2) -> (~ ordinal X3))) -> TransSet Empty) -> (atleast2 (f (binrep (Power (Power (Power (Power Empty)))) (Power Empty))) /\ ordinal X4)) /\ ((((f (f Empty) :e f (f X2)) -> (~ p X2)) /\ (((~ p (f (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty))) /\ (((p (binrep (Power (Power (Power Empty))) Empty) -> (~ atleast6 (f X3))) -> p X2) /\ ((((~ p X4) /\ p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty)) /\ p X4) -> (~ p (f X4))))) /\ (((~ p X3) -> ((((((((p X4 /\ ((((~ p X3) /\ (~ p Empty)) -> TransSet X3) /\ (((~ p X4) -> ((~ p X3) -> (~ setsum_p X4) -> ordinal X3) -> (((~ ordinal X3) -> ((((p X4 /\ (exactly2 X2 /\ (~ p (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)))))) -> ((((~ p (binrep (Power (Power (Power Empty))) (Power Empty))) -> atleast5 X4) -> exactly3 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty))) /\ ((((~ p X2) -> (((~ p Empty) -> ((((exactly2 (f X4) /\ ((~ p X3) /\ ((atleast4 X2 -> (exactly2 (f X2) /\ (((~ (X4 :e X4)) /\ p X3) -> (atleast2 X2 /\ (p (f X2) -> (~ p X4) -> ((p X3 /\ (p X2 /\ (~ atleast4 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty)))) /\ ordinal X3))))) -> (~ atleast6 X4) -> (~ exactly3 X4)) -> p X2 -> p (f (f X3))))) -> (((~ p X2) /\ p (Union (setprod (ordsucc X4) X3))) /\ (~ atleast3 (f X2)))) -> (~ (X3 c= X2))) /\ ((((((((~ p X4) -> p (Inj1 X3)) -> (~ ordinal (f (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty)))) -> ((~ TransSet (f Empty)) /\ ((~ SNo (Union Empty)) /\ p (f (binrep (Power (Power (Power Empty))) Empty))))) -> (~ p (binrep (Power (Power (Power (Power Empty)))) Empty)) -> SNo X4 -> ((p (Inj1 X2) /\ (~ TransSet X3)) -> ordinal (Power (Power (Power (Power Empty))))) -> ((p Empty -> nat_p X3) /\ exactly2 X2)) /\ (((~ p Empty) /\ p X2) -> setsum_p X4)) -> p (Power X3)) -> (~ p X3)))) /\ ((((~ ordinal (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)) /\ (((~ p Empty) -> (~ ordinal X4)) /\ (exactly5 X4 -> ((((p Empty -> (X4 :e X4)) /\ (~ exactly3 (f Empty))) -> (~ PNoLt X2 (fun X5:set => ((~ p X5) /\ ((((((((~ ordinal X4) /\ ((~ exactly3 (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty)) -> ((PNoLt_ X4 (fun X6:set => ((((~ atleast4 X6) /\ (~ atleast2 X6)) /\ ordinal (f Empty)) /\ ((((X4 :e Inj1 Empty) /\ (((~ p X6) -> (~ atleast4 X5)) /\ atleast4 X5)) /\ atleast3 X6) /\ (((((((~ p X6) /\ (~ p X3)) -> (~ p (V_ X5))) /\ ((~ exactly3 X6) -> p (binrep (Power (Power (Power Empty))) Empty) -> ((~ p X5) /\ ((p (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty) -> p X5) -> atleast4 X5)))) -> ((~ p X6) /\ nat_p X3)) /\ (p X6 /\ p (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty))) -> p X5))) -> (((X4 = X3) -> (~ p (binrep (Power (Power (Power (Power Empty)))) (Power Empty)))) /\ (p X5 -> p X5))) (fun X6:set => p X5) -> ((~ TransSet (Power X4)) /\ ((((atleast3 X5 /\ atleast6 X4) -> p X3 -> ((~ p X4) /\ (((((~ p Empty) -> (~ p X2)) /\ (~ p X3)) -> (p X5 /\ (SNoLt X5 X3 -> ((~ atleast6 X5) /\ p X4)))) /\ (((~ p X5) -> (~ p X4)) /\ (~ p X4))))) -> ((~ p (Sing X4)) /\ (~ p Empty)) -> p X4) -> ((~ p X4) /\ (((~ TransSet X4) /\ (atleast6 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) /\ (~ p X3))) -> (~ p (f X2)) -> p X4 -> ((~ p X4) /\ (~ p X5))))))) /\ exactly2 X3))) /\ (((p (V_ Empty) /\ (p (binrep (Power (Power (Power Empty))) Empty) /\ ((~ atleast3 X5) /\ (p X4 /\ ((~ exactly3 X3) -> exactly3 X5))))) /\ (~ exactly2 X3)) -> (p (SNoLev X4) /\ (((((~ p X4) /\ (setsum_p X5 /\ (~ set_of_pairs X5))) /\ p X5) -> (((atleast3 X4 /\ ordinal Empty) /\ (exactly2 X5 /\ (((p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) /\ (((p X5 /\ (~ p X4)) /\ (((~ exactly3 X3) /\ (~ (Empty :e X3))) -> (p (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) /\ ((~ p X2) -> (~ symmetric_i (fun X6:set => fun X7:set => TransSet X7 -> exactly5 X7 -> (~ SNo (f (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))))))))))) /\ (((~ p (SNoLev (setprod (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty) X5))) /\ ((TransSet X3 /\ (exactly5 X5 /\ ((~ TransSet X4) -> exactly3 X5))) /\ ((((((~ p X4) /\ (((~ p X5) -> p X4) -> p X3)) -> (((~ atleast4 X4) /\ (((~ exactly2 X4) /\ (exactly5 Empty /\ exactly2 X4)) -> (~ PNoEq_ Empty (fun X6:set => ((p X6 /\ (atleast3 X2 -> p X3)) /\ (((((atleast2 X6 -> (~ exactly3 X5)) /\ (((((~ nat_p X6) -> p X5 -> (((((SNo X5 -> (~ atleast2 (f (Power (Power (Power (Power Empty))))))) -> (((~ atleast5 X5) /\ ((atleast4 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty) /\ ((TransSet Empty -> p X6) /\ ((~ atleast3 X6) /\ p (Power (binrep (Power (Power Empty)) Empty))))) -> (~ p X5))) -> (~ p X6)) -> (~ ordinal X4) -> irreflexive_i (fun X7:set => fun X8:set => ((exactly5 X8 /\ (~ SNo Empty)) /\ ((nat_p X8 /\ ((p X7 /\ (~ atleast2 X7)) -> (((~ p (binrep (Power (Power (Power (Power Empty)))) (Power Empty))) /\ (~ p X7)) /\ (~ p X7)))) -> p X8)) -> (~ p X3)) -> (p X5 /\ (TransSet (proj1 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty))) -> (~ exactly5 X5))) -> setsum_p (f Empty)) /\ (~ nat_p (Power X5))) /\ ((((atleast5 X6 -> p X5) -> (~ atleast4 Empty)) /\ (~ p (binunion (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) (f X3)))) -> (~ setsum_p X2) -> nat_p X6)) /\ (~ p X6))) /\ (((exactly2 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty) /\ (((atleast4 X3 -> p Empty) -> exactly5 X6) /\ ((((((~ exactly3 X5) -> exactly2 X5) /\ (~ p (SetAdjoin (ordsucc (f X6)) X6))) /\ (atleast6 X6 -> (((~ atleastp X6 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))) -> ((p X5 /\ ((((atleast5 X6 /\ (SNo X6 /\ (~ p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))))) /\ ((exactly5 Empty -> (~ p X5)) /\ ((((((~ exactly3 X6) /\ (p (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))) -> ((p X6 /\ (~ reflexive_i (fun X7:set => fun X8:set => (ordinal X8 /\ ((~ p X8) -> (~ p X8)))))) /\ p (f X5)))) /\ (~ p X5)) -> (~ atleast3 X3)) -> atleast2 Empty) /\ ((p X4 /\ (~ p X3)) /\ (~ p X5))))) -> p X6 -> (~ exactly3 X5)) -> (~ p Empty))) /\ (atleast4 X6 /\ (~ p X5)))) -> nat_p X5 -> p (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty)) -> (~ atleast3 X6) -> (~ atleast6 X2))) /\ ((~ ordinal (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)))) /\ (~ p X6))) -> (((~ p X5) /\ ((X6 :e X6) -> ((~ exactly3 X5) /\ p X5))) -> (~ atleast4 (f (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty))))) -> (~ p X6) -> (atleast4 X5 /\ ((~ TransSet (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty))) -> ((p X5 /\ ((ordinal (f X6) -> p X5) /\ (~ nat_p X6))) /\ ((((~ p X6) /\ (p X5 /\ (p (f Empty) /\ p (binrep (Power (Power (Power Empty))) Empty)))) /\ ((~ p Empty) -> (~ atleast5 X2) -> ((~ setsum_p X3) /\ p X5))) -> (~ atleast2 X6)))))))) -> (~ p X2)) -> (~ bij X2 X6 (fun X7:set => binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty))))) -> (~ p X6) -> p (f (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty))) /\ ((eqreln_i (fun X7:set => fun X8:set => p X2) /\ (~ p X6)) /\ (~ p X5)))) -> (~ p X3)) /\ (~ p X5)) -> p (f X5)))) (fun X6:set => (~ exactly2 X6))) -> ((~ p X4) -> (~ exactly3 X2) -> (atleast3 X3 -> ((~ atleast2 X4) /\ p (f X4))) -> ((((((~ p X5) /\ (atleast4 X5 /\ (~ p (In_rec_i (fun X6:set => fun X7:set -> set => Power (Power (Power (Power Empty)))) X5)))) /\ (~ p X4)) /\ (~ p (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty))) -> (~ p X5)) /\ p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty)) -> atleast6 Empty) -> (p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty) /\ ordinal X3))) /\ (((~ atleast5 (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty)) -> (((~ (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty :e X4)) /\ (~ ordinal X5)) /\ (~ p X3))) -> p (binrep (Power (Power (Power Empty))) (Power Empty))))) -> (((equip (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty /\ SNo X4) -> (~ p X5)) /\ ((~ ordinal X5) /\ (~ atleast3 (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))))))) -> (~ p Empty)) -> (~ nat_p X4)))) /\ (~ p X5)))) /\ p X3) /\ (~ SNo (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))))))) /\ atleast2 X2)) /\ (~ p X3))))) /\ (p X4 -> (~ p (Power X5)))) /\ (~ p (f X3))) /\ (~ p X3)) /\ exactly4 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))) -> ((((~ exactly2 X4) /\ (~ p X5)) /\ TransSet Empty) /\ p X5) -> (~ p (Power X3)))) -> (~ p X3)) X2 (fun X5:set => (((~ exactly4 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty)) /\ ((((((~ exactly4 X5) -> (((~ atleast4 X4) -> ((~ set_of_pairs X5) /\ (~ p Empty)) -> p (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty)) /\ (p (Power (binrep (Power (Power Empty)) Empty)) -> (~ p X3) -> ((~ p X2) -> ((~ atleast2 (f X3)) /\ p X3)) -> per_i (fun X6:set => fun X7:set => (~ atleast6 (ordsucc X7)))))) -> (~ p X4) -> atleast3 X4) -> p X4) -> (~ set_of_pairs X3)) -> ((p (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty) /\ (X3 :e X3)) /\ ((tuple_p (In_rec_i (fun X6:set => fun X7:set -> set => X6) X5) X3 /\ atleast4 X5) /\ p X4)))) /\ (~ p Empty))))) /\ (~ p X3))))) /\ p X2) -> p X2))) /\ ((~ p X4) /\ (~ p (Power (binrep (Power (Power Empty)) Empty))))) /\ p (binrep (Power (Power (Power Empty))) (Power Empty)))) -> exactly2 X3 -> (~ p X3)) -> atleast2 X4) -> p X4) -> (exactly3 (f X3) /\ p (f X4)) -> (symmetric_i (fun X5:set => fun X6:set => reflexive_i (fun X7:set => fun X8:set => (~ p X2))) /\ (((p X4 /\ (p (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty) -> (~ p X3))) /\ (((p (f (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty)) -> p X4 -> (~ setsum_p (f (V_ X2))) -> (~ atleast6 X4)) -> ((~ atleast2 X3) /\ ((p X3 /\ ((p Empty -> p (proj1 X4)) -> atleast2 X4)) -> setsum_p X3 -> setsum_p X3)) -> (((((~ exactly4 X4) -> (~ atleast5 X3) -> (exactly3 (f X3) -> ((~ PNoLe X4 (fun X5:set => (~ p (proj0 X4))) (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))) (fun X5:set => ((~ exactly5 (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty)) -> exactly2 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty))) -> (~ p (ap X5 X4)))) /\ (((~ p X4) /\ ((((~ p (Inj0 X2)) -> (((~ atleast6 X3) /\ ((~ p X3) /\ exactly5 (Power (f (f (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty))))))) /\ atleast4 X3)) -> p X4 -> reflexive_i (fun X5:set => fun X6:set => (((~ nat_p Empty) -> (~ binop_on X6 (fun X7:set => fun X8:set => X7))) /\ (~ atleast4 X3)))) -> (~ setsum_p X2))) /\ (p X3 /\ (~ exactly5 X4))))) -> p X2) /\ ((p (f X2) -> p X3 -> (~ p (binrep (Power (Power (Power Empty))) (Power Empty)))) -> (~ p (f X3)))) -> ((~ (f X4 :e setsum X4 (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty))) -> ((~ p X4) /\ ((((~ atleast2 X3) -> (((~ reflexive_i (fun X5:set => fun X6:set => (~ p X2))) /\ (X2 :e X4)) -> p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))) -> p X3) -> (~ p X4) -> (~ p X4)) -> (((~ atleast6 X4) /\ ((((atleast5 (binrep (Power (Power (Power Empty))) Empty) -> (~ p X3)) -> p Empty) /\ (((~ p X4) -> (~ p (Power (Power (Power (Power Empty))))) -> ((((~ p X3) /\ p (binrep (Power (Power (Power Empty))) Empty)) /\ exactly2 X3) /\ p X4) -> atleast4 Empty) -> atleast6 X4 -> (~ atleast2 X3))) /\ (~ p X4))) /\ ((X4 :e X3) -> p (ordsucc Empty)))))) -> (~ p X4)) /\ exactly4 X4)) /\ (~ exactly4 X3))) /\ ((((~ (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty) :e X3)) /\ transitive_i (fun X5:set => fun X6:set => (TransSet X6 /\ (((~ atleast2 X5) /\ (p X6 -> (p X4 /\ (~ p (f X6))))) /\ (~ p (binrep (Power (Power (Power (Power Empty)))) Empty)))))) -> ((~ atleast6 (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty)) -> SNo (binintersect X3 X4) -> (~ atleast2 Empty)) -> p (f (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty))) -> ((atleast4 (f X3) /\ (~ p (f X2))) /\ (((((((~ SNo X2) -> exactly3 X2) -> (~ p X3)) /\ nat_p X4) /\ (f X3 = X2)) -> (~ nat_p (binrep (Power (Power (Power Empty))) Empty))) -> (~ p (f (Power (Power (Power (Power Empty)))))))))))) /\ atleast6 X4)) -> (~ exactly3 X4)))) /\ (~ atleast3 X3)) /\ ((exactly4 (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty) /\ (p X4 /\ ((~ p X3) -> (~ p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty)) -> (~ p X2)))) /\ p X3)) -> (p X4 /\ (~ p X4))) /\ p X2) -> p Empty) -> (~ atleast4 X3)) /\ p (f (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty)))) /\ (((p Empty /\ (((p X2 /\ ((((~ p (Inj0 X3)) -> (~ p X3)) /\ (~ p (binrep (Power (Power (Power (Power Empty)))) Empty))) -> (~ p X3))) /\ ((p X2 -> (p X2 -> p (f (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)))) -> ((((p X4 -> p (f X4)) -> (~ exactly5 X3) -> (~ p X2)) /\ ((~ SNo (f (f (f (f X3))))) /\ atleast4 (f X3))) /\ SNo X2)) /\ atleast2 X3)) /\ (p X2 -> atleast2 (f X4)))) -> p X4) /\ (~ (X2 :e X4)))))) /\ (p (f (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)))) -> (~ p X4)))) -> (~ atleast3 Empty))) -> (~ p X2)) -> p (f (f (Power (Power (Power (Power Empty)))))).
admit.
Qed.

Theorem conj_Random2_TMKA2Cv9xawaCKMwCS7swVSJygJnhnrnFvM: exactly2 (f (f (f (Power Empty)))) -> (exists X2:set, exists X3:set, (p Empty /\ ((forall X4 :e X2, ((((nat_p (f Empty) /\ (((~ p X3) -> ((((~ p X3) -> exactly5 (Inj1 Empty) -> atleast3 (f (f (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)))) -> (~ p X3) -> p X2 -> (~ p X4)) /\ p X3) -> (~ ordinal X4)) -> (~ p X4) -> (p X3 /\ ((p X4 /\ p (f X3)) /\ ((p (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty) -> exactly3 X3 -> (~ SNoLt X4 X4) -> (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty = f X4)) -> (~ p X4)))) -> ((setsum_p X4 -> (p X2 /\ ((~ atleast6 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))) -> equip (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty) X3))) /\ (~ atleast4 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)))) -> (~ ordinal Empty))) -> p X2) -> ((~ p X2) /\ (~ p X2)) -> (~ atleast5 X3)) /\ (~ atleast2 X2))) /\ (exists X4:set, (~ exactly1of3 (~ p X2) (((~ nat_p (Power (binrep (Power (Power Empty)) Empty))) -> exactly4 (f X3)) -> (~ exactly3 (f (add_nat X2 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)))))) (~ atleast3 X2)))))).
admit.
Qed.

Theorem conj_Random2_TMRZRVqN93n2u6SgRpbGzgGCsrQEubJ8QGW: forall X2 c= f (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)), ((exists X3:set, (((exists X4:set, (p (binrep (Power (Power (Power (Power Empty)))) Empty) /\ (~ exactly2 (Union (f X4))))) /\ (exists X4:set, (p X4 /\ p (Sing X4)))) /\ (exists X4:set, ((p X4 -> (~ p X2)) /\ ((((~ p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty))) /\ p X2) /\ p (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty)) /\ ordinal Empty))))) -> (~ nat_p X2)) -> (exists X3 :e X2, (((exists X4:set, ((X4 c= X3) /\ (~ transitive_i (fun X5:set => fun X6:set => (~ TransSet X5))))) -> (~ exactly3 (f X3))) /\ (forall X4:set, (((~ p (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)) -> ((~ exactly5 X3) /\ p X4) -> tuple_p X4 X2) /\ ((exactly3 X2 /\ (PNo_downc (fun X5:set => fun X6:set -> prop => p X5) X2 (fun X5:set => p X2) -> p X3)) -> ((~ p (f X2)) -> atleast2 X3) -> atleast6 X3)) -> atleast6 (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty)))).
admit.
Qed.

Theorem conj_Random2_TMYupy8MsyDDRR95cjVmwKNmdnenD3L7tiw: (forall X2 :e Empty, atleast4 X2) -> (forall X2:set, (forall X3 :e X2, (exists X4 :e f X3, (~ set_of_pairs Empty)) -> (~ p (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty)) -> (forall X4:set, (p (f X3) /\ (~ p X4)) -> p X3 -> (((~ p X4) /\ ((~ nat_p X4) -> exactly2 X2)) /\ ((set_of_pairs X3 /\ p Empty) /\ ((~ exactly5 X3) -> (~ set_of_pairs X3)))))) -> ((forall X3:set, (forall X4:set, ((~ p X2) /\ ((~ p X3) /\ (atleast6 X3 /\ exactly3 X4))) -> (~ exactly2 X3)) -> (forall X4 :e f X3, (((~ p (Power (binrep (Power (Power Empty)) Empty))) /\ (~ p Empty)) /\ ((p X3 -> ((setsum X4 X2 = X4) /\ ((~ atleast5 X3) /\ p (f (f X3))))) /\ (atleast2 Empty -> (~ SNo_ X2 X3)))))) /\ (forall X3:set, (~ p (f X3)) -> (forall X4:set, (~ p X3) -> p X4)))).
admit.
Qed.

Theorem conj_Random2_TMdYXtmXPAMFG8vmm7n6afRY3hw4MfDndjp: ((~ SNo (f (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)))) /\ (forall X2:set, p X2 -> (((forall X3 :e X2, p X2) -> p X2) /\ (exists X3:set, ((exists X4:set, ((((p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) -> p X4) /\ (p (f X2) /\ p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty))) -> (((~ set_of_pairs X2) -> ((((~ p X3) -> p X4) -> (~ p X3)) /\ p Empty)) -> ((~ p X2) -> (~ p X4)) -> (~ SNo_ X3 Empty)) -> (~ ordinal Empty)) /\ (((~ p X4) /\ (atleast5 X3 -> p Empty)) -> (~ atleast3 (f (f (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))))))))) /\ (exists X4:set, (~ nat_p (f Empty)))))) -> (exists X3 :e f X2, exists X4:set, ((~ exactly5 (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)))) /\ ((((((~ p Empty) -> ((~ setsum_p X4) /\ (~ setsum_p X2))) /\ ((((~ p X3) /\ (~ atleast5 X4)) -> (~ exactly3 X4)) /\ (((((~ atleast6 X4) -> ((p X4 -> p (Power (Power (Power (Power Empty))))) /\ p X2) -> (p X3 /\ ((~ (X3 :e f X4)) /\ (~ atleast4 X4)))) -> (~ atleast2 Empty) -> (~ p X4)) -> (~ p Empty) -> atleast5 X4) -> antisymmetric_i (fun X5:set => fun X6:set => (~ irreflexive_i (fun X7:set => fun X8:set => ((~ p X7) /\ (((((((atleast4 X8 /\ ((~ reflexive_i (fun X9:set => fun X10:set => ((~ p X4) /\ ((~ ordinal X10) /\ ((p X9 -> exactly2 X8) -> TransSet X3))))) /\ (~ setsum_p X2))) /\ (((TransSet (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) /\ (SNoLe (V_ X4) X8 -> (~ nat_p X3) -> p Empty)) -> (p X7 -> trichotomous_or_i (fun X9:set => fun X10:set => ((~ TransSet X9) /\ (((((((p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty) -> (((exactly4 X10 -> (p X10 /\ p X6)) -> (~ TransSet X5)) /\ (~ p Empty))) -> (p Empty -> SNoLe X8 (Inj0 (Power (Power (Power (Power Empty)))))) -> ((((((~ exactly4 X4) /\ (p (Inj1 X9) /\ (p (f X9) /\ (~ nat_p X6)))) -> (~ p Empty) -> (~ reflexive_i (fun X11:set => fun X12:set => setsum_p (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty)))) /\ (~ atleast6 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)))) -> (~ p X10)) /\ ((exactly4 X8 -> p (Power (binrep (Power (Power Empty)) Empty))) /\ (~ p (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty))))) /\ (((~ trichotomous_or_i (fun X11:set => fun X12:set => (~ exactly5 X11))) /\ (~ exactly2 X9)) /\ exactly3 X3)) /\ p X6) /\ ((p (f X5) -> set_of_pairs X2) -> (((((((~ p X10) -> ((~ exactly2 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty))) /\ (p X9 /\ p X10))) /\ p X9) -> ((exactly3 Empty /\ ((~ atleast6 X10) /\ p Empty)) /\ ((TransSet X9 -> p X10 -> ((((((p X10 -> ((p X10 /\ (p X9 /\ (~ p X9))) -> (~ p X8)) -> ((p X2 /\ (~ p X5)) /\ (equip X10 X10 -> (~ atleast6 X9))) -> (~ TransSet X6)) /\ p (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty)) -> p X10) /\ ((~ p X7) /\ (p X5 -> atleast4 X10))) /\ (atleast5 (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty) -> p X9)) -> ((p X5 /\ p X10) /\ ((atleast3 X10 /\ ((~ SNo X3) -> exactly4 X10)) -> ((setsum_p X9 /\ ((((p X6 /\ (~ p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty))) -> ((TransSet (ordsucc (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty)) -> (~ atleast3 X10)) /\ (((exactly5 X7 /\ ((~ atleast5 X10) -> ((atleast5 X10 /\ (atleast2 X9 /\ (~ p (Power (binrep (Power (Power Empty)) Empty))))) /\ p (SNoElts_ X3)) -> (((((atleast5 (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty) /\ (((setsum_p X9 /\ (~ atleast3 X4)) /\ p X6) -> (~ p X10))) -> ((((~ p (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)) /\ p (f (Power (binrep (Power (Power Empty)) Empty)))) /\ (~ p X7)) /\ SNo X9)) -> (((set_of_pairs (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) /\ ((~ p X4) /\ ((~ p X10) /\ p X9))) -> (~ atleast3 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)))) /\ (~ p X9)) -> (~ atleastp (Power X9) X9)) /\ (~ p X9)) /\ (~ PNoLt_ X6 (fun X11:set => (~ exactly5 X11)) (fun X11:set => atleast4 X11))))) -> ((~ p X9) /\ p X10) -> ((~ reflexive_i (fun X11:set => fun X12:set => p X10)) /\ p X9) -> p X10) /\ (~ exactly4 X9)))) -> ((p X2 /\ (exactly5 X9 /\ atleast3 X10)) /\ ((~ atleast6 (PSNo X10 (fun X11:set => ((~ exactly3 X11) /\ (((((~ p X10) -> (((((~ p (setminus Empty X8)) -> (~ p (Union X10))) /\ p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty))) -> ((exactly4 X11 /\ (~ ordinal X6)) -> exactly5 X10) -> p X10 -> ordinal X7) /\ (((p X11 -> (~ exactly4 X9)) /\ (~ p X11)) -> (~ ordinal (f (f Empty)))))) /\ (((~ ordinal (f X11)) /\ exactly4 Empty) -> (~ nat_p X10) -> (~ p X10))) /\ (TransSet X11 -> (((~ exactly1of3 (atleast3 X11) (~ p X3) (TransSet X9)) -> atleast2 (f (binrep X10 X11)) -> ((((~ p X10) /\ ((~ exactly5 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty)) /\ p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty))) -> ((((~ exactly5 (combine_funcs X11 (f X11) (fun X12:set => binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (fun X12:set => X11) X11)) /\ ((~ exactly5 X6) /\ ((~ exactly3 X11) -> (exactly3 (Inj1 X11) /\ (((~ atleast4 X10) /\ (~ p X11)) -> (~ p X5)))))) -> (~ nat_p X10)) /\ (~ ordinal X10))) -> (~ atleast5 X10)) -> ((~ atleast6 (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty)) /\ (~ p X11))) -> setsum_p X10) -> (setsum_p (ordsucc X3) /\ ((p X11 /\ atleast2 X10) -> ((TransSet X3 -> (((((p X10 /\ (atleast6 (setexp X11 X8) -> (~ set_of_pairs X10) -> ((~ p X11) /\ exactly3 X11))) /\ ordinal (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty)) /\ (p (lam2 X3 (fun X12:set => X11) (fun X12:set => fun X13:set => X5)) /\ p (f (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty)))) -> (~ atleast3 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))) -> (~ atleast3 X11) -> exactly2 Empty) /\ (((p X10 /\ TransSet (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty))) -> (~ p X11)) /\ ((((~ atleast5 (f Empty)) -> (SNo (f X10) /\ (~ (X7 :e X11))) -> (~ p (binrep (Power (Power (Power (Power Empty)))) (Power Empty)))) -> p X11) -> (~ TransSet X2))))) /\ p (In_rec_i (fun X12:set => fun X13:set -> set => X12) X8)))))) -> (~ p X2)))))) -> (p (f X10) /\ ((atleast6 X9 -> p X10) -> (~ p X3)))))) /\ (((~ TransSet X4) -> ((((((p X6 /\ atleast2 X10) -> ((~ p X10) /\ ((atleast2 X2 -> p X10) /\ p X4))) -> (~ reflexive_i (fun X11:set => fun X12:set => (p X12 /\ p X11) -> ((((SNo X12 -> ((p X4 /\ ((atleast5 X5 -> (~ tuple_p X11 X3)) /\ ((((~ p X10) /\ ((p X11 /\ exactly3 X12) -> (((~ (f X12 :e X10)) /\ (((~ p X11) /\ ((((p X10 -> (p X11 /\ (((((((~ nat_p (Power (binrep (Power (Power Empty)) Empty))) -> (~ p X12)) -> (~ exactly3 Empty)) /\ atleast3 X8) -> ((((f X11 :e X7) /\ p X11) /\ ((((~ exactly2 (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)))) -> atleast6 X11) /\ (~ exactly4 X6)) /\ (p X11 /\ ((((~ atleast3 X9) -> p Empty) -> (~ nat_p X11)) -> (~ atleast5 X10))))) /\ (~ p X12))) -> (p X11 /\ (((~ ordinal X12) -> (~ p X12)) /\ nat_p (ordsucc X12)))) -> (TransSet X11 /\ (SNoLev X6 :e X11)) -> exactly2 X11)) -> ((((((~ p X12) /\ ((exactly3 (ordsucc (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty)) /\ (~ exactly3 X11)) /\ (~ exactly5 Empty))) -> setsum_p X11 -> (~ atleast6 X7)) -> atleast4 X10 -> p Empty) /\ atleast5 X11) /\ (p X12 -> ((atleast4 X12 /\ (~ set_of_pairs X12)) -> (~ exactly3 (binrep (Power (Power (Power Empty))) (Power Empty)))) -> (atleast5 X11 /\ (~ p (Inj0 X12))) -> p X11))) /\ (((~ atleast6 X12) /\ (~ p X11)) /\ (~ atleast4 X11))) /\ (exactly4 X9 -> exactly2 X11)) -> (((((~ TransSet X4) /\ (~ exactly5 X11)) -> ((((((~ p X12) /\ atleast5 (famunion X12 (fun X13:set => X12))) -> ((((~ p X11) /\ ((~ atleast5 X11) -> (~ p X8))) /\ (p X11 -> (~ p X12))) /\ (((((((~ p X10) /\ exactly2 X2) /\ ((~ p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))) -> ((atleast4 X2 /\ stricttotalorder_i (fun X13:set => fun X14:set => atleast4 X8 -> (((((~ p X13) -> ((~ atleast2 X9) -> p X14) -> ((~ (Empty :e X8)) /\ nat_p X11)) /\ (~ p X13)) /\ (exactly5 Empty /\ ((~ p (setsum (mul_nat X5 X10) (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)))) -> p X13))) /\ ((~ p X9) /\ p X14)))) -> p X7) -> (~ p X12))) /\ (~ atleast6 X11)) -> (((~ p X12) /\ (~ exactly5 Empty)) /\ (p X12 -> ((~ p X10) /\ ((((((~ p Empty) -> ((~ exactly2 X12) /\ ((((((((p X12 /\ (exactly2 X12 -> p X11)) /\ p X3) -> p X3 -> (~ atleast3 X12)) /\ p X3) -> (~ p (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))))) -> atleast2 X8) -> ((exactly5 X11 -> (X12 :e X11)) /\ (~ atleast2 X11))) /\ (exactly5 X11 -> (~ symmetric_i (fun X13:set => fun X14:set => ((~ exactly5 X6) /\ ((~ nat_p X13) -> ((~ SNoEq_ X12 X13 (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty)) /\ (~ atleast6 X6)))) -> (setsum_p (setsum (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)))) /\ ((~ atleast2 Empty) -> nat_p X14)))))))) /\ (~ atleast2 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)))) /\ ((~ exactly5 X11) -> (~ p X12))) /\ ((~ set_of_pairs X11) /\ atleast3 X9)) /\ (((((~ p X7) /\ ((~ nat_p X3) /\ (~ atleast2 X12))) /\ p X11) -> p Empty) -> atleast5 X12)))))) -> (((~ p X12) /\ ((~ atleast3 (f X11)) -> (~ nat_p X12))) /\ p X11)) -> (((~ atleast5 Empty) /\ (((exactly5 X11 -> nat_p X12) -> p X12 -> atleast5 (f (SNoLev X11))) /\ (~ p X8))) /\ exactly4 X10))) -> p X12) /\ (((~ atleast3 X12) /\ (((p X12 -> ((~ exactly4 X12) /\ (~ p X11)) -> p X12) -> (SNo X11 /\ (~ ordinal X12))) /\ (exactly4 (Inj1 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty)) /\ p (binrep (Power (Power (Power Empty))) Empty)))) -> p X2)) /\ (((p X11 /\ (~ p X11)) -> (p X2 /\ (~ exactly4 X12)) -> (exactly4 X12 /\ ((((~ p X12) -> exactly3 X12) -> (exactly3 X11 /\ (p X12 -> (((((((~ p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty))) -> exactly2 X12) -> ((~ p X11) /\ p X10)) /\ (~ p X6)) /\ (~ exactly5 X7)) /\ ((((~ set_of_pairs X12) /\ (p X12 -> p (binrep (Power (Power (Power (Power Empty)))) (Power Empty)))) /\ (((atleast4 Empty /\ p Empty) /\ ordinal X11) /\ (~ p X11))) -> (((((((~ exactly4 X12) -> (~ SNo_ (Power X7) X11)) /\ (~ p X12)) -> setsum_p (SetAdjoin X11 (f (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty)))) -> (~ p X12)) -> (~ p X4)) /\ p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))))) /\ (((~ antisymmetric_i (fun X13:set => fun X14:set => (~ p X12))) /\ atleast4 X12) /\ atleast3 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))))))) -> atleast6 Empty))) -> p X11 -> setsum_p X11)) /\ p (binrep (Power (Power (Power Empty))) (Power Empty)))) /\ TransSet (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)))) /\ (((((~ p X11) /\ ((~ p (Sing X12)) -> ((~ atleast3 X12) /\ (~ exactly4 X12)))) /\ p X12) -> transitive_i (fun X13:set => fun X14:set => ((((~ p X14) -> (~ reflexive_i (fun X15:set => fun X16:set => p (Inj1 X15))) -> nat_p X14) -> set_of_pairs X3) /\ ((atleast2 X12 /\ (((~ p X13) /\ (((((~ p X5) /\ (p X12 -> ordinal Empty)) -> (~ set_of_pairs X13)) /\ (p X13 -> (~ exactly5 X13))) -> (atleast5 X13 /\ (~ p (binunion X6 X13))) -> ((~ p X2) -> ((~ p (Unj X12)) /\ p X2)) -> (~ p X14) -> ordinal (binrep (Power (Power (Power (Power Empty)))) Empty))) /\ (~ atleast3 X13))) /\ (~ setsum_p X13))))) -> SNo X12 -> nat_p (binrep (Power (Power (Power (Power Empty)))) Empty))))) /\ (~ p X11))) /\ p (V_ X8)))) -> (~ p X11)) /\ (((~ equip X3 Empty) /\ (p (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))) -> p (Power (binrep (Power (Power Empty)) Empty)))) /\ nat_p X11)))) -> (~ exactly3 X11)) -> (atleast3 X6 /\ (((trichotomous_or_i (fun X13:set => fun X14:set => (~ atleast4 X10) -> (((TransSet X13 -> (atleast6 X14 /\ ((p X13 /\ (((((((~ exactly2 X13) /\ (~ p X14)) -> ((~ p (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty)) -> (~ atleast3 X4)) -> (atleast4 X13 /\ (~ p X13))) -> (~ atleast6 X14) -> atleast3 X14) /\ (((~ exactly5 X13) -> p X14) -> (~ p X13) -> (~ p X14))) -> ((((~ atleast3 X13) -> p X13) -> (~ p (Power (Power (Power (Power Empty)))))) -> (~ atleast4 X13)) -> (exactly3 X13 /\ (~ p X14))) /\ ((~ atleast6 Empty) -> (~ exactly3 (Power (binrep (Power (Power Empty)) Empty)))))) /\ (p Empty /\ (((((X14 = X9) -> p X11) /\ (~ p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)))) -> ((p X14 /\ p X13) /\ exactly2 X13)) -> exactly2 X3)))) -> (~ equip X13 X13)) /\ ((exactly2 X10 /\ (~ p X10)) /\ ((((p (f X13) -> p X10) -> (~ exactly4 (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))))) /\ (p (Sing (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))) /\ (((~ atleast5 X13) /\ ((~ p X13) -> p X13)) /\ (~ p X13)))) /\ (~ p X4)))) /\ (exactly5 (binrep (Power (Power (Power (Power Empty)))) Empty) -> p X8))) /\ (~ exactly4 Empty)) -> (((~ (X12 :e Empty)) /\ (p X12 /\ (SNo_ X12 X12 -> (~ set_of_pairs X11)))) /\ ((nat_p X8 -> set_of_pairs (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty)) /\ p (Power (Power (Power (Power Empty))))))) -> exactly3 Empty)) -> atleast5 (Power (Power (Power (Power Empty))))) -> exactly3 X6) -> (~ exactly4 X12)) /\ ((~ atleast5 (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty)) -> p X11))))) -> p X5) /\ ((~ exactly5 X7) -> ((p X10 -> ((~ p X10) /\ exactly3 X9)) -> (~ atleast6 X10) -> (((~ ordinal X10) /\ ((~ p X10) /\ (~ ordinal X7))) /\ (~ p X3))) -> ((~ p Empty) /\ ((exactly3 (f X10) -> atleast5 X10 -> (((X2 :e binrep (Power (Power (Power Empty))) (Power Empty)) /\ p X10) /\ ((atleast4 X10 -> (((((((~ p X9) /\ (~ atleast6 X8)) /\ (p (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty) /\ p X9)) -> (~ exactly3 X10)) -> p X9) /\ ((~ (X10 :e X10)) /\ (~ per_i (fun X11:set => fun X12:set => p X11 -> TransSet X11)))) /\ atleast4 X10) -> ((~ p X10) -> (~ exactly2 X9)) -> ((~ p X4) /\ p X4)) -> ((((exactly5 X6 -> p X9) -> (((~ exactly2 X10) /\ p X10) /\ (~ exactly2 (binrep (Power (Power (Power Empty))) Empty))) -> p X9) -> p X10 -> ((~ nat_p (Inj0 Empty)) /\ (~ p (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty)))) /\ (p X5 /\ exactly2 Empty))))) -> p Empty)))) -> (((~ exactly5 X10) /\ p (Inj0 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)))) /\ ((ordinal X2 -> (~ atleast5 X3)) /\ (exactly2 X10 /\ (~ p X9))))) -> (~ tuple_p (Inj1 (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty)) X10)) -> ((~ TransSet X9) /\ ((((~ atleast6 X10) /\ p (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)) -> ((~ SNo X9) /\ (~ p X10))) -> (~ p X10)))))) /\ ((~ p X8) -> (exactly2 X9 -> (p X10 /\ (~ p (binrep (Power (Power (Power (Power Empty)))) Empty)))) -> p Empty -> (((~ nat_p X10) -> (p X7 /\ atleast2 X2)) /\ ((atleast3 X9 /\ (~ p (Sing X6))) /\ SNoLt X7 X9)) -> (p (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty) /\ ((~ TransSet X7) /\ (p (f X6) -> (~ ordinal X10)))) -> ((((p X9 /\ ((p X2 /\ p (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty)) -> p (binrep (Power (Power (Power Empty))) Empty))) /\ ((((~ atleast5 X9) /\ p X4) -> (ordinal X9 /\ ((~ p X9) /\ (TransSet (Unj X10) /\ (~ p X10))))) /\ (~ p (Power (binrep (Power (Power Empty)) Empty))))) -> atleast6 (proj0 X10) -> ordinal (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty)) /\ (~ p X10)))))) -> (~ atleast3 X10) -> (~ p (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))))) -> SNoLt X10 Empty) /\ ((p X10 -> (~ atleast4 (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))))) -> (~ p X9))))) /\ (~ atleast5 X10)) /\ ordinal X9) -> nat_p X2) -> (p X10 /\ ((p (lam2 X9 (fun X11:set => X2) (fun X11:set => fun X12:set => X11)) -> atleast5 Empty -> (~ p X3)) -> ((atleast6 X10 /\ ((((~ p X9) -> ((((~ atleast5 X10) /\ (~ p X7)) /\ (atleast3 X6 /\ (p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) /\ ((~ p X9) /\ exactly4 (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty))))) /\ ordinal (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty))) -> (TransSet X9 /\ (((~ equip X9 X8) -> atleast3 X9) -> ((~ exactly3 X3) /\ (~ equip (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) X7)) -> p X10))) -> PNoLt (Inj1 X10) (fun X11:set => (((~ p Empty) /\ ((~ atleast2 X3) -> (~ p X11))) /\ (((~ atleast4 X10) -> (~ exactly3 (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))))) -> exactly3 (Power (Power (Power (Power Empty)))))) -> ((p X10 /\ p X11) /\ ((atleast6 X10 -> SNoLt X11 X5) -> ((exactly2 X11 /\ ((nat_p X10 -> ((p X9 /\ ((((~ p (f (binrep (Power (Power (Power (Power Empty)))) (Power Empty)))) -> (((((~ SNo X10) /\ (p X11 /\ (~ p Empty))) -> atleast4 X4) /\ ((ordinal X10 -> p X11) /\ (~ p X11))) /\ (p Empty -> (~ atleast3 Empty))) -> (ordinal X11 -> p (combine_funcs (Power (f X2)) X10 (fun X12:set => f X2) (fun X12:set => X11) X11)) -> ((~ ordinal X11) -> atleast2 X4) -> atleast3 (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty)) /\ ((~ atleast4 (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)))) -> ((~ p X11) -> p X11) -> (atleast4 X11 /\ p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))))) /\ p X11)) /\ TransSet X11) -> nat_p X11) -> ((~ atleast6 X4) /\ (~ SNo X11)))) /\ ordinal (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)))))) -> (((p X11 -> (~ atleast3 X8) -> ((((~ p X11) /\ ((~ SNo_ X7 X11) -> (~ p X11))) /\ nat_p X10) /\ ordinal X7)) /\ p X11) -> ((~ p X10) /\ (~ p (Power (binrep (Power (Power Empty)) Empty))))) -> exactly4 X11) X10 (fun X11:set => (~ p X10)))) /\ ((SNo X10 /\ p (Power (binrep (Power (Power Empty)) Empty))) /\ (~ p X10))))))) -> exactly3 X9) /\ p X9)))) -> (((~ exactly5 X7) /\ ((~ p X8) /\ (~ atleast2 (binrep (Power (binrep (Power (Power Empty)) Empty)) Empty)))) /\ (~ p X3)) -> exactly4 X3) -> (~ p X2))) -> (~ TransSet X8) -> p (f X8)) /\ ((((SNoLt X7 X8 -> p X7) /\ (p X8 -> p X7)) -> (~ p (binrep (Power (Power (Power (Power Empty)))) Empty))) -> p X4 -> ((~ ordinal X8) /\ ((~ p X7) /\ (~ exactly4 X8))) -> (~ p X7))) /\ ((atleast4 Empty -> atleast3 X2) /\ (~ exactly4 X3))) /\ ordinal (ap X7 (Sep X5 (fun X9:set => p X8)))) -> set_of_pairs X4)) -> ((~ p X7) /\ TransSet X7))))))) /\ p (f (Inj1 X3))) /\ (((p X3 /\ (TransSet X4 -> ((p X4 /\ (~ exactly4 X3)) /\ (p X4 -> (~ p X4))))) /\ (((~ exactly2 X2) -> exactly2 X3) -> p X3)) -> p Empty)) -> ((atleast5 X2 -> atleast2 X3) /\ ((~ p X4) -> ((p X2 -> ((p X4 -> p X3) /\ (~ PNoLe X3 (fun X5:set => setsum_p X4 -> ((~ p X2) /\ (~ set_of_pairs X4))) X3 (fun X5:set => (~ exactly5 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty))))))) /\ (((nat_p Empty -> p X3) -> ((((~ SNo (Pi (Power (binrep (Power (Power Empty)) Empty)) (fun X5:set => f X5))) -> (((((atleast3 X2 /\ p X4) /\ (((((p X4 /\ atleast2 X2) /\ (~ p X4)) /\ p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty))) /\ ((((((((~ ordinal (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty))) /\ (~ atleast6 X2)) -> p (f X3)) /\ (p X3 /\ (((~ (X3 :e X3)) /\ (((p X4 -> ((atleast2 (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) /\ p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty)) Empty)) /\ ((~ exactly5 X3) /\ (~ p X3)))) /\ ((~ ordinal X3) /\ (p X3 -> p (f (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty))))) /\ (((exactly2 X2 /\ (~ p (f (binrep (Power (Power (Power (Power Empty)))) Empty)))) -> (p X3 -> p X4) -> (setsum_p (Power (binrep (Power (Power Empty)) Empty)) /\ (~ p X3)) -> strictpartialorder_i (fun X5:set => fun X6:set => (((~ p X5) -> (~ exactly4 Empty)) /\ ((p X6 -> p X6) /\ ((~ p X6) -> (~ p X3)))))) /\ (~ p Empty)))) /\ exactly2 X4))) /\ (X4 :e X4)) -> ((((((~ atleast6 X4) /\ (SNo X3 -> p X4)) /\ (atleast4 (binrep (Power (Power (Power (Power Empty)))) Empty) -> p X3)) /\ (((~ ordinal (f (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))))) /\ TransSet X4) -> atleast4 X3)) -> (~ p X3)) /\ (((p Empty /\ p X2) /\ ((nat_p X2 -> atleast5 (binrep (Power (Power (Power Empty))) (Power Empty))) /\ p X3)) /\ (((~ exactly3 X3) /\ (p X2 /\ ((~ atleast4 (f X4)) /\ (((exactly5 X3 -> (~ p X4)) -> (X2 :e X3)) -> (~ p X3))))) /\ (~ p (f X2)))))) /\ ((((atleast3 Empty -> (((~ p (Power (Power (Power (Power Empty))))) /\ (~ p X2)) /\ p X3)) /\ (((~ p Empty) /\ ((~ p Empty) -> exactly2 X3)) /\ (((((((p X4 /\ ((((((~ atleast6 (f X3)) -> (((~ p X4) -> atleast3 X4) /\ (atleast2 X2 /\ nat_p X3))) -> setsum_p X3) -> (~ p X3) -> (((X3 c= SNoElts_ X4) /\ atleast5 X3) /\ ((~ p X3) /\ (exactly5 X4 -> p Empty)))) /\ exactly5 Empty) -> (~ p X4))) /\ (~ p (binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty))) /\ ((((ordinal (f (binrep (Power (Power (Power Empty))) (Power Empty))) -> p (Unj (f Empty))) -> exactly5 X4) /\ (p X3 /\ p X2)) /\ p X3)) /\ ((p X3 /\ ((((~ p X2) /\ atleast3 (f X3)) -> (~ exactly3 (f X3))) -> (~ p (f (f (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty))))))) -> (p X3 /\ (~ atleast4 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)))))) /\ set_of_pairs (f (f X4))) -> (~ nat_p X2) -> p X3) /\ ((((~ p (f X4)) /\ (~ exactly2 X3)) -> p X3) -> p (f X2))))) -> atleast3 Empty) /\ (~ SNo (Sing (ap X3 (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)))))))) -> SNo (binrep (Power (Power (Power Empty))) (Power Empty)))) /\ nat_p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty))) -> p (f (f (f (f X4))))) -> (~ TransSet X4)) /\ (~ p (Power (binrep (Power (Power Empty)) Empty))))) /\ p (f (nat_primrec X3 (fun X5:set => fun X6:set => f X6) (f (V_ X4))))) /\ (atleast3 X4 /\ (((p X3 -> (~ p X3)) /\ p (f (f X4))) /\ (~ exactly4 X4))))) -> (p X3 /\ ((~ p X3) -> (~ nat_p X2)))))))))))).
admit.
Qed.

Theorem conj_Random2_TMMFtGyGTNMk889pZKyUJYQZzsaqqmawSwg: forall X2:set, ((forall X3:set, ((forall X4:set, (((((exactly4 X2 -> ((~ p (binrep (Power (Power (Power Empty))) Empty)) /\ setsum_p X4)) -> (~ SNo (Power Empty))) /\ (~ exactly2 X4)) /\ nat_p X3) -> (~ atleast5 X3)) -> p Empty) /\ (((exists X4:set, (p X3 /\ (~ p (binrep (Power (Power (Power (Power Empty)))) Empty)))) -> nat_p X2) -> (forall X4 :e X2, (~ p X3) -> SNo X4 -> (~ exactly4 (f X3)) -> (~ exactly2 X3)))) -> (forall X4:set, (~ exactly4 X4) -> ((p (f X3) -> (((p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) -> ordinal X4) -> (~ p X4) -> (reflexive_i (fun X5:set => fun X6:set => ((~ atleast3 X4) /\ ((exactly4 X6 /\ (((~ atleast5 (Inj0 X5)) /\ ((~ p (binrep (Power (Power (Power Empty))) (Power Empty))) -> ((nat_p X5 /\ (~ exactly3 X2)) /\ (X6 :e Power (binrep (Power (Power Empty)) Empty))))) -> (((~ p X6) -> (~ exactly5 X6)) /\ (((~ exactly4 X5) -> p (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty)) /\ (p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) /\ ((~ p Empty) /\ exactly2 X6)))))) /\ atleast2 X5))) /\ (~ p X4))) /\ p (Power (binrep (Power (Power Empty)) Empty)))) -> (~ exactly4 X2)) -> (~ (X4 c= X3)))) /\ (forall X3 c= X2, (~ ordinal (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty)))))) -> (forall X3:set, (exists X4:set, ((~ p X3) /\ (~ atleast2 X3))) -> (forall X4 c= X3, ((SNo X4 -> (~ exactly3 X2)) /\ (((~ exactly2 X4) -> p (f X3)) /\ (exactly4 X3 -> (SNo X2 /\ (~ atleast5 X3))))) -> (((p (binunion X4 (f X3)) /\ ((~ p X4) /\ exactly5 X2)) /\ p (f (binrep (Power (Power (Power Empty))) (Power Empty)))) /\ p X4))).
admit.
Qed.

Theorem conj_Random2_TMTUsGrWzeccXTbyyUzkKmmiSfaVo5uxPqe: exists X2 :e f (f (binrep (Power (Power (Power Empty))) (Power Empty))), (atleast4 X2 /\ (p X2 /\ (((exists X3:set, ((exists X4:set, (~ atleast3 X3)) /\ (forall X4 c= f (f (f (proj1 X3))), (~ p (f X3))))) /\ (~ atleast4 X2)) -> ordinal (f (binrep (Power (Power (Power Empty))) Empty)) -> (exists X3:set, ((exists X4:set, ((X4 c= X3) /\ ((~ p (setminus X2 (binrep (Power (Power (Power Empty))) Empty))) -> (((~ exactly3 Empty) -> ((((~ p Empty) -> ((atleast3 (f X4) /\ ((p X4 /\ TransSet (binrep (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty)) Empty)) -> (exactly2 X2 /\ exactly4 X3) -> (atleast2 X2 /\ p X2))) /\ (~ p X3))) /\ TransSet (binrep (Power (Power (Power Empty))) (Power Empty))) /\ p X3)) /\ (~ exactly2 X2)) -> (~ p X4)))) /\ (exists X4:set, ((X4 c= f (f Empty)) /\ ((nat_p (f X3) -> (~ tuple_p X2 X4)) /\ (~ atleast6 (f (Power (binrep (Power (Power Empty)) Empty)))))))) -> (forall X4:set, atleast2 Empty))))).
admit.
Qed.

Theorem conj_Random2_TMaLEyJMWDQUQRFkPhdoAxazekiUHV2WC4t: forall X2 c= binrep (Power (Power (Power Empty))) (Power Empty), ((TransSet X2 -> (forall X3:set, (exists X4:set, ((X4 c= X3) /\ p X3)) -> (~ p X2))) /\ (forall X3 :e f X2, forall X4:set, p (ordsucc (f X2)) -> (~ p X2))).
admit.
Qed.

Theorem conj_Random2_TMWsN7FWSTcbHovdb3W8kfuXMabiMyDDHyW: forall X2 c= binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty, ((forall X3:set, forall X4 :e f X3, (TransSet X3 -> p (binrep (Power (Power (Power Empty))) Empty)) -> ((~ atleast4 X4) -> (~ p X2)) -> (~ p X4)) /\ (~ atleast5 X2)) -> (exists X3:set, ((forall X4:set, (~ p X2)) /\ (exists X4 :e X2, ((nat_p (f X3) /\ p X3) /\ ((~ setsum_p X4) /\ (~ p (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty)))))) -> p X3))).
admit.
Qed.

Theorem conj_Random2_TMXpWDH8Spmj88rU8K6h4MynCuZGsWMAJ95: exists X2:set, (((forall X3 c= Empty, forall X4 :e X2, ((p X2 /\ (p X2 /\ ((~ p (Inj0 X2)) /\ (~ p (binrep (Power (Power (Power (Power Empty)))) (Power (Power Empty))))))) /\ atleast5 X2)) /\ (exists X3:set, ((X3 c= X2) /\ (~ p X3)))) /\ (((forall X3:set, (forall X4:set, nat_p X3 -> (~ set_of_pairs X4)) -> p (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty))) /\ (exists X3:set, ((forall X4 :e X3, nat_p X2 -> p X3) /\ ((exists X4:set, ((X4 c= X2) /\ (atleast3 X3 -> (~ p X2) -> ((~ p (f Empty)) /\ p (f X3))))) -> (~ ordinal (binrep (Power (Power (Power (Power Empty)))) (Power Empty))) -> p X3)))) -> (forall X3:set, (forall X4:set, (proj1 X3 :e binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty)) -> (~ p (f X3))))).
admit.
Qed.

Theorem conj_Random2_TMSZWxUyR3R3h76vnctsXCSgLs8qMQZorny: exists X2:set, ((exists X3:set, ((X3 c= X2) /\ (p X2 -> p X2))) /\ (exists X3 :e X2, ((forall X4 :e Power (binrep (Power (Power Empty)) Empty), (set_of_pairs X4 /\ ((~ p (f X3)) /\ (exactly3 X4 /\ (p (Union X3) /\ (~ set_of_pairs X4)))))) /\ (p X2 -> (ordinal X3 /\ ((exists X4:set, ((X4 c= X2) /\ (~ nat_p Empty))) -> exactly4 (ap X2 X3))))))).
admit.
Qed.

Theorem conj_Random2_TMd6bJuWGgZmC7HjWbFMFsgcazgDXJobEJ4: p (f (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power Empty))) -> (forall X2:set, ((~ p X2) -> (~ p X2)) -> (forall X3 c= X2, (((forall X4:set, ((p X4 /\ ((((~ p X2) -> p (f (binrep (Power (Power (Power (Power Empty)))) Empty))) /\ (~ p (f X4))) /\ (p X2 /\ (~ p (f X2))))) /\ (~ p X3))) -> (forall X4:set, ((p (f Empty) -> p X4) /\ (~ nat_p (binrep (binrep (Power (Power (Power Empty))) (Power Empty)) Empty))))) /\ ((~ (X3 :e X2)) /\ ((p (f X2) -> (exists X4:set, (~ p X3))) /\ ((forall X4:set, (~ SNo_ X3 Empty)) /\ (forall X4 :e X2, (~ TransSet X3)))))))).
admit.
Qed.

Theorem conj_Random2_TMF84KaVzeZrMbADgLAdqNF2o3NvUwwzNgo: forall X2 :e f (f (f (setexp (famunion (SNoLev Empty) (fun X3:set => X3)) (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) (Power Empty))))), forall X3 c= X2, (exists X4:set, ((X4 c= binrep (binrep (Power (Power (Power (Power Empty)))) (Power Empty)) Empty) /\ ((~ p X4) /\ (~ exactly5 Empty)))) -> (~ p X3).
admit.
Qed.

Theorem conj_Random2_TMH2Va5g3nUe3rUAGVJEe6UCZxmxh7WUNmV: (exists X2:set, ((exists X3:set, (p (f (binrep (Power (Power (Power Empty))) (Power Empty))) /\ (~ p (f X2)))) /\ (exists X3:set, ((X3 c= X2) /\ (~ TransSet X3))))) -> (atleast6 (binrep (binrep (Power (binrep (Power (Power Empty)) Empty)) (Power (Power Empty))) Empty) /\ (exists X2:set, ((X2 c= f (f Empty)) /\ p X2))).
admit.
Qed.

End Random2.
